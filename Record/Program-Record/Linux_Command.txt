
penguin  企鹅

http://ftp.icm.edu.pl/packages/GNOME/sources/  gnome源码
http://www.gnome-cn.org/  中文的gnome
http://www.51cto.com/os/linux2008/map.html 在线图书


putty工具连接linux/unix 可把屏幕输出保存到日志文件中
右击标题栏->change settinges...->log->session下的logging->选择all session output,选择保存文件位置
putty.exe -cleanup　可以删除所有的记录,密钥
删 HKEY_CURRENT_USER\Software\SimonTatham\ 下的所有东西也可重置
windows->Transation中修改编码显示中文


SecureCRT 中 会话选项->外观中修改为UTF-8
export LANG=zh_CN.UTF-8



GPL (General Public License)
内核　次版本号是偶数是稳定版

linux硬件兼容支持,显示设备XFree86


lsb_release -a
cat /etc/os-release 显示系统信息，包括哪种linux系统

cat /etc/issue
cat /etc/oracle-release
cat /etc/redhat-release

cat /etc/SUSE-brand

========================Gnome-3 界面
Terminal 按ctrl+shift+t 新建一个标签页

"三"按钮->show hide files

要多个图形用户同时登录  锁机 -> login another user

totem　命令打开播放器,3.26版本 播放mp4提示要MPEG-4 ACC decoder plugin,H.264(Main/High profile) decoder
gstreamer-plugins-xxx

Cheese摄像头



~/.Trash //是回收站
~/桌面  //这个目录是桌面

/usr/share/pixmaps  图标文件 
/usr/share/pixmaps/backgrounds/gnome/  有图片
/usr/share/icon
/usr/share/applications/bcompare.desktop  左侧的工具栏图标  
	

ctrl+L (小写L) 在文件浏览器就有地址栏
Alt+F2,打开“运行应用程序”对话框
super(win)+a 快速打开所有应用
super +h 隐藏窗口
alter+拖动文件  有提示  link here
Setting->Devices->keyboard->Hide all Normal window 默认没有，设置windows+D显示Super+D

shift + print 会选择区域截图
 
alter+上键，向上 
#gconf-editor 配置界面没有gedit的项,类似windows的注册表一样的东西

Ctrl+Shift+Alt+R    开始屏幕录像,上方栏中有红点,再按结束,会生成文件 ~/Vides/screencase-时间.webm   使用Totem Movie Player 3.2.1来播放,但好像没有声音

在 文件浏览器中  ctrl+alt +backspace 可以注销 (openSUSE-leap-15不行的)

ctrl+alt+左/右键  与 Intellij Idea 快捷键 冲突 
ctrl+alt + 上下键   可以切换桌面
alt+shift+` 切换同一应用打开的多窗口 类似Mac 是command+shift+` 
Super+` 快捷键在实例之间切换

Super+A：显示应用程序菜单

 
gnome3 桌面上不能放文件 ，gnome-tweak-tool (Activies -> Utilities->Tweaks) -> Desktop ->把 把所有的都打开,就可以在桌面上放文件了 
左侧的工具栏图标   /usr/share/applications/bcompare.desktop

gedit  显示行号->preference->View -> display line numbers
gedit tab空格数由8修改为4 ->preference-> Editor->tab with 修改为４
gedit 打开自动换行->preference-> not select "Enable text wrapping"
gedit 打开文件时可以选择GBK编码,一下次再打开这个文件就会记录,自动选择正确的中文编码，而不是手工选择，？？
gedit -3 在打开文件时有选择编码 

用  "CD/DVD创建者" (Brasero) 打开*.iso文件,可以刻录

	
字体  在	/usr/share/fonts/truetype/   ,ecipse chrome等默认字体为mono space
 
dconf-editor 图表配置工具　为配置 dconf
----themes 

https://www.gnome-look.org/browse/cat/135/ord/latest/
 McHigh Sierra (测试 放~/.themes 下成功，即只Application选择成功,即窗口样式,还有Cursor,Icon没有选择)

Gnome3的主题存放在/usr/share/themes/目录 (有Adwaita目录) 与 ~/.themes  两个目录下
  Tweaks(gnome-tweak-tool)应用可以选择主题(Adwaita是默认的)
  
---icons , cursor
/usr/share/icons  (有Adwaita目录)  ~/.icons
两个目录 测试 MacOSX-icon-theme 图标成功
 ~/.local/share/icons  目录也测试成功 

----extensions
https://wiki.gnome.org/Personalization 下有extensions  但没有themes

Gnome3的扩展存放在/usr/share/gnome-shell/extensions/目录  与 ~/.local/share/gnome-shell/extensions/ 目录下

gnome-shell-extension-prefs  的开Shell Extenstions窗口 (Tweaks 应用也可有这些配置),有很多开关
  Alternate Tab          按alt+tab相同的应用是在显示在一组
  Applications Menu      是否在窗口左上角显示gnome2风格的菜单
  Places Status Indicator在左上角是否显示到某个目录的快捷菜单
  Window List            显示像windows的任务栏 ,在任务栏中也不能拖动应用
        可以设置按钮,设置always group windows 后看不出一个应用打开了多个窗口，Group windows when space is limited,默认是Never group windows
  Workspace Indicator    在右上角显示当前在哪个虚拟桌面
  
  
https://github.com/bsaleil/todolist-gnome-shell-extension
  (放在~/.local下测试成功,但目录名一定要要叫todolist@bsaleil.org才行)
文件放目录后重启 gnome-shell（不知道如何做,kill不行的,再次进登录不容易，alt+f2输入r回车提示在Wayland下不可用）或者 注销,gnome-tweak-tool打开
----
Tweaks ->windows->Titlebar Buttions 区 打开 Maximize,Minimize 显示最大化，最小化按钮
  根据选择提示背景桌面图片存放在 /usr/share/pixmaps/backgrounds/gnome/
  锁屏显示是xml文件 在 /usr/share/wallpapers/openSUSE-default.xml
dconf-editor 的图形界面 -> 找到org/gnome/desktop/screensaver
   其中 picture-url的值默认也是/usr/share/wallpapers/openSUSE-default.xml，可以修改指向图片，只是显示日期背景，不是输入密码背景

----顶部栏日期显示秒
	Tweaks-> Top Bar->把Seconds打开

---Gnome 3 自带自动切换壁纸的功能
/usr/share/backgrounds/

/usr/share/gnome-background-properties/ 下有xml文件 配置桌面背景


gnome shell  大多数图形代码用JavaScript写成 使用OpenGL来渲染图形
GNOME Shell 扩展就像那些可以安装在 GNOME 之上的第三方附加组件和插件
gnome-shell --version

---
修改默认程序  Settings->Details->Default Application 但是没有文本编辑器的(Komodo Edit 增加右键菜单第一项,快捷键是enter)
WPS linux版安装后 ，右键菜单有新建doc...
========================命令
~/.bash_history 命令历史记录

!ps 表示调用历史命令中以最近的 ps开头的

linux 的mv 命令不能合并,如目录中有相同目录,先合并没相同的,再用cp -r 

init 5 可以成功,OK
修改/etc/inittab文件，将id:3:initdefault:修改为：id:5:initdefault:
runlevel 看
systemctl get-default

/etc/inittab 提示(centOS-7.6有 , openSUSE-leap-15没有这个文件,用systemd)
# systemctl get-default #可以查询到当前所设定的状态  multi-user.target 相当于以前的 runlevel 3
# systemctl set-default graphical.target  #相当于以前的 runlevel 5 也就是图形界面
   运行命令后 提示 建立 symlink 从 /etc/systemd/system/default.target 到 /usr/lib/systemd/system/graphical.target


e2label  /dev/sda1 显示挂在哪个分区下

Windows  下用Easy CD Creator,linux下用cdrecord
1.cdrecord -scanbus 寻找到光驱的通道编号,显示三个数字如0,0,0
2.cdrecord -v dev=0,0,0 speed=32 file.iso  ###dev=0,0,0 是上面的值

第一个IDE 主　: hda   　第一个IDE 从  hdb
第二个IDE 主　　hdc
SCSI   sda 

onporob 　###porob 探针, 探测器　　
命令行alter+fn 切换终端   图形用ctrl+alt+fn ，如在非图形界面使用alt+左右键可以切换终端
安装过程中按alt+f3 ,f5有信息

 
光盘镜像 写入U 盘,可引导启动的,先umont(试过也可以不用),写时of不带分区数字,写后要用sync命令
(测试是可以引导安装系统,但插入U盘系统不能识别,分区第一个是4M的fat分区用于UEFI,一个是数据分区,一个是剩余未用分区)
umount /dev/sdb4
dd if=./openSUSE-Leap-15.1-DVD-x86_64.iso of=/dev/sdb  bs=1M    1M很慢，可用10M
sync 


dd if=bootdisk.img of=/dev/fd0  ##备份引导分区到时软盘 if(input file )
引导后用,在提示中输入 linux askmethod 可选Hard drive
 
 
挂载ISO  mount -t  iso9660  -o loop,ro XXX.iso /mnt/some-dir

dd if=/dev/zero of=myfile.img bs=1024 count=102400  (bs单位是BYTES) 100M
losetup -f (find 打印第一个没使用loop设备)
losetup -f myfile.img 文件关联这个loop 设备
losetup -d /dev/loop0 (detach)
fdisk /dev/loop0 建两个分区后, p显示 分区名为/dev/loop0p1  /dev/loop0p2 也生成了文件
partx /dev/loop0 显示分区表 
partprob /dev/loop0  分区表的改变信息
cat /proc/partitions 
kpartx  -a /dev/loop0   (-a Add partition mappings) 会在  /dev/mapper/下生成 loop0p1 loop0p2
grub-install --boot-directory=<DIR>  /dev/loop0



du -sh 目录名   来看这个目录一共占用的空间

uname -r内核版本 -o 操作系统 -a 全部信息
pstree 进程树
ps -ef |grep tomcat (-e同-A 全部,-f full-format listing)
kill -9 (刚才的进程ID)
ps -aux |808
# rm ./F\:\\  对 : 和 \ 空格目录时要用\进行转义  ,即\:  和 \\ 
如果文件中以-开头  如文件名是  -m , 使用 rm -- -m 或者rm ./-m


pgrep -l httpd 显示进程名字及进程ID,再用 killall 进程名
pgrep -u root,daemon httpd    , pkill httpd
grep -v '^#'  xx.conf
egrep 就是 grep -E 正则
fgrep 就是 grep -F 换行分隔多个字段
 
rmmod pcspkr 可以将该命令写到 /etc/rc.local 这样下次系统启动的时候就会执行
  
vi /etc/shells文件中显示这个系统有哪些shell 
/bin/csh    退出shell 用exit(shell中运行子shell)
bash是默认的,   help命令
bash -x xx.sh 可以显示命令和参数
bash -n xx.sh 检查语法错误

kernel 中加 single 进入单用户 
centOS 7.5 在linux16行尾加 single 会不一样,但要root密码 
	在linux16行尾加 init=/bin/bash ,修改root=xx后面的ro 为rw    ctrl+x启动 测试生效
 
加swap分区  （count 等于想要的块大小。 ）
	#dd if=/dev/zero of=/home/swap bs=1024 count=1024000    ##bs(bytes),1G
	seek=10 , 在输出中跳过10个开始写
	
	#mkswap /home/swap
	#swapon /home/swap
	free -m  看swap 分区
	编辑 /etc/fstab 文件来包含以下行。
	/home/swap swap swap defaults 0 0

 
cat /proc/swaps 正在使用的swap
swapon 是开启swap
swapoff 关闭swap  
swapoff -a (-a,-all)
echo "vm.swappiness = 0">> /etc/sysctl.conf     （尽量不使用交换分区，注意不是禁用）
sysctl -p 

								
redis提示 加 vm.overcommit_memory = 1 到  /etc/sysctl.conf ,用命令 sysctl vm.overcommit_memory=1立即生效
cat /proc/sys/vm/overcommit_memory
0 表示内核将检查是否有足够的可用内存供应用进程使用:如果有足够的可用内存,内存申请允许. 否则,内存申请失败,并把错误返回给应用进程。
1 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。							
		
redis 最大打文件数
fs.file-max = 10032 到  /etc/sysctl.conf 


elasticsearch 提示
vm.max_map_count=262144  到  /etc/sysctl.conf 
								

w 谁在做什么 w -f    显示ip  ,看哪个在使用w 命令,哪个就是当前的 ( 也可以用who am i 会显示是哪个pts/)
who 看谁在用本机,
finger -l

fuser -k /dev/tty1   杀用户连接  (可能图形界面的多个 终端)
fuser -k /dev/pts/1

fuser   /usr/java/jdk1.6.0_43/bin/java  查哪个进程使用这个文件

查这个进程使用命令所在路径
ls -l /proc/<PID>/exe  是一个链接
file /proc/<PID>/exe  
lsof -c mongod  查看这个字符开头的命令所打开的文件

 
聊天用write,talk
write root pts/2 对方只显示,不能回复,要双方都使用write
talk  135.251.27.76  pts/1  #可能要安装talk-server
talk  user@135.251.27.76  pts/1

gnome-calculator
bc   计算器   5^3=125
cal  日历

zip -r filename.zip filesdir 创建zip
zip -s 4m filename.zip --out filename_part 可以把zip文件分卷压缩,文件以z01,z02结尾
cat filename_part.z* > filename.zip   //利用cat来合卷  

按print 或者alt+print 生出现 Save Screenhot 对话框可以抓图
 
/etc/inittab 文件

sar 1(间隔) 10 (总次数)  (system activity report)
	-o 输出二进制
	-f 读二进制
	-u cpu信息
	-d disk
		rd_sec/s  一个 sector是 512 bytes

	-r 是page，不是实际的
用vmstat是对的


iostat 
	Blk_read/s  Block=Sector=512 bytes

mpstat 查看多处理器状况 (smp 是支持多处理器,up是不支持多处理器)

 watch -n 1 "/sbin/ifconfig eth0 | grep bytes"  每一秒执行一次命令


stty erase ^h  使用backspace键生效　　(Oracle中) 也可以ctrl+backspace
rlwrap sqlplus 可以使用 sqlplus 中可使用上下键


bash 中ls-> 按esc 3 ->再按a  ,就会出现3个a (aaa)

 dd if=/dev/cdrom of=RedhatEL5.iso
 mkisofs -o RedhatEL5.iso -r /dev/cdrom
 

mkisofs  -r -o a.iso    a/  
建立映像文件 (把目录a下的内容做成iso文件)

mkisofs -volset-size 4  -volset-seqno 2  -r -o a.iso    a/   
建立映像文件 (把目录a下的内容做成iso文件,并指定共4张光盘，此为第2张)


mkisofs  -print-size  -r a/
预计建立映像文件的容量大小(extents) extent的单位是扇区


 数据同步  sync 命令,async
 
 
LD_LIBRARY_PATH Solaris/Linux

linux开通组播命令
route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0
如启动就开通组播
/etc/sysconfig/static-routes 文件内加入 eht0 net 224.0.0.0 netmask 240.0.0.0



/boot分区不能设置为ex4 分区

sort命令  -t 分隔符 -u 标志告诉 sort 命令除去重复的行,-r 反向排序
/usr/ucb/ps aux | sort -k 4 -r


vi /etc/sysconfig/i18n 改系统语言和字符集  echo $LANG=更优先


iconv -f GBK -t UTF-8 ./Egg.h  >Egg_1.h      把GBK编码转换成UTF-8 ,-f是from ,-t是 to

man -w 显示man 搜索路径
man -w fork 
man2html ./xxx.1 > xxx.html   autogen包
groff -Thtml -mandoc ld.1 > ld.html
2、测试显示效果
$ groff -Tascii -man hello.1   

man --path ,manpath  和man -w 一样的效果,所有 man 的查找目录,配置在/etc/man.conf中的MANPATH
man xxx.file 要加./的路径
 

touch * 把当前目录下的文件的时间修改为当前时间
  
windows 是\r\n
linux是\n

zip -e  #终端提示输入密码,来替换对文件夹加密
 

为用户指定shell 为　/bin/fals 　就不可以登录
passwd -l (lock) -d (delete password,unlock),-u unlock

getent passwd dell 查用户,就不用查/etc/passwd文件了
echo 123 |passwd --stdin user1 脚本修改密码

在/etc/init.d/一般需要关闭的服务有：
	sendmail 
	lp 
	rpc 
	snmpdx 
	keyserv 
	nscd 
	volmgt 
	uucp 
	dmi 
	autoinstall

nohup ${DOMAIN_HOME}/bin/startWebLogic.sh $* 1> console.log 2>&1 &
echo "hello" 1 >> test.log 2>&1    # 2>&1 中不能用空格 

ipcs	查ipc已有的资源
ipcrm -m 删除ipc资源,可根据id,key .可删
 
runlevel 查看是3还是5 运行级别 也可用 who -rH


普通用户不能监听1024以下端口,
1.iptables -t nat -A PREROUTING -p tcp --dport <低端口> -i eth0 -j REDIRECT --to-port <原先监听的高端口> 
2.rinetd
3.ipchans -I input --proto TCP --dport <低端口> -j REDIRECT <高端口> 
4.chmod 7755
5.修改内核的make_sock相关部分


stat file.txt  查看文件创建,修改时间的详细信息
chattr +i myfile 禁用所有用户修改文件(root 在内) 
chattr -i myfile
stat myfile
chattr +a myfile 只可append >>
lsattr  myfile

查  聊天用write,talk,  加
write,wall(ctrl+d)
w 查看所有的ttyp,write user pts/1
mesg n 表示不想接收消息 ,
mesg y 开启

tzselect命令 交互选择Asia
export TZ=GMT  (openSUSE 显示时间不准的解决方法)
export TZ=GMT+8

date后 时间就变对了

ntpdate time.windows.com 时间同步

linux 长按键 没用，使用 xset r命令后就可用了


清除history (最近命令)
　　1、在终端运行history -c，清除杂乱的历史记录
　　2、运行history -r /root/history.txt,把指定文件中的命令读进来作为当前bash的历史记录

清除last  (最近登录),lastb最近登录失败的 ,lastlog -u root最近登录时间
1.  rm   -f   /var/log/wtmp*  (该文件只能用who /var/log/wtmp来查看)
	touch /var/log/wtmp
2. 直接删除/var/log/wtmp和/var/log/lastlog文件得了
3. 删除/var/log/lastlog这个文件就可以不显示：
4. last命令缺省读取的是/var/adm/wtmp


tty7表示在本机的ctrl+alter +F7
pts/2表示SSH登录


sed -n '89P' filename
sed -n 111p filename
sed -n '起始行号,结束行号p' xx.log >partLog.txt

ldd /bin/ls 命令打印现所依赖的共享

date -s 07/28/2008  来改日期  月/日/年
hwclock --hctosys
hwclock --systohc
hwclock  --show 未尾有显示+08:00 ,原因是windows保存硬件中的时间是GMT+8后的时间,而openSUSE读硬件时间认为是UTC时间忽略了+08:00

centOS-7.6默认带ntpdate ,同步时间 
ntpdate  -u ntp.api.bz

VMware同步时间 
VMware 右击虚拟机->Options->VMWare Tools->复选Synchronize guest time with host

改时间
 date -s 13:27
 date -s 1327
date -s 2008-07-01  来改日期，08/07/01或者2008/07/01也可
date -s "2008-07-01 13:27"

time <命令>  可以显看命令的执行时间 


iwconfig 
man iwconfig 会显示iwlist 显示所无线网络的命令
iwlist scan 来显示所有的无线 网络(iwlist wlan0 scan)
TYPE=Wireless
 
make -j4 起4个gcc(job)
make depend && make (用　＆＆　同时执行两条命令在一行上)
 
 


dos2unix xx.txt  可以把windows的^M 转换成 unix 回车
tr -d "\r" < oldfile.sh > newfile.sh

sed 's/^M//g w newfilename' oldfilename  //-i  ,-e
其中：
s  表示Searchg 表示搜索全文,缺省是搜索第一个^M 是回车换行符,输入方法是按住CTRL+v,松开v,按m  
w  表示写到新文档中.

86103111879708,
sed 's/^86//;s/,$//' user.txt     #去掉开头的86 及尾部的,号

windows 下打linux文件用,写字板来打开

eject cdrom  
Nero 记录光盘 ，ISO 标签栏，文件名长度ISO (1，最多8＋32，最多31)


$find  .  -perm -007  -exec ls -l {} \;
find  /var/cache/yum/x86_64/7/  -name '*.rpm' -exec mv  {}  ./ceph_storage_cluster \;

cdrecord dev=b,t,l -v -dao schillix-0.1.iso
 ls --color=tty 可以高亮 或  --color=always
 
alias ls='ls --color=always -ahl'
unalias 

ip link 可查mac地址
ip link set dev eth0 down
#ifconfig eth0 down
更换物理地址
# ifconfig eth0 hw ether AA：BB：CC：DD：EE：FF
# ifconfig eth0 up
 ifconfig eth0 192.168.0.118 netmask 255.255.255.0
 ifconfig eth0 192.168.0.118/24
 
last登录用户历史
rout
tcpdump
windows 下php+mysql+apache的安装集成
hostname
hostname -i 查看ip  ，同ifconfig

route add default gw 202.2.2.2 dev eth0

route del default gw 202.2.2.2


ping -c 发出报文数  -i 间隔时间　

traceroute IP
netstat -anptu
nslookup输入域名或者IP
	lserver
	server
	exit


/etc/services/服务名与端口的对就的关系

tcpdump -e host 主机名
 -i interface
 -n 不转换地址到名字，即数字
 
/etc/host.conf文件 order host,bind  #先按hosts文件再按ＤＮＳ
		multi on	#是否/etc/hosts中允许一个主机有多个ＩＰ地址


whereis gcc
which gcc
whoami
GCC  3.4 将${destdir}/lib路径添加到环境变量LD_LIBRARY_PATH中


shutdown -h now  关机
shutdown -r now  重启

halt 系统停机



登录后用　　＼s 看状态信息　　＼ｑ退出　　exit

/etc/rc.local 文件的脚本会在开机自动运行


md5sum -c httpd......md5    显示OK

make & > make.log& 后台编译
tail -f make.log可以监控
tail -50f make.log 最后50行
head -n50 make.log


(lynx)
links  http://localhost/　　可以显示网页的结果
两次esc键出菜单 
links 下载地址 http://links.twibright.com/download.php  2.13

elinks 是基于 links 的,但长时间不更新


md5sum mysql-.tar.gz  的结果与网站上的结果比对

gpg --import  公钥文件 -pubkey.asc
gpg --verify   签名文件  tar.gz.sign(tar.asc)
复制网页上的公钥文件

wget http://  来下载
-q  --quiet  Turn off Wget's output.
-O file 如file是 - 会输出到标准标出上
-P,  --directory-prefix=PREFIX  保存位置 

curl 来请求

iostat
vmstat的输入格式
procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st

Procs
   r: The number of processes waiting for run time.
   b: The number of processes in uninterruptible sleep.

Memory
   swpd: the amount of virtual memory used.
   free: the amount of idle memory.
   buff: the amount of memory used as buffers.
   cache: the amount of memory used as cache.
   inact: the amount of inactive memory. (-a option)
   active: the amount of active memory. (-a option)

Swap
   si: Amount of memory swapped in from disk (/s).
   so: Amount of memory swapped to disk (/s).

IO
   bi: Blocks received from a block device (blocks/s).
   bo: Blocks sent to a block device (blocks/s).

System
   in: The number of interrupts per second, including the clock.
   cs: The number of context switches per second.

CPU
   These are percentages of total CPU time.
   us: Time spent running non-kernel code. (user time, including nice time)
   sy: Time spent running kernel code. (system time)
   id: Time spent idle. Prior to Linux 2.5.41, this includes IO-wait time.
   wa: Time spent waiting for IO. Prior to Linux 2.5.41, included in idle.
   st: Time stolen from a virtual machine. Prior to Linux 2.6.11, unknown.


 
在/etc/inputrc文件中把 set bell style none 前面的#去掉===就可以在的按tab 键时不发声音
 
### 可以不用的 /etc/systab  文件中在某一个分区后方的defaults变为 defaults,acl,来开启ACL的功能,重启后生效
whoami 当前用户

fdisk /dev/sda
	m->p
	m->l

mke2fs -t ex4
mkfs -t ext3 /dev/hda
fsck  不能对已挂载的

ls /dev/ram*     是内存

查电脑最大支持内存 dmidecode | grep -P 'Maximum\s+Capacity'
看内存是DDR几代 dmidecode -t memory



mkfs -t ext3 /dev/ram15
mount /dev/ram15 /mnt/mem1
df   可显示挂载状态 (磁盘的可用空间)
df -T 显示文件系统类型
lsblk -f 带文件系统类型  -f,--fs


ls -R 递归
ls -t 按修改时间排序  -r 反向排序

ls -l  --time-style=full-iso

ls -l 
ls -ltu 按仿问时间排序和显示
ls -lu  显示仿问时间按名字排序
ls -ltc 	显示和排序按	ctime (time of last modification of file status information)


linux 文件没有创建时间, 有状态改变时间(chmod) , 有访问时间( more命令)
ext4文件系统可查创建时时
df -T 查分区类型，文件所在设备

debugfs /dev/sda2 		出现debugfs:提示符
debugfs:cd ~
debugfs:ls
debugfs: stat x.txt 			显示 crtime 有值
debugfs: 
debugfs: quit 退出

stat temp.c 查看文件详情

ln	 软链接可跨分区
	硬链接不可以跨分区


du -h 显示目录使用的空间
whereis  ls  比which 多显示man文件

find /usr/ -name core -exec rm {} \;     #注　\前有空格　\后无空格
find /usr/ -name '*.so'

find ./ -name  *.h -type f | xargs grep "xxx"
find /usr/include/ -name *.h   -exec grep -H -n  LOCAL_ {} \;
//可以打出哪个文件多少行

find /var/cache/zypp -name *.rpm -exec mv {} /mnt/ext4/Ext4_NEW/mysql-workbench8_deps/gtk3_gtkmm3 \;

tee 指令 从标准输入 读 ， 输出到标准输出设备 和 文件


ps aux | wc -l    (-l行数)

su - 比 加－继承了录前用户的环境变量

su -切换到一登录到SHELL的用户

useradd -d <HOME DIR>  -s <SHELL>

文件权限的中有s位的,会以root身份的执行

chmod 4777 属主加s ,,67777属组加要，ls用红色来表示


black size 大 ，inode就多
mkfs.ext3 -b 1024 /dev/ram3s  (1024Bit=1k blocksize )块大小

mount 信息-h 
mkfs.ext3 -b 1024 -i 8196 /dev/ram4   一个结点代表8个文件块  来节约inode（有可能用光）

tune2fs -l /dev/sda7 查看 Block size:1024 
tune2fs -l /dev/ram13  来查看信息( 块和结点对应)
	有Inode count:
	  Block count:
mkfs.ext3 -m 2 保留硬盘的%2的空间  （防止硬盘空间满）
	  
hdparm /dev/sda1

tune2fs -c 1000 /dev/ram3 最大挂载数量1000
	-id 10d  自检时间间隔 d| m |w
	-m 保留块百分数
	-j  转换为ext3文件系统


locale -a  列出系统所支持的所有的编码
LANG=zh_CN.utf8

at 9:40 + 7days 
>ls
>pwd
>按ctrl+d结束

at now + 3 minutes   (hours,weeks 或者 today,tomorrow)

atq 显示所有任何的id和时间
at -c 2 显示脚本
atrm 2 删除任务

chkconfig --list
chkconfig crond on/off       定时任务

telnet <IP> <port>  退出 按ctrl+],出现telent>打q回车



/etc/ssh/sshd_config 文件中打开下面三个
#RSAAuthentication yes
#PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys

ssh-keygen 会要求输入密码(可不输),有 -t rsa 和 -t dsa
默认生成 自己用的私钥 ~/.ssh/id_rsa 和传给对方的公钥 ~/.ssh/id_rsa.pub 

ssh-copy-id root@192.168.1.102  #把自己的公钥给指定机器authorized_keys

收到别人的公钥后 追加写入自己机器的 ~/.ssh/authorized_keys 文件(权限),别人就可(使用建立密钥时的密码或无)连接自己机器
自己的机器有公钥,对方连我不用密码

接收方 tail -f   /var/log/secure 看日志 如报 Authentication refused: bad ownership or modes for file ~/.ssh/authorized_keys
chmod 700 ~/.ssh/  (必须700)
chmod 700 ~/.ssh/authorized_keys(可700,600)
chmod 600 ~/.ssh/authorized_keys




#PermitRootLogin yes
#ClientAliveInterval 0
#ClientAliveCountMax 3

ClientAliveInterval 60
ClientAliveCountMax 6
SSH Server 每 60秒就会自动发送一个信号给 Client，而等待 Client 回应，如果客户端没有回应，会记录下来直到记录数超过 ClientAliveCountMax(这里设置为6次) 的值时，才会断开连接。

 
Bitvise Tunnelier  界面工具可以做端口转发
ssh -2C -p 22 dell@rhel7  -L 5000:localhost:80 -g   
提示输入密码连接，如连接断，5000端口的监听就没有了 #做隧道 -2C 表示SSH 协议使用2版本 ，C表示压缩传输数据，-p远程端口
(在本机启动一个新端口如5000 如请求到本机的5000端口会自动转发到另一台rhel7机器上的80端口) 



groupadd
groupdel
groupmod
groups git  查用户所在的组

id
logname 登录用户名
chroot
dmesg 命令 开机启动信息 设备信息 /var/log/dmesg  (openSUSE没有这个文件)

resize -s 800 600 终端大小
cksum 显示文件的CRC
startx

cal 
cal 2012

diff 命令产生的文件,再patch 打补丁
curl http://www.baidu.com

webservice 请求  ,当前目录建立xml中写请求体
curl --request POST -k --data-binary @hello.xml -H "Content-Type:text/xml;charset=UTF-8"  http://127.0.0.1:8080/J_CXFSpring/Hello

-k, --insecure 
-o  将指定curl返回保存为out文件,同 >
-d, --data <key=value>  向服务器POST表单数据,值加"" 
--data-binary @hello.xml
-x  ip:port 指定使用的http代理
-H <header:value>  为HTTP请求设置任意header及值  
-X, --request <command> a custom request method 
-i, --include (HTTP) Include the HTTP-header in the output
-e, --referer 
-A, --user-agent 
-I, --head          Show document info only
-D, --dump-header FILE  Write the headers to this file
-u, --user USER[:PASSWORD]  Server user and password

  
curl -A "Mozilla/5.0 Firefox/21.0" http://www.baidu.com #设置http请求头User-Agent
curl -e "http://pachong.org/" http://www.baidu.com #设置http请求头Referer
curl -I http://www.baidu.com #仅仅返回header
curl -D /tmp/header www.baidu.com  #将http header保存到/tmp/header文件
curl -u admin:admin http://127.0.0.1:8161/admin/  对要Basic的验证 如ActiveMQ




Linux 下挂载 Mac 的dmg 格式  mount -t hsfplus -o ro /dev/cdrom /mnt


sudo -i 可以进入全root模式 
	chmod 4755 /usr/bin/sudo
	要 /etc/sudoers 文件中有当前登录的用户(在root下加一行 )
	user1    ALL=(ALL)       ALL
	或者用命令 visudo 进入vi修改,可防止两个用户同时修改它,有限的语法检查
	可以放开 # %wheel ALL=(ALL) ALL 所有这个组的用户都可sudo

openSUSE 在 sudo 时要的是root密码,不是当前登录用户密码


无密码使用 sudo命令
echo "user01 ALL = (root) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/user01
sudo chmod 0440 /etc/sudoers.d/user01


mail 看邮件  /var/spool/mail/root  ,如 cron 任务语法错误

=== 上命令
------/etc/crontab

1 	分 	0-59 	 
2 	小时 	0-23 	 
3 	月中日 	1-31 	与分和小时不同，月中日不是从零开始的。
4 	月份 	1-12 	月份也不是从零开始的。也可以不使用 1-12 的数字，而是使用月份名的前三个字母，比如 jan 或 may。
5 	周中日 	0-7 	0 和 7 都代表星期日。还可以使用名称的前三个字母，比如 mon 或 wed。 

用星号（*）表示 “所有"
列表 是一个逗号分隔的值集
范围 由启始值和结束值（含）以及可选的步长值构成。 

分		小时		月中日	月份			周中日期	说明
0 		1 			15 		1,3,5,7,9,11 	* 			在 1、3、5、7、9 和 11 月的 15 日的 1 a.m. 运行命令。为了更容易理解，也可以把这个时间表写成 0 1 15 jan,mar,may,jul,sep,nov *。在指定列表时，不要在逗号后面加空格。
0-59/15 * 			* 		* 				* 			这个调度计划每 15 分钟运行命令一次。
30 		* 			* 		* 				wed,fri 	这个时间表只在星期三和星期五每小时的 30 分时执行命令一次。（在列表中可以使用日和月份的名称，但是在范围中不可以）。
0,30 	0-5,17-23 	* 		* 				* 			在午夜到 5 a.m. 以及 7 p.m. 到 11 p.m. 之间整点时和 30 分时运行命令。
0 		0 			1 		1 				* 			在每年 1 月 1 日午夜执行命令一次。
0 		0 			* 		* 				0 			在每个星期日午夜运行命令。这相当于每周一次。
30 		0 			0,20,30 * 				6 			因为月中日和周中日受到限制，这个时间表在每星期六和每月的 10、20 和 30 日（二月除外）的 12:30 a.m. 运行命令。 

*/1 在第一列表示每分钟

简写形式	说明
@reboot 	每当计算机重新引导时运行命令。
@daily 	每天一次的简写形式。
@weekly 	每周一次的简写形式。
@annually 	每年一次的简写形式。也可以写成 @yearly。
@midnight 	在每天午夜运行命令。这个简写形式相当于 @daily。 


00 23 28-31 * * [`date -d tomorrow +\%e` -eq 1] && do-something		每月的最后一天的23点做do-something,%e表示第一天用 1表示同%_d,%d就是01 

/etc/crontab 中的配置
@daily     zh  find $HOME -type f -name '.#*' -print -delete
#要加用户名,Mac修改文件都是彩色配置才是正确的,修改文件立即生效,contab -l 查不到

crontab -e 当前用户增加/修改  文件存在/var/spool/cron/<user>文件中 
crontab -u zh -l 来查看
crontab -r 删除当前用户全部
Mac记录在 cat /usr/lib/cron/tabs/<用户> 文件中
	
cron命令启动服务，
/etc/rc.local 中写入cron

Mac 是/usr/lib/cron/cron.allow  

------


netstat -vat 所有活动的 与被监听的连接
route add 127.0.0
route add default gw 网关地址  
route add -net 202.202.0.0 netmask 255.255.0.0 gw 172.18.20.1 dev eth1


netstat -vat
  
whoami 显示当前用户
 
which 命令，显示命令所在位置

vfat,ntfs是window的分区格式

/proc/目录来获取硬件信息
/opt/第三方应用程序安装这个目录
/sbin/ root或是管理使用的命令文件

umask 默认值0022 初建立文件的权限为 755  
umask 033 设初建立文件的权限为 744  用777来减   （r-4   w-2  x-1）
umask 0133  设初建立文件的权限为 644

fstab文件 自动每次开机时自动挂载光驱


/proc/cpuinfo  CPU的信息
top d 2 ,H显示线程，h帮助 ，k kill  15 要比 9 更有强度
/proc/meminfo 
free ,vmstat 5可每5秒自动更新
iostat
nice -20~19   默认0，值越小越快 ， 进程优先级
& 后台运行  fg jobs ctrl +z
　
telinit q  重新加载initab  文件
tload 系统负载
top 工具
	o 列的位置
	f 加减列
	F  或 O -> 再选择 要排序列
	
	M,P按内存和cpu排序
	R反向排序
	
	< 排序字段移动为向左一个   > 排序字段移动为向右一个  

	H 开关显示线程
	l 开关load average
	m 开关memory
	t 开关task
	u 只显示输入的用户
	n 或 # 显示最多的
	d 或 s  每几秒显示一次
	W 将当前设置写入~/.toprc文件中

grep -v grep 　不显示grep  -n显示行号, -C 50 显示周边50行

zgrep keyworkd file*.zip  对.zip文件
zless file.zip 对.zip文件  相当于zcat file.zip | less

rpm -qc openssh-server 查找软件包配置文件

which 命令

panic 惊慌, 恐慌, 没有理由的


liux下的记录软件 cdrecord 工具
cdrecord -scanbus
把值给下的的 dev=...
cdrecord -v dev=0,0,0 speed=32 file.iso


如果可以FTP用户 访问自己的目录要 setsebool -P ftp_home_dir =1
 
export LANG =zh_CN.UTF-8
date后可中文

modprobe usb-storage  USB存储器的驱动  会认为sd类型的

mount -t vfat -o ro,utf8,uid=dell,gid=zh /dev/....
-o      iocharset=gb2312
	iocharset=utf8(可省为utf8)
	uid=xx,gid=xxxx,umask=0077
-a 会读/etc/fstab文件 ( -a -t vfat 会/etc/fstab 中有所的vfat类型的) 
wheel组为root组

mount -o iocharset=utf8,uid=dell  -t vfat /dev/sda7 /media/E/
fat32 要加iocharset=utf8 ,文件名是按linux正常显示中文的，ntfs就不用了只ro
  要指定uid 普通用户才能有权限写

iocharset=utf8,uid=dell 可对vfat和exfat但不能对ext4

netstat -tnl  显示端口


--------
strace
ulimit -c 100   core file size 
gcc 11_5_3.c -o 3 -g
gdb ./3 -c core

linux下默认是不产生core文件的，运行 ulimit -c unlimited 放开
-------
------linux 双显卡切换 
lspci | grep VGA  显示的第一列的 "号" 与后面的描述对应哪个是独立显卡
cat /sys/kernel/debug/vgaswitcheroo/switch  显示+表示当前使用的, Pwr 表示通电,Off表示未通电
echo ON > /sys/kernel/debug/vgaswitcheroo/switch   打开独显
echo OFF > /sys/kernel/debug/vgaswitcheroo/switch   关闭独显
dmesg | tail -15 查看是否成功

 
linux-q50c:~ # lspci | grep VGA
00:02.0 VGA compatible controller: Intel Corporation 2nd Generation Core Processor Family Integrated Graphics Controller (rev 09)
01:00.0 VGA compatible controller: ATI Technologies Inc Whistler [AMD Radeon HD 6600M Series] (rev ff)

DIS 即 Discrete Display 独立显卡 
IGD 即Integrated Display 集成显卡

openSUSE-13.2不用了,只是DynOff
# cat /sys/kernel/debug/vgaswitcheroo/switch
0:IGD:+:Pwr:0000:00:02.0
1:DIS: :DynOff:0000:01:00.0
# echo OFF > /sys/kernel/debug/vgaswitcheroo/switch 
# cat /sys/kernel/debug/vgaswitcheroo/switch
0:IGD:+:Pwr:0000:00:02.0
1:DIS: :DynOff:0000:01:00.0
 

-------------
lsusb   等同于 lspci | grep USB
lsblk
ethtool eth0
lsblk
lscpu


(一个硬盘 主分区（包括扩展分区）的最大个数是四个)
一个硬盘最多可以有 4 个 Primary + Extended 的扇区

分区中不要删除boot分区,如果没有boot分区，最好不要在winodws 下删/ 分区 
手工分区最好也加/boot分区,自动分是会加的
windows 安装不要用修复安装，不能加引导区，只能格式化C盘：复制完成重启后，才可以（其它版本的windows 也可以(如winXP,使用win200来修复)，win2000没有快速格式化）
不能用linux，虽然可以检查到其它系统，但没有安装完成所有的软件包也不行的，（除非选择很少的系统包，安装完成）
Ghost 不会改变引导分区的东西 （对已有linux的引导）


chainloader + 1
boot  无效
可尝试用
rootnoverify(hd0,0)
chainloader+1
-------------
-----------千万不要运行的命令-------------
:(){:|:&};:
这段不知所云的符号，可以让 Shell 不停的 fork 子进程，最后导致内存耗尽，

:(){:|:&};: 等价于
f() # 定义函数
{ f | f # 这个是精华, 管道线使两个 f 同时运行 }; f # 调用函数永不返回, 无穷递归. bash 的调用栈放在堆上, 结果耗尽所有CPU和内存空间. 而且同时运行的 f() 是指数爆炸式的…


“\x6e\x2f\x73\x68\x00\x2d\x63\x00″  是表示可能表示 一个破坏的命令
--------------------------
-----wine
wine --version
wine64　是对64位的
 
cd ~/.wine/drive_c/Program\ Files\ \(x86\)/
Activites -> configure wine 可以配置D 盘指向哪里

https://wiki.winehq.org/Mono
http://dl.winehq.org/wine/wine-mono/

wine-5.2有wine-mono-5.2.rpm 里有 wine-mono-4.9.2.msi(也可单独下载)
手动安装 wine64 msiexec /i /usr/share/wine/mono/wine-mono-4.9.2.msi



为运行html
https://wiki.winehq.org/Gecko
(有wine-gecko-2.47.rpm)下载的 wine_gecko-2.47-x86.msi , wine_gecko-2.47-x86_64.msi 文件放在 /usr/share/wine/gecko 
gecko 壁虎

如是 .msi  文件运行
wine msiexec /i whatever.msi   或者 wine start whatever.msi

安装界面中文乱码解决方法
env LC_ALL=zh_CN.UTF-8 wine BaiduNetdisk_6.7.0.8.exe
printenv
------wine 安装过的应用

----PlSqlDev
用wine PlSqlDev.exe 来安装PL／SQL Devolope  (可以成功安装在 ~/.wine/drive_c/Program Files/PLSQL Developer 下)
			 ~/.local/share/applications/wine/Programs/PLSQL\ Developer/ 下也有文件 (像是windows下的桌面,可以双击运行它)
进入 安装目录 wine plsqldev.exe 就可以成功的运行了,但是界面上的工具栏上的图标不能显示（右击图标 -> customer...显示 全部不能显示）

---微信
Activites -> configure wine 可以配置D 盘指向哪里,所有使用的用户都要运行winecfg 配置才会生效，在使用微信时配置总是会被还原？？？
wine 安装微信找不到文件所在目录 可能是C盘没权限,重新配置D盘就可以了

---Navicat_Keygen
chmod u+x  Navicat_Keygen_Patch_v4.3_By_DFoX.exe 
wine Navicat_Keygen_Patch_v4.3_By_DFoX.exe 才可运行

---StarUML
wine msiexec /i  StarUML-v2.8.1.msi 
cd ~/.wine/drive_c/Program\ Files\ \(x86\)/StarUML
wine StarUML.exe 出界面提示错误

---PowerDesigner
cd ~/.wine/drive_c/Program\ Files\ \(x86\)/Sybase/PowerDesigner\ 16/
wine PdShell16.exe 　 报Wine Mono is not installed,安装了mono-core-5.10.1-lp150.1.6.x86_64.rpm　报EXCEPTION

----安装Viso2016不行的

 
---------mono　社区的
开发出了 Xamarin  , Xamarin Studio　6.3时最后一个版本,因Visual Studio支持Mac版本
MonoDevelop     跨平台免费Ｃ#开发工具,　Visual Studio for Mac builds on top of MonoDevelop, macOS下VS开源
Rider (jetbrains intellij)跨平台收费C#开发工具

-------------dotNet core 3.1
https://docs.microsoft.com/zh-cn/dotnet/core/
https://github.com/dotnet/core

支持 Linux, Windows,  macOS

.NET Framework与Mono将基于.NET Core重新构建
.NET Framework将成为.NET Core在Windows上的一个发行版
Mono将成为.NET Core的一个跨平台发行版 


2020-02-23 的版本是　SDK 3.1.102  (3.1 长期支持的版本)支持 Visual Studio 2019 (v16.4) C# 8.0

下载　dotnet-sdk-3.1.102-linux-x64.tar.gz 
tar -zxvf dotnet-sdk-3.1.102-linux-x64.tar.gz  -C /opt/dotnet-sdk-3.1.102-linux-x64

也可
yast2 建立仓库　输入　https://packages.microsoft.com/opensuse/15/prod/ 也可直接在地址中下载 dotnet-sdk-3.1.102-x64.rpm   
 
https://packages.microsoft.com/config/opensuse/15/prod.repo   
 　文件内容有　https://packages.microsoft.com/opensuse/15/prod/ 
 
 
dotnet 命令
 ./dotnet  --info
 ./dotnet  --list-sdks
 ./dotnet  --list-runtimes
 ./dotnet new --help  显示有很多模板可以使用,如 console,classlib,mvc (winforms和wpf只能在windows上)
 
---console
mkdir cs-console && cd cs-console
dotnet new console   等很久提示Restore succeeded
自动生成 Program.cs 文件 
using System;
  
namespace cs_console
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
} 

dotnet build
dotnet run 测试成功

cd  bin/Debug/netcoreapp3.1/ 这个目录说是可以跨平台移动运行的
dotnet  'cs-console.dll'

---mvc
mkdir cs-mvc && cd cs-mvc
dotnet new  mvc 生成很多代码

dotnet run 日志提示 http://localhost:5000  跳到 https://localhost:5001
测试成功
 
---classlib
mkdir cs-lib && cd cs-lib
dotnet new classlib 
自动生成 Class1.cs 文件 
using System;
  
namespace cs_lib
{
    public class Class1
    {
    }
}
dotnet pack 提示成功 bin/Debug/netstandard2.0/cs-lib.dll ,bin/Debug/cs-lib.1.0.0.nupkg
 

==========IPv6
==========vi================

~/.viminfo
vim -u vimrc文件
SUSE vim 文档路径 /usr/share/vim/vim64/doc/starting.txt
	/etc/vimrc文件加syntax on
					  
solaris 下安装 vim-7.2 的语法加亮,vim 也可撤消多步了
	~/.vimrc配置文件中 , 添加set term=sun-color 

	在vim中用 :syntax on 或者用　:syntax enable
	也可在　~/.vimrc　中加入　　syntax enable

可在　~/.vimrc　中加入　 set hlsearch 
:set hlsearch  会在搜索时高亮选中当前页全部搜索到的文字
:set incsearch 在输入搜索文字时 , 时时定位到找到地方

view 是以只读打开(不高亮语法) ,vi -R 只读有高亮

J 删除当前行的换行符
v 进入可视模式,可以移动光标来选中文本

 * 查找光标的单词

:>4　把当前行和下４行缩进一个tab  (两个＞＞,两个tab)


:qa (quit all)
:wqa


cat -A file.txt显示换行($)和tab键(^I)但不是按4个对齐的
vi中用 :%!cat -A 是已修改文件的方式显示换行($)和tab键(^I)，要按u回退的
		:set invlist 显示换行($)和tab键(^I)
		:set nolist可以回到正常的模式
		
		
:set autoindent (noautoindent) 当行开头有空格或tab时,再回车换行时会自动使用上一行的缩进，最尾行开头有空格或tab按o新加一行会自动使用上一行的缩进
:set smartindent  类似 autoindent 增强 对{}当输入}时自动转换为C格式  使用 :help smartindent
 

vi  ~/.vimrc  
"开头是注释在vimrc文件中
"1个tab占4个空格的长度,默认8个,如yaml文件可设置为2
set tabstop=4	 
"有noexpandtab 把tab转换为空格,只对新的文本有效,已有文本要执行 :%retab!
set expandtab 
set smartindent

"set shiftwidth=4
"set softtabstop=4



:set fdm=indent  (foldmethod)
zf56G，创建从当前行起到56行的代码折叠
10zf+或zf10  创建从当前行起到后10行的代码折叠。


zo 展开折叠(光标位置) zO 全部:
zc 关闭折叠(光标位置) zC 全部
zd 删除 (delete) 在光标下的折叠
zD 循环删除 (Delete) 光标下的折叠，即嵌套删除折叠。
[z       到当前打开的折叠的开始处。
]z       到当前打开的折叠的末尾处。
zj       向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
zk      向上移动到前一折叠的结束处。关闭的折叠也被计入。



1.vimdiff 文件1,文件2
	 ]c   跳转到下一个diff点
	 [c   跳转到上一个diff点
	 2]c  跳转到下两个diff点
	 dp (diff "put")  一个差异点中 当前文件的内容复制到另一个文件里
	 do (diff "get") 一个差异点中 另一个文件的内容复制到当前行
	ctrl+两次w 在各个窗口切换按 (esc情况下,否则删光标到上一个标点)
	 
2.vim -d  文件1,文件2
3.vi 文件1  :vertical diffsplit 文件2   
:set diffopt=context:3(缺省是会把不同之处上下各 6 行的文本都显示出来以供参考)




:diffput(dp)
:diffget(do) 用 :1,$+1diffget 修改光标文件内容全部和另一侧相同
:diffupdate (当dp后,再u后要diffupdate  才显示效果)

:set nowrap后可以用 
	zL 向右移动半个屏幕  
	zH 向左移动半个屏幕
	zs 移动屏幕,使光标位于屏幕在开始处
	ze 移动屏幕,使光标位于屏幕在尾处
	
	
:set wrap
:set nu 显示行号
:set list 显示tab键为^I,回车为$,空白字符

当vim在utf-8的local下打开gbk文件时,显示的是乱码,可以在~/.vimrc文件中加入如下代码来解决
set fencs=utf-8,gbk
或者
set fileencodings=utf-8,gbk

打开显示正常后, :set fileencoding=utf-8  ,再:w the_utf8.txt  ,就把gbk的转换为utf8文件了

---查看文件字符集
file -i the_utf8.txt 如果文件和系统编码相同则显示utf8,否则GBK就显示为iso-8859-1,同有中文显示为us-ascii
vi 中 :set  fileencoding 可显示文件字符集 ,GBK对应的是 CP936,有时也为latin1,没有中文时显示就是系统字符集,不对???
---正常显示后以下两个配对使用
:set termencoding=utf-8  输出到客户终端（Term）采用的编码类型,一般不要修改
:set encoding=utf-8  该选项使用于缓冲的文本(你正在编辑的文件)


:f 可显示当前正在编辑的文件
:history 显示最近命令
  q? 显示最近向前查询命令
  q/ 显示最近向后查询的
命令“gg”移动到文件的第一行
跳转到文件的第1234行，只需输入“1234G
跳到文件的正中间，输入“50%
3fx”表示移动到光标右边的第3个'x'字符上

:split  文件名  
:vsplit  文件名     (打开多个文件用vertical split 文件2  )
:resize +10 高度加大(-10) ,:resize 20高度到20
:vertical resize N 宽度

:set ignorecase //忽略大小写 
:set noignorecase //恢复到大小写敏感

vim 同时打开多个文件
:close关闭当前窗口
:bn       切换到下一个文件 可循环的
:bp       切换到上一个文件 可循环的
:bw       关闭当前文件
:hide e		a.txt 隐藏
:args	显示多文件信息
:next	向后切换文件
:prev	向前切换文件
:first	定位首文件
:last	定位尾文件
Ctrl+^ (Ctrl+6)快速切换到编辑器中切换前的文件
:n 下一个文件
:N上一个文件
:args	显示编辑名单中的各个文件名   
:n	读入编辑名单中的下一个文件  
:rew	读入编辑名单中的第一个文件  
:e#	读入编辑名单内的前一个文件  
:e filename
:e! filename 打开新的文件到vi编辑器中，并放弃对当前文件的修改
:r filename  读取文件内容到当前vi编辑器中


ctrl+z 最小化
ctrl+q 最小化 不可以fg 1 ,在不小心按了ctrl+s 无响应
发现交换文件:
	D delete ,E edit ,R recover ,O readonly
	:recover 恢复
	vi -r xx.

D  剪贴(删除)当前光标到时最后的字符
>   向右一个tab位
vi 中可以用!ls
vim +n file               打开 file 并将将光标移动到第n行
:x               保存并退出， 等效命令为 :wq
O行前加一行
o行后加一行
0或^           跳到行首
$                跳到行尾
i字符前加入
a 字符后加入
x                删除当前字符
X                删除前一个字符
:m,n d       删除 m～n行
:nd            删除第n行
dd             删除当前行

9u      就是9次
u                撤销前一步操作 :u 3  撤销3步 (可与ctrl+r 重做 多次)
U               撤销本行所有操作

:/word            向下查找word
:?word           向上查找word
n                     以当前查找方向同向查找下一个word
N                    以当前查找方向反向查找下一个word
fx 下一个x上
Fx 
yy               复制当前行
y2      算当前行向下共2 行
4yl  复制光标后4个字符  
4yh  复制光标前4个字符 

:1,$y 复制第一行到最后一行

3. 把剪贴板中的粘贴3次

p                在前粘贴
P                在后粘贴
:$ 移动到尾行 
G  移动到尾行 

:n 到指定行
:m,n copy x   将m～n行内容复制到 x 行之后   ＃
:m,n move x 将m～n行内容移动到 x 行之后   ＃move可以简写为mo

:set autoindent
:set showmode
ctrl +d /ctrl +u

替换：
:s/src/dst               将本行搜索到的第一个 src 替换为 dst
:%s/src/dst            将全文所有的 src 替换为 dst
:s/src/dst/g            将本行的 src 替换为 dst
:$,$… s/src/dst/g      在指定范围内替换src为dst，其中$,$… 为指定行号，例： :2,5,6 s/hi/hello/g
:s/old/new/c		在替换命令末尾加入c命令，将对每个替换动作提示用户进行确认

:%s 使用正则表达式 (\l表示小写字母 \u表示大写 \1表示引用第一个（）中的内容,\u 在\1前)
:%s/_\(\l\)/\u\1/g  #数据库命名规范转换为Java命名规范

 :%s/account_number/&/gn  查关键字的出现次数

:.,$-2d 表示从当前行到最后前2行做删除



vi列操作
  列删除/剪切  
  CTRL+v 进入“Visual block”模式，选取列(使用正,j,k, h,l) 按 d  
  小p 光标后按列粘贴,大P 光标前按列粘贴
  
	插入列
	CTRL+v 进入“可视 块”模式，选取列(使用正,j,k, h,l)
	SHIFT+i(I) 输入要插入的内容 (CentOS7.6无效)
	ESC 按两次，会在每行的选定的区域出现插入的内容 
	  
  
:%s/\n/,/g

 按v进入 visual 模式 可选中文本
 按shift + v进入visual line模式 可选中文本
 就可以按y复制选择的文本
 
:命令模式下   :history   调出vi历史命令,输入序号
				按ctrl+f (q:) 调出窗口可以移动光标

:命令模式下  ctrl+h 同backspace
:命令模式下 ctrl+b 到行首,ctrl+e 到行尾  向前移动一个字符用方向键有时有问题 
:命令模式下 

6yy向下复制6行
5G 向下5行


~ 光标字符做大小写转换

(Normal Mode 下)gu回车 全变小写 gU回车 全变大写  可继命令再输入影响范围 ,如 gu2j 从光标向下3行变为小写
v进入Visula Mode
i进入Insert Mode
:进入Command Line

vim 语法高亮 可直接用 
:syntax enable (或者syntax on)
:set autoindent

vim ~/.vimrc文件中加入 (没有建立,也不会在插件模式按方向键有问题)
	if &t_Co > 1
	syntax enable
	endif


:help 光标到链接处按ctrl+]进入,ctrl+o ,ctrl+t  返回
:viusage帮助


backspace 键工作
~/.vimrc文件中 加入就可以了
set backspace=indent,eol,start
#eol 全写 end of line
源码安装在doc 默认安装后在/usr/local/share/vim/vim72/doc/  里有:help 的文档
:undo
:undo 2
:undolist
:earlier 10h
:earlier 10s
:later 1m


ctrl+d 下半页 down
ctrl+u 上半页 up
ctrl+b 上一页 back
ctrl+f 下一页 forward

:set runtimepath?	查看插件目录,有$VIM/vimfiles/after,所有的路径下都有plugin目录

:set rtp+=/usr/share/vim/vimfiles	设定 vim 的 runtimepath 选项
:set ffs=unix,dos,mac			设置换行符格式 
:set history=400    

关闭备份
set nobackup                           
set nowb	#wb=writebackup
set noswapfile


重新载入当前文件：
:e
:e! #放弃当前修改，强制重新载入

:bufdo e 或者 :bufdo :e!

:bufdo命令表示把后面的命令应用到所有buffer中的文件

---vim自动识别中文编码
:help encoding-values 列出Vim支持的所有编码。
vi ~/.vimrc   添加
set fileencodings=utf-8,cp936
Vim在打开文件时会根据fileencodings选项来识别文件编码 GBK还是UTF-8自动识别  OK

也可在/etc/vim/vimrc
在最下面添加一行这样的代码： 
set fileencodings=utf-8,gbk  


gvimtutor 命令有vim 的学习命令(中文的)




vim 源码安装 make & make instll

.java文件中写//再回车时下行会自动加,取消它
/etc/vimrc 中加 autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o



==========vi================
--ed编辑器中的命令
a - 在文件的末尾添加新内容 
w file.txt
q-退出

!引用外部系统命令
---
od -c file.txt 命令  有像ultraEdit的二进制的地址码
===========console========
#Ctrl + d        删除一个字符，相当于通常的Delete键
#Ctrl + h        退格删除一个字符，相当于通常的Backspace键
#Ctrl + p        调出命令历史中的前一条（Previous）命令，相当于通常的上箭头
#Ctrl + n        调出命令历史中的下一条（Next）命令，相当于通常的上箭头
#ctrl+f 向后一个字符,左箭头
#ctrl+b 向前一个字符,右箭头


Ctrl + c        取消当前行输入的命令，相当于Ctrl + Break
Ctrl + a        光标移动到行首（Ahead of line），相当于通常的Home键
Ctrl + e        光标移动到行尾（End of line）
Ctrl + l        清屏，相当于执行clear命令


Ctrl + r        显示：号提示，根据用户输入查找相关历史命令（reverse-i-search,反向搜索）
ctrl + k	删当前到行尾



esc+F 向前一个单词
esc+b 

ctrl+T 当前字与前一个字对换,并移动一下一字符

!+  一个命令的第几个字符
ctrl+o 执行当前行,取得上一和行
　
===============grub 
grub 1 引导 windows 
rootnoverify (hd0,0)
chainloader +1
boot

-- grub2  rescue
openSUSE-leap 15和windows 装在一起，如在windows下修改了分区，重启时就会进入grub rescue模式
ls 命令查各个分区号是什么,如(hd0,msdos11)
依次  ls (hd0,X)/ ,X是上面的11，如 ls (hd0,11)/   如显示有grub2目录
ls (hd0,11)/grub2 显示有i386-pc
ls (hd0,11)/grub2/i386-pc 有很多.mod文件
对boot是单独的分区的情况下

set root=(hd0,11)
set prefix=(hd0,11)/grub2
insmod /grub2/i386-pc/normal.mod
normal 就可以进入grub2 引导界面，如分区是可恢复以前形式，就进入windows修改成以前分区形式即可 (亲测试成功),openSUSE不能成功进入系统

分区有一个UUID,使用 　ls -l /dev/disk/by-uuid 查看
网上还有说如果boot分区不是单独分区就 insmod 修改路径 /boot/grub2/i386-pc/normal.mod 就行

grub>search --help
-f --file
-n --no-floppy

grub> search -f -n --set=root /openSUSE.iso
grub> echo $root
hd0,gpt5

新电脑是支持EFI的路径 是 /boot/grub2/x86_64-efi/normal.mod

windows 10的grub2引导文件 
	insmod part_gpt
	insmod fat
	set root='hd0,gpt1'
	chainloader /efi/Microsoft/Boot/bootmgfw.efi



fdisk /dev/sdb
>m 帮助
>p 打印分区
>d 删除分区
>n 新建分区
>t 修改分区文件系统类型
>l 列出支持文件系统类型
>q 退出不保存
>w 保存退出

mkfs.vfat -c /dev/sdb1 #-c 检查坏块


fdisk -l 显示Disklabel type: gpt

gparted界面工具
 gparted安装时最好不要改fstab文件，否则可能不能启动系统
	view ->	device information 看partition table 是gpt

parted 命令
提示符(parted) 输入 print list 可以查看分区类型


--grub2引导iso未成功
loopback loop0 /path/to/image
ls (loop0)/
--



linux grub 引导路径 
root (hd0,x)
kernel /vmlinuz-2.x ro root=LABEL=/
initrd /inird-2.x.img

title前加
splashimag=(hd0,x)/grub/splash.xpm.gz

hiddenmenu  ##不显示grub菜单  


光盘rescue ,linux rescue

1.进入 rescue 模式		   # grub-install /dev/hda 
	find /boot/grub/stage1 来得到boot分区在hd0,x 中
2.进入 grub 模式(linux rescue)	grub>setup (hd0,0);

grub-install --boot-directory=<DIR>  <DEVICE> 
	安装在<DEVICE>的<DIR>/grub2  



fdisk /mbr


在有/boot分区的情况下OK 开机就进入grub>
1. grub>root (hd0,0)
2. grub>find /grub/stage1 结果是hd0.x
3. grub>root (hd0,x)
4. grub>setup (hd0)



备份mbr
dd if=/dev/hda1 of=/root/mbr bs=512 count=1
恢复mbr
dd if=/root/mbr/ of=/dev/hda1 bs=512 count=1


在kernel 最后加init 1 单例用户

grub 加密码
在 title 内加 password=mypassword  表示启动时要密码
在 title 外加 password=mypassword  表示设置内核参数要密码

如不想显示明文用password  --md5 xxxxx   (xx是用grub-md5-crypt来生成的)

如想title 内外用同一个密码，就在title 外加password ,title内最下加lock


grub-md5-crypt<psd>>/etc/grub.conf ##为了好复制，psd文件中有原密码
另一种生成密码的方式是用grub模式下的 md5crypt




=================iptables 被nftables替代

一个数据据包有 源地址,目标地址,协议

iptables -A INPUT -p(protocol) icmp -j (jump)DROP  (Target,DROP,ACCEPT ,REJECT,LOG)

icmp不可ping一个地址

ip6tables -L
iptables -L -n 显示 数字IP
iptables -S  显示，像 iptables-save 格式

iptables -F (flush)    清空规则
-D delete  从一开始
-A append
-I --insert
-Z 清零(包的个数)
-N --new 新建一个链
-X 删自己的链
-P 大P 改变默认

-p 小p 协议 可用! 来排除
-s --source	
--sport 源 
-d --destination 
--line-numbers 显示链的编号


链，INPUT，OUTPUT，FORWARD(对其它机器服务,的来源和目录都不是自己)

保证SSH 服务正常
iptables -A INPUT  -p tcp   (-d 127.0.0.1)   --dport 22 -j ACCEPT  () 中可省,INPUT的目标地址,OUTPUT的源地址是本机IP
iptables -A OUTPUT -p tcp   (-s 127.0.0.1)   --sport 22 -j ACCEPT


iptables -P INPUT DROP  改变默认 -P 所有的 INPUT 都DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP
 
配置文件  /etc/sysconfig/iptables

iptables-save > /etc/sysconfig/iptables
相应的有 iptables-restore


/etc/services 找domain为53端口的是DNS

为了可用使用DNS来上网,
iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
iptables -A INPUT -p udp --sport 53 -j ACCEPT  如果自己是DNS服务器没有指定目标端口是53,采用默认DROP

iptables -D INPUT 5 删INPUT第5行

为了本机可正常工作
iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT  

^IN^OUT 或者
iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT

^oldchar^newchar   替换上一次执行过的命令中的字符


iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT	(-sport 服务器)
-m state --state ESTAbLISHED 表示只响应有过请求的包,对没有请求过的包,不可出 m match

iptables -D OUTPUT 1
做为服务器删上一个OUTPUT 22 的链 ,

做客户机
iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT   (--dport)
iptables -A INPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT

service iptables save
service iptables start/stop/restart/status/condrestart/panic/save
　

iptables -A INPUT  -p tcp   --dport 22 -j ACCEPT 
iptables -A OUTPUT -p tcp   --sport 22 -j ACCEPT
iptables -I INPUT -p tcp --dport 25 -j ACCEPT ##SMTP

iptables -A INPUT  -p icmp   -j ACCEPT 
iptables -A OUTPUT -p icmp   -j ACCEPT

iptables -P INPUT DROP  
iptables -P OUTPUT DROP
iptables -P FORWARD DROP 

-----

systemctl list-unit-files | grep firewall 有 firewalld.service 
systemctl stop firewalld
systemctl enabled firewalld

firewall-cmd --list-services   
firewall-cmd --get-services 哪些服务可以打开

添加新端口
firewall-cmd --zone=public --add-port=6379/tcp --permanent		redis
firewall-cmd --zone=public --add-port=27017/tcp --permanent      mongodb 

firewall-cmd --zone=public --add-port=2181/tcp --permanent       zookeeper
firewall-cmd --zone=public --add-port=60010/tcp --permanent 	 hbase
firewall-cmd --zone=public --add-port=6627/tcp --permanent 		 storm   对应的有 --remove-port
firewall-cmd --zone=public --add-service=ssh --permanent  对应的有--remove-service


firewall-cmd --reload 
firewall-cmd --state

firewall-cmd --zone=public --list-ports  查开了哪些端口

存在配置文件中 /etc/firewalld/zones/public.xml

firewall-cmd --get-default-zone  查哪个是默认zone，默认是public
存在配置文件中 /etc/firewalld/firewalld.conf

firewall-cmd --list-all-zones
firewall-cmd --get-services

在同一台服务器上将 80 端口的流量转发到 12345 端口
firewall-cmd --zone="public" --add-forward-port=port=80:proto=tcp:toport=12345

端口转发到另外一台服务器上
1在需要的区域中激活 masquerade 
	firewall-cmd --zone=public --add-masquerade  对应的就有 --remove-masquerade
2添加转发规则。例子中是将本地的 80 端口的流量转发到 IP 地址为 ：123.456.78.9 的远程服务器上的  8080 端口 
	firewall-cmd --zone="public" --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=123.456.78.9

sudo firewall-cmd --zone=dmz --add-interface=eth0


firewall-cmd --list-rich-rules

允许来自主机 192.168.0.14 的所有 IPv4 流量
firewall-cmd --zone=public --add-rich-rule 'rule family="ipv4" source address=192.168.0.14 accept'
	对应的就有 --remove-rich-rule 'rule family="ipv4" source address=192.168.0.14 accept'

拒绝来自主机 192.168.1.10 到 22 端口的 IPv4 的 TCP 流量 
    sudo firewall-cmd --zone=public --add-rich-rule 'rule family="ipv4" source address="192.168.1.10" port port=22 protocol=tcp reject'

允许来自主机 10.1.0.3 到 80 端口的 IPv4 的 TCP 流量，并将流量转发到 6532 端口上 
    sudo firewall-cmd --zone=public --add-rich-rule 'rule family=ipv4 source address=10.1.0.3 forward-port port=80 protocol=tcp to-port=6532'
	
将主机 172.31.4.2 上 80 端口的 IPv4 流量转发到 8080 端口（需要在区域上激活 masquerade） 
	sudo firewall-cmd --zone=public --add-rich-rule 'rule family=ipv4 forward-port port=80 protocol=tcp to-port=8080 to-addr=172.31.4.2'

	 
	
	
iptablse -A INPUT -p tcp -dport 22 -j  LOG --log-level 5 --log-prefix "iptables::" ###记录日志 --prefix 并不是最前的
要确保前方没有DROP, 或者ACCEPT 的规则对应的包,并在其它对应的ACCEP规则的前面才有效 

/etc/syslog.conf加入
kern.=notice    /var/log/firewall.log ###### man syslog 看到 5 是NOTICE
注意文件中的 *.* 不要有

/etc/sysconfig/syslog
	SYSLOGD_OPTIONS="-m 0 -r -x"  改成了 SYSLOGD_OPTIONS="-m 0"
重启  service syslog restart
-I　INPUT 6 插入第6条前面

FORWARD是在本机是路由发送给其它人的情况下的
打开内核中的转发
要 /proc/sys/net/ipv4/ip_forward的值为1  是临时的
/etc/sysctl.conf文件中的net.ipv4.ip_forward=1  (ctl control)

sysctl -p 

10.0.0.1~10.255.255.254
172.16.0.1~172.31.255.254
192.168.0.1~192.168.255.254
以上是专用网络

局域网地址反译到互联网地址时，叫NAT

SNAT 源地址转换,只能发生在POSTROUTING
DNAT 目标地址转换  只能发生在PREROUTING

iptables -t nat -L -n 来显示    nat表中的信息
iptables -t nat -A POSTROUTING -s 10.0.0.0/24(24=255.255.255.0) -j SNAT --to-source 192.168.0.254
iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -j MASQUERADE 违装(masquerade 化装)

iptables -t nat -A PREROUTING -d 10.0.0.254 -p tcp -dport 80 -j DNAT --to-destination 192.168.0.1
 

=================pam模块
PAM(Pluggable Authentication Modules)
ldd 显示共享对象的依赖
ldd /usr/sbin/sshd 如果链接了 /lib/libpam.so  表示可以使用pam
  libpam.so也是使用其它.so来完成	/lib/security/xxx.so
每个服务一个配置文件 /etc/pam.d/<service> 如/etc/pam.d/login , /etc/pam.d/sshd ,/etc/pam.d/su

格式 :module-type   control-falg    module-path    arguaments

module-type :可取值 auth(验证密码),account(帐号是否可用),session,password
control-flag:如果成功/失败如何处理,可取值 required(必须成功),requisite(如果失败,并不马上退出,如后面requisite类型成功就通过),sufficient(充足,如这个成功就不会继续验证后面的记录),optional

例 /etc/pam.d/login
auth   required pam_stack.so service = system-auth 	#pam_stack.so表示调用另一个模块 (传参数解析结果为 /etc/pam.d/system-auth 中再调用其它模块)，即堆栈

常用的pam模块
	pam_access.so	 控制访问者的地址与帐号名称
	pam_listfile.so  控制访问者的帐号名称或登录位置
	pam_limits.so	 控制用户分配的资源
	pam_rootok.so	 对管理员(uid=0)无条件允许通过
	pam_userdb.so    设定独立用户帐号数据库认证

	 
如 /etc/pam.d/login 中有 pam_securetty
对某个pam_xx .so如何用 ，/usr/share/doc/pam-0.99/txts/  中是README文档 
README.pam_securetty 在root 登录时,只在安全的终端/etc/secretty 是一普通文件,不是一个全局可写的,(如果该文件中的一个终端删除,就不可以root登录)

 
/etc/pam.d/system-auth 文件中有pam_env.so为用户初始化环境变量，再用sufficient pam_unix.so检查用户名,如失败还会继续
		pam_deny.so 无条件拒绝
		

观察/etc/pam.d/sshd 文件内容
auth pam_nologin.so   #表示 root可以登录,如 /etc/nologin不存在 普通用户可登录, 如存在 /etc/nologin文件(不关心文件内容) ,普通用户不能登录

做测试 touch /etc/nologin  

观察/etc/pam.d/login 文件内容
auth   	 required pam_stack.so service=system-auth 
account  required pam_stack.so service=system-auth    #system-auth是公共的服务,影响全局,account检查密码过期
password required pam_stack.so service=system-auth   #对应system-auth 文件中的password类型
session optional  pam_console.so  #为用户分配tty终端，/etc/pam.d/sshd文件中也有pam_console.so


观察/etc/pam.d/system-auth 文件内容
password required pam_cracklib.so  retry=3 #修改密码,密码简单超过3次失败
password sufficent pam_unix.so  #sufficent 如失败继续
password required pam_deny.so   #到这里说明 密码修改失败，就拒绝


tty 显示当前使用的终端
/dev/tty/0 本地终端
/dev/pts/0 远程终端
session pam_console.so  如有人使用这些终端/登录时 ls -l  会发现变化 所属组会变为tty，组增加w权限,没人用时/用户退出时就是root组
 
--示例 pam_access.so
/lib/security/pam_access.so 的配置文件是 /etc/security/access.conf  

修改 /etc/pam.d/sshd  文件中加入(如想对sshd做)
account required  pam_access.so


修改 /etc/security/access.conf
 内容格式	permission(可用+,-表示允许或拒绝) : users(用户名或组名,可用多相名字,ALL)  : origins(可多个tty名,主机名,以点开头的域名,以点结尾的网络地址,ALL EXCEPT ..,LOCAL)

-:redhat:ALL EXCEPT 10.0.0. #拒绝所有redhat用户访问本机,除了10开产学研的局部网地址(点结尾)外

测试  ssh redhat@10.0.0.1 可以登录， ssh redhat@127.0.0.1不能登录
 
如何每次使用pam_access.so,不是同一个配置文件( /etc/security/access.conf) 看帮助 /usr/share/doc/pam../txts/READE.pam_access  
可以在pam_access.so模块后加一个参数accessfile='<full-path>'  可以覆盖默认配置文件/etc/security/access.conf

---- pam_listfile.so  模块
看帮助/usr/share/doc/pam../txts/READE.pam_listfile 没有默认配置文件   
pam_limits.so模块参数可加 item=[tty|user|rhost|ruser|group|shell] ,file=配置文件内容就是item代表的值,如用户名
		onerror=[succeed|fail] 如模块出错时成功还是失败
/etc/pam.d/vsftp 中有使用pam_limits.so item=user sense=allow file=/etc/ftpusers onerror=succeed
 
示例  /etc/pam.d/sshd 文件的pam_nologin.so后增加
auth   required   pam_listfile.so item=user sense=deny file=/etc/denyuser onerror=succeed
#表示文件中的用户会被拒绝登录 

echo "redhat" >> /etc/denyuser  


------ pam_limits.so 模块
more /usr/share/doc/pam../txts/READEME.pam_limits 

pam_limits.so 模块配置文件为 /etc/security/limits.conf  
文件内容格式  <domain> <type>  <item>   <value>

domain :  用户名或@组名 也可*
type: soft ,hard(不可达到), - 表示soft和hard
item: 如 data,fsize,nofile,nproc,cpu,maxlogins (指定用户最多同时登录次数)

如sshd服务  /etc/pam.d/sshd 文件默认有 pam_limits.so
session  required pam_limits.so  #maxlogins

vi /etc/security/limits.conf   增加
redhat   hard  maxlogins  2  #hard 2  不能达到2次,即最多一次

做登录测试

w 命令显示登录人数
ssh -l redhat 10.0.0.1  (-l 指定用户名)

------pam_rootok.so   模块
对root用户 无条件通过sufficient  

chfn 命令用于改变个人签名信息   

/etc/pam.d/chfn  使用了pam_rootok模块

------pam_userdb.so   模块
用户密码验证使用外部，而不是系统的
vsftp中有用到

auth required pam_userdb.so db=/etc/vsftpd_login  #要指定参数db



============ACL
在分区上加入acl类型(fstab文件)

setfacl -m u:oracle:rw file.txt
-m :modify 
oracle是用户
rw是读写权限　　或用　rw-
file.txt 对这个文件

u指定用户，g 同组　o其它　　可以用::不指定名字
setfacl -m u::rwx,g::rwx,o::rwx file1.txt
	与chmod权限相同

setfacl -x u:oracle file.txt  取消oracle用户对file.txt 地ＡＣＬ权限控制

ll后 权限给后多了一个＋号

getfacl 文件名　　　　可以看文件的信息

setfacl -m mask::r--   文件a   这个'文件a'权限要和其它用户做运算（源文件权限不可大于mask权限,），结果是＃ effective (有效的)
setfacl -b file.txt 删除所有的ACL权限控制在file.txt文件上(没有＋号显示) -b 或  --remove-all 


getfacl -R 目录>bak.txt　　	-R　对文件来 recursive
setfacl --restore bak.txt  备份与恢复要在同一个目录下


read (4), write (2), and execute (1)
set user ID (4) and set group ID (2) and restricted deletion or sticky (1) attributes.//1显示t  4或2 显示s
chmod u+s g+s //uid ,gid
=====================quota 磁盘限额 
/etc/fstab文件中的类型中加入,usrquota,grpquota

quotacheck -ug /home
会在目录下生成 aquota.group  和aquota.user文件

quotaoff -a

edquota -u zh 增加配额  
-p login   把login用户配额信息复制给 -u指定的用户

requota -a 显示报告

quota 命令
	inode  会限制创建文件数量
	block  会限制磁盘容量

在fstab文件中的 要限制的分区(/dev/hda3/ext3)  defaults 改成defaults,usrquota,grpquota 1(由dump是否要备份)   1（fsck是否要检查和次序）
重启后，quotacheck -cvug /dev/hda3 c生成文件(quota.user ,quota.group) v 显示 u检查用户的配额 g  检查组的配额

quotaon /dev/hda3     

edquota user1显示文件 
filesystem	block		soft	hard	inodes	soft	hard
/dev/had3	752		0	 0	163	0	0 
单位是K
软限制默认是7天

edquota -t 显示文件可以修改过度期
quotacheck -vug 检查正确性

quota user  或 quota -g group1来显示磁盘使用情况 也可以是UID，GID

repquota /dev/had3 来生成报告
其中	--   块和索引，如果超出会变成+   ，grace列表示软限超出后还有多少天
repquota -a显示所有的
quotaoff 关闭功能
===============上  quota

------------------Raid//多磁盘的
要内核支持

0级加,(至少两硬盘)速度最快,但如要一个磁盘坏,其它的无用 (硬盘使用100%)
1级加(至少两硬盘)速度和使用一个硬盘一样,很安全(硬盘使用1/2)
5级加(至少三硬盘),速度快,安全,(硬盘使用(N-1)/N)	只是多了一个奇偶校验信息，写入数据的速度相当的慢，若使用“回写高速缓存”可以让效能改善不少
1和0相加10(至少四硬盘)(硬盘使用1/2)  
 RAID 0+1  先0后1 也被称为RAID 10标准

raid 6 可允许两个盘失效


rqm -ql raidtools
man 5 raidtab

1. 写配置/etc/raidtab文件 (可以复制安装包中的)
2.为硬盘分区(fdisk m帮助,p打印 ->n(new),w(write))
3.mkraid /dev/md0   //md0 是配置文件中的  
4.mkfs.ext3 /dev/md0 格式化
5.mount /dev/md0 /opt
umount /opt
raidstop  /dev/md0

lsraid -a -A  /dev/md1  显示信息,有good/online
防止每次开机raid ,可删/etc/raidtab文件

mkraid (看提示-f 可以强制迫害superblock,看提示再-R,删数据)
cat /proc/mdstat 可看内核信息 (raidstop后也有)

/boot  (grub.conf中的内核路径)目录不能在 raid分区上
raidsetfaulty /dev/md1 /dev/sdb1  摸拟硬盘损坏
lsraid -A -a /dev/md1 后会看到/dev/sdb1 是Failed
raidhotadd /dev/md1 /dev/sdc1  这样就可以再加一个硬盘 (spare)
raidhostremove /dev/md1 /dev/sdb1 可以把坏硬盘拿掉 (missing)
在/etc/raidtab文件中
raid-level 1
nr-spare-disks 1 (nr =>number 就要再加一个硬盘,自动修复坏硬盘 ,对1,5级别)
....
device   /dev/sdd1
spare-disk 0    (之前是raid-disk ,以0开始,一个就足以)

如查1,0一起时,mkfs.ex3时只对最上层的就可以了
-------------------LVM 逻辑卷管理器 ,硬盘满,

fdisk 准备分区,改Id和System ,用 t 转换 ->L ->8e 是Linux LVM
所有的分区(System)是 Linux LVM的 (p) ->w

命令类型 pv,lv,vg,命令操作create,remove,display,scan

(phasical valume)
pvcreate /dev/sda1 /dev/sda2  ...  //也可以用 /dev/sda[1-2]
pvcan 

vgscan 第一次会自动生成配置文件 /etc/lvmtab

vgcreate vg0 /dev/sda1 /dev/sda2    ///vg0(volume group)自起新卷组名,下面的分区不能使用

vgdisplay vg0 看信息
	PE size是物理扩展(Phsical extend)(会影响Max LV size 的大小)  4M

lvcreate -n data -L 10M vg0 
	(logicol volume)
	data 新逻辑卷名
	vg0已有的卷组名
	-L  指定长度


会生成文件/dev/vg0/data
mkfs.ext3 /dev/vg0/data

可以mount来使用

lvdisplay /dev/vg0/data 查信息
	占用空间是(vgdisplay vg0) PE size的整数倍
	lvcreate -n data -l 5 vg0  (-l 5 是 PE size的倍数)

lvscan  有多少个逻辑卷,大小,状态

umount /dev/vg0/data
e2fsadm -L +10M /dev/vg0/data    来扩大逻辑卷的大小(只对ext2,和ext3), - 来减少空间 ,-l  PEsize 数
	实际上运行了3个命令e2fsck,lvextend,resizefs

	(现在没有e2fsadm命令了,  也没有resizefs要用resize2fs)
	lvextend -L +800M /dev/VolGroup00/LogVol00
	lvreduce -L 800M /dev/VolGroup00/LogVol00
	resize2fs /dev/VolGroup00/LogVol00
pvscan  物理卷的状态,

vgextend vg0 /dev/sda3  将sda3加入vg0组中 ,来扩大卷组

pvmove /dev/sda1 [/dev/sda2] ,把数据移动到其它的物理卷上,也可把数据放在/dev/sda2
vgreduce vg0 /dev/sda1 把/dev/sda1从卷组vg0中移除

vgcreate -s 来指定PE(Phiscal extend) size (默认4M)
	PEsize 越大,Max LV size越大

vgcreate -s -l 2 -n datasnap  /dev/vg0/data (是逻辑卷路径)
	-s (--snapshot) 只可一次,重启失效  (会影响系统性能,可以防止多用户对同一LVM操作产生数据不一致)

mount /dev/vg0/datasnap /opt使用
原来/dev/vg0/data 是挂在/mnt下
删/mnt下的文件 ,看/opt还是有文件的

删LV,和创建相反,先删LV,VG,PV
umount
lvremove /dev/vg0/data
	lvscan
vgchange -an vg0 (active no,-ay yes )转换状态 
vgremove vg0 ,会删/dev/vg0目录

vi /etc/[rc.d/]rc.sysinit文件中 会自动找/etc/lvmtab文件

LVM挂载 / 分区
1)lvcreat ...
2)lvmcreate_initrd 命令会创建文件/boot/initd-lvm-2.xx-img,可以解压,挂载iso,看里文件  (会读所有/dev/目录 包括LVM)
3)修改grub.conf为新生成的img文件

gunzip -c 
file xxx 看文件系统是ext2

unzip -l  显示文件目录结构  -o 覆盖存在的不提示   -n 不覆盖存在的 -d解压到指定目录
unzip file.zip -d mydir
tar -t    显示文件目录结构
tar -zcvf my.tar.gz xx.txt

xz test.txt
xz -d -k test.txt.xz  (-k --keep 保持原文件不被删除,-d --decompress )

--------------------Raid LVM实例
fdisk 中 t 转换类型->L 列表->fd 是Linux raid auto
fdisk -l /dev/sd[bcd]     //可以用[]

让linux 认出Raid设备 vi /etc/rc.sysinit 系统启动时,第一个运行
会找/etc/raidtab文件 
在if[ -f /etc/raidtabl];then
	[-f /proc/mdstat] || modprobe md >/dev/null 2>&1
下面加入 raidstart /dev/md0

转分区时 ,cp完成,重启后,可以把一个分区,挂在多个目录,删原始数据

cp 时先不要/boot 目录
ctrl+z 挂起,再bg 后台运行

mkinitrd  /boot/initrd-lvm-$(uname -r).img   $(uname -r)  ///会把当前系统的所有模块加入
//也可以用lvmcreate_initrd,不能直接使用

lsmod 目前系统模块,要有raid5,raid5还依赖于xor ,还lvm-mod,针对SCSI硬盘BusLogic,scsi_mod

file /boot/initrd-lvm* 看文件格式 
解压,挂载-o loop , 看dev目录
cp -a /dev/lvm  ./dev/    ////lvm设备文件
cp -a /dev/vg   ./dev/	  ////vg 卷组文件,建的
还要用md0,和md0使用的设置sd[a-c],sd[a-c]1
vi linuxrc 修改
注释raidautorun /dev/md0
加入raidstart /dev/md0 
vgscan
vgchange -a y

改下面的mount .... /dev/root 为/dev/vg/root(创建的)

还要把raidstart vgscan vgchange 这新加的三个命令复制到./bin目录下
ldd /sbin/raidstart  来检查 raidstart 命令运行时要哪些库文件,复制到./lib目录下,目录结构也要相同

raidstart 要读/etc/raidtab文件,也要复制到./etc下

gzip xxx -c >xxx.gz
gzip xxx 自动把文件压成xxx.gz 原文件消失 
gzip -d xxx.gz  解压

4yy 复制4行

修改grub.conf文件中
kernel 后root=LABLE=/ 修改为 root=/dev/vg/root(创建的)
initrd 后的文件改为新的

更改/etc/fstab中的根 LABEL=/ 修改为/dev/vg/root

reboot

/boot 目录不能变,只能放在物理硬盘上,可单独给/boot目录做一个分区


------------------ SAMBA
./source/configure 来源码安装

SAMBA 使用的端口(netstat -anp 可以看到有smbd 和　nmbd 进程)
TCP 
139 netbios-ssn  
445 microsoft-ds
 


要三个软件包，samba ,samba-common,samba-client
/etc/samba/smb.conf配置的是samba-common中的

;为注释
testparm来检查文件语法的正确性

[gloabl]和[home]每个用户的，其它的为自定义的([docs])


vi 中可以用!ls
smbtree 可有哪些主机
smbtree -b 表示广播
smbtree -D 只查域,工作组
	-U username%password
hostname 
nmblookup zhHost ##查找网上邻居的主机是 zhHost 的IP,可能有多个IP
			发送.255的广播地址
nmblookup \*      ##看所有活动的主机

smbclient -L [主机]  -U user%pass  ##显示列表,以$结尾的在windows中看不到的
smbclient //host/share  -U user%pass  ##后像ftp工具 help,
	可ls,
	get xxx 
	mget xxx #可以目录但每个文件都要提示
	put 本机文件 (远程的重命名)   ##如不加第二参数,和第一参数一样 
	rm xxx ,
	!pwd 	##使用一机命令,
	lcd  xxx 	##切换本机目录

有时要"/"要转义,也可不转
smbclient \/\/192.168.253.1\/share -U administrator%pass   ,用户必须要设置密码才行


mount -t cifs -o username=xxx,password=xxx //192.168.1.100/temp /mnt
//Common Internet File Systemcifs(cifs)来代替原来的smbfs  
//对solaris无效
mount -t cifs -o username=xxx,password=xxx  \/\/192.168.253.1\/share /mnt/smb


nmblookup -A 192.168.1.100 根据IP得到主机
smbtar -s server -u user -p password -x sharename -t output.tar  打成tar包
smbtar  -s 192.168.1.100 -u -p -x temp -t temp.tar 对不要密码的,不会提示要密码
file temp.tar 来检查文件类型 ,tar -tvf  temp.tar 
smbclient -N 不要提示输入密码
nslookup 


smb.conf文件
workgroup = workgroup
server string= 描述信息
netbios name=redhat显示主机的名字
security=share(不要密码)
	user(对win用户所有的用户要密码)
	server(如是该项还要加一个password server=xx)/domain
password server =IP/FQDN     只有当security为server或是domain时才有效

%m表示netbios主机名，%I (IP) %T (time)  %U (username)
---man smb.conf
encrypt password  = yes 要与window一到,默认windows是加密的,所以一般为yes
smb passwd file=/etc/smb/smbpasswd
include = ...%m(包含不同配置文件)
interfaces  =	
name solver order =wins   imhosts(/etc/samba/imhosts文件存IP与主机的对应关系) bcast
;wins support =yes (本机做服务器)
;wins server =w.y.ww.(本机做客户机,指定服务器)
---
/etc/samba/lmhost
smbclient -L [IP]  显示主机上的共享目录
smbclient //[IP]/docs(配置文件中的共享目录) -U username

 cat /etc/passwd | mksmbpasswd.sh > /etc/samba/smbpasswd
    如果系统使用 NIS，键入以下命令：
    ypcat passwd | mksmbpasswd.sh > /etc/samba/smbpasswd
smbclient //192.168.1.230/win  -U test
 mount -t cifs //192.168.1.230/win /mnt/samba/

smb.conf
[docs]
public = yes  ##为所有用户提供可以共同访问的目录,默认是yes
path= 
comment=
writable = yes
create mask = 0765
valid users = mary fred
smbd (nmbd)来启动


windows本地连接属性中 可以取消Microsoft 网络的文件和打印机共享,其它人不可仿问我

valid users = @root 表示只是root组里的用户

man 5 hosts_access 的正则(“.”开头（.xx）  表示所有 以.xx结尾的)
			以 . 结束的 ,以@开头的
			1.1.1.1/255.255.255.0
host allow =ALL (122.22.2.2) except xx.x.xx.x
smbclient -L 10.0.254 (主机列表) -U=tom%tompwd用户列表
smbclient //10.0.0.254/docs
useradd -s /bin/false 或者是 /dev/null 指定无用的SHELL
充许优先   可以ALL except 2.2.2.2

samba用户首先是系统用户 
smbpasswd -a 用户  ##使用不同的密码
-a add user
-d disable 
-e enable
-n no password
-x delete
写入/etc/samba/smbpasswd文件中的
for user in lisi zhangsang
do
	$user
done


chomd g+s /home/sxx 同组加权限

tail命令 显示文件尾部

####smbmount //10.0.0.1/sales /mnt/ -o username=tom%tompwd

smbusers 文件

/etc/auto.misc文件中加入
sales	-fstype=smbfs,username=tom%tompwd	://10.0.0.254/sales


testparm 测试samba 服务的配置是否正确


==========================NFS 
安装 nfs-utils 软件包

cat /etc/mtab 
cat /proc/mounts 
与mount 命输出都一样
 
cat /proc/filesystems  | grep nfs
 
--Server端226上

/etc/exports 文件 和　 /etc/exports.d目录　, exportfs命令也会修改这它们
 exportfs -r 加载配置(Reexport all directories)
 			-a   (all)
 			-v (verbose)
/etc/exports　 文件格式         
	/root/shareDir/            10.1.5.225/24(rw,no_root_squash) 　##表示共享/root/shareDir/  目录给10.1.5.x的用户
 
	选项 no_root_squash 表示 NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。显然开启这项是不安全的，这个一定要加上，否则客户端连接报access denie
NFS监听2049端口
service nfs start 会转到 /bin/systemctl start  nfs.service
	showmount -e (--exports) 可看有分享哪些目录，即/etc/exports的配置
 # showmount -a (--all) 可看出所有的 mount 
	
  # /bin/systemctl start  rpcbind.service  也可以用  systemctl start rpcbind  可以不要的
  systemctl start nfs  

systemctl stop firewalld

openSUSE-leap-15.1上就没有监听2049端口？？？？ CentOS很顺利

--Client端 225上
rpcinfo -p 10.1.5.226  查看服务器提供的rpc服务
	显示portmap服务指派端口（111）
	
mount -tnfs4 10.1.5.226:/root/shareDir  /mnt/remoteDir (要root权限)
 
--------------------tigervnc
VNC(Virtual Network Computing)
yum install tigervnc  (CentOS 7 DVD 自带1.8版本 只vncviwer)从 TightVNC 出来的
yum install tigervnc-server 就有vncserver了

vncserver :1 提示输入两次密码(如第二次选y),就有5901的监听,iptables -F 外部就可以输入密码连接上了,但进入界面系统的密码是启动vnc服务用户系统的密码
Creating default startup script /root/.vnc/xstartup
Creating default config /root/.vnc/config
CentOS 7 测试OK


==========================VNC-5.2

----linux 通用tar包安装
root用户运行 ./vncinstall /usr/local/bin /usr/local/man

5.2版本用  vnclicense -add DN2AB-2224A-VRGSB-7J3D9-NN3RA   增加免费的license
6.3版本用  vnclicense -add BQ24G-PDXE4-KKKRS-WBHZE-F5RCA    Enterprise 

vncserver   
	提示 日志在 /root/.vnc/<hostname>:1.log ,
	提示 新桌面是 <hostname>:1 (<ip>:1)
	提示 /etc/vnc/xstartup

	5.2版本 第一次运行vncserver会提示输入密码       修改密码用 vncpasswd
	6.3版本 不会提示输入密码，登录直接用系统用户,效果不好   
	vncpasswd  -service  (Service Mode  ,Home or Professional 版本只支持这个,远程登录控制整个电脑,可以看真电脑前的人在干什么)
	vncpasswd  -user  	 (User Mode ,Enterprise  版,远程登录控制当前用户在登录的时,可以看真电脑前的人在干什么)
	vncpasswd  -virtual  (Virtual Mode ,Enterprise  Linux版,看不到真电脑前的人在干什么 )
	
	
vncserver :1
依赖于xauth (gnome 或者KDE)命令
vncserver -geometry 1366x768 :1 启动时指定分辩率
vncserver -geometry 1340x740 :1

windows 打开 VNCViewer   输入  your-server:X-display号 如192.168.190.134:1 (比用jar好处是可记住上次IP,可传剪贴板中文字符)
netstat -an | grep 5901	 vncviewer的端口是5900+N N是你设置的X-display号 ,

vncserver -kill :1

~/.vnc/config.d/Xvnc 存密码
/etc/vnc/xstartup 中有 gnome-session  (GNOME桌面,gdm) ,(KDE桌面 是 startkde& )  


源码目录java -jar java/vcnviewer.jar 有界面,也有 vncviewer 命令 

如多个客户端同时连接到同一个显示端口,则一方鼠标动,另一方鼠标也动(可做远程演示)



配置防火墙来让 VNC 服务正常工作
 firewall-cmd --permanent --add-service vnc-server
 systemctl restart firewalld.service


关闭防火墙 
# systemctl stop firewalld.service
systemctl list-units
 systemctl list-unit-files | grep firewall
 systemctl disable firewalld.service   关闭系统开机启动
 systemctl status firewalld.service
 
 ---------------systemd
 Systemd 取代了initd，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程

 systemctl --version
 
# 重启系统
$ sudo systemctl reboot

# 关闭系统，切断电源
$ sudo systemctl poweroff

# CPU停止工作
$ sudo systemctl halt

# 暂停系统
$ sudo systemctl suspend

# 让系统进入冬眠状态
$ sudo systemctl hibernate

# 让系统进入交互式休眠状态
$ sudo systemctl hybrid-sleep

# 启动进入救援状态（单用户状态）
$ sudo systemctl rescue
 
 
---systemd-analyze
 
# 查看启动耗时
$ systemd-analyze                                                                                       

# 查看每个服务的启动耗时
$ systemd-analyze blame

# 显示瀑布状的启动过程流
$ systemd-analyze critical-chain

# 显示指定服务的启动流
systemd-analyze critical-chain  network.target

-----hostnamectl
# 显示当前主机的信息
$ hostnamectl

# 设置主机名
$ sudo hostnamectl set-hostname rhel7

还要/etc/hosts增加    127.0.0.1  rhel7

----localectl
# 查看本地化设置
$ localectl
  System Locale: LANG=en_US.UTF-8
       VC Keymap: us
      X11 Layout: us

# 设置本地化参数。
$ sudo localectl set-locale LANG=zh_CN.UTF-8
$ sudo localectl set-keymap us

----timedatectl
# 查看当前时区设置
$ timedatectl  

# 显示所有可用的时区
$ timedatectl list-timezones  最后是UTC                                                                         

# 设置当前时区
$ sudo timedatectl set-timezone Asia/Shanghai
$ sudo timedatectl set-time YYYY-MM-DD
$ sudo timedatectl set-time HH:MM:SS

----loginctl
# 列出当前session
$ loginctl list-sessions  默认有个gdm用户

# 列出当前登录用户
$ loginctl list-users  默认有个gdm用户

# 列出显示指定用户的信息
$ loginctl show-user dell


-----unit

Service unit：系统服务
Target unit：多个 Unit 构成的一个组
Device Unit：硬件设备
Mount Unit：文件系统的挂载点
Automount Unit：自动挂载点
Path Unit：文件或路径
Scope Unit：不是由 Systemd 启动的外部进程
Slice Unit：进程组
###Snapshot Unit：Systemd 快照，可以切回某个快照
Socket Unit：进程间通信的 socket
Swap Unit：swap 文件
Timer Unit：定时器

# 列出正在运行的 Unit
$ systemctl list-units  显示以横线做区间，以上面做扩展名

# 列出所有Unit，包括没有找到配置文件的或者启动失败的
$ systemctl list-units --all

# 列出所有没有运行的 Unit
$ systemctl list-units --all --state=inactive

# 列出所有加载失败的 Unit
$ systemctl list-units --failed

# 列出所有正在运行的、类型为 service 的 Unit
$ systemctl list-units --type=service

---
# 显示系统状态
$ systemctl status

# 显示单个 Unit 的状态
$ systemctl status bluetooth.service

# 显示远程主机的某个 Unit 的状态
$ systemctl -H root@rhel7.example.com status httpd.service
---
# 显示某个 Unit 是否正在运行
$ systemctl is-active  network.target

# 显示某个 Unit 是否处于启动失败状态
$ systemctl is-failed  network.target

# 显示某个 Unit 服务是否建立了启动链接
$ systemctl is-enabled  network.target   man手册有表格

----
# 立即启动一个服务
$ sudo systemctl start apache.service

# 立即停止一个服务
$ sudo systemctl stop apache.service

# 重启一个服务
$ sudo systemctl restart apache.service

# 杀死一个服务的所有子进程
$ sudo systemctl kill apache.service

# 重新加载一个服务的配置文件
$ sudo systemctl reload apache.service

# 重载所有修改过的配置文件
$ sudo systemctl daemon-reload

# 显示某个 Unit 的所有底层参数
$ systemctl show httpd.service

# 显示某个 Unit 的指定属性的值
$ systemctl show -p CPUShares httpd.service

# 设置某个 Unit 的指定属性
$ sudo systemctl set-property httpd.service CPUShares=500

-----
systemctl list-dependencies   所有信依赖树, 可以看出.target是一组
systemctl list-dependencies -all 做展开

列出一个 Unit 的所有依赖
$ systemctl list-dependencies nginx.service

---
Systemd 默认从目录/etc/systemd/system/读取配置文件
 里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/

$ sudo systemctl enable clamd@scan.service
# 等同于
$ sudo ln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'

如果省略 Systemd 默认后缀名为.service
---
# 列出所有配置文件
$ systemctl list-unit-files

# 列出指定类型的配置文件
$ systemctl list-unit-files --type=service

状态 同 is-enabled
enabled：已建立启动链接
disabled：没建立启动链接
static：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖
masked：该配置文件被禁止建立启动链接

--
查看配置文件的内容 即/usr/lib/systemd/system/下的文件
systemctl cat network.service
注意，键值对的等号两侧不能有空格

LimitNOFILE 参考文档 
https://www.freedesktop.org/software/systemd/man/systemd.exec.html
https://www.freedesktop.org/software/systemd/man/systemd.unit.html
文档有提示System Unit(/etc/systemd/system/*)和  User Unit ( /etc/systemd/user/*)的搜索路径
 

[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。

Description：简短描述
Documentation：文档地址
Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败
Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败
BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行
Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动
After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动
Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行
Condition...：当前 Unit 运行必须满足的条件，否则不会运行
Assert...：当前 Unit 运行必须满足的条件，否则会报启动失败


[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。

WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中
RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中
Alias：当前 Unit 可用于启动的别名
Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit


[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。

Type：定义启动时的进程行为。它有以下几种值。
Type=simple：默认值，执行ExecStart指定的命令，启动主进程
Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出
Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行
Type=dbus：当前服务通过D-Bus启动
Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行
Type=idle：若有其他任务执行完毕，当前服务才会运行
ExecStart：启动当前服务的命令
ExecStartPre：启动当前服务之前执行的命令
ExecStartPost：启动当前服务之后执行的命令
ExecReload：重启当前服务时执行的命令
ExecStop：停止当前服务时执行的命令
ExecStopPost：停止当其服务之后执行的命令
RestartSec：自动重启当前服务间隔的秒数
Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog
TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数
Environment：指定环境变量

 查看当前系统的所有 Target
$ systemctl list-unit-files --type=target

# 查看一个 Target 包含的所有 Unit
$ systemctl list-dependencies multi-user.target

# 查看启动时的默认 Target
$ systemctl get-default

# 设置启动时的默认 Target
$ sudo systemctl set-default multi-user.target
sudo systemctl set-default graphical.target 

# 切换 Target 时，默认不关闭前一个 Target 启动的进程，
# systemctl isolate 命令改变这种行为，
# 关闭前一个 Target 里面所有不属于后一个 Target 的进程
$ sudo systemctl isolate multi-user.target


Runlevel 0           |    runlevel0.target -> poweroff.target
Runlevel 1           |    runlevel1.target -> rescue.target
Runlevel 2           |    runlevel2.target -> multi-user.target
Runlevel 3           |    runlevel3.target -> multi-user.target
Runlevel 4           |    runlevel4.target -> multi-user.target
Runlevel 5           |    runlevel5.target -> graphical.target
Runlevel 6           |    runlevel6.target -> reboot.target


systemctl list-unit-files --type=target |grep runlevel

以前配置文件的/etc/sysconfig目录。现在的配置文件主要存放在/lib/systemd,，在/etc/systemd目录里面的修改可以覆盖原始设置。

---------
只用journalctl一个命令，查看所有日志（内核日志和应用日志）
日志的配置文件是/etc/systemd/journald.conf。

 -e --pager-end  
 -x --catalog             Add message explanations where available
 -u --unit


# 查看所有日志（默认情况下 ，只保存本次启动的日志）
$ sudo journalctl

# 查看内核日志（不显示应用日志）
$ sudo journalctl -k   (-k --dmesg)

# 查看系统本次启动的日志
$ sudo journalctl -b   (-b --boot)
$ sudo journalctl -b -0 (-0是最近一次启动， -1前一次启动)

# 查看上一次启动的日志（需更改设置）
$ sudo journalctl -b -1

# 查看指定时间的日志
$ sudo journalctl --since="2012-10-30 18:17:16"
$ sudo journalctl --since "20 min ago"
$ sudo journalctl --since yesterday
$ sudo journalctl --since "2015-01-10" --until "2015-01-11 03:00"
$ sudo journalctl --since 09:00 --until "1 hour ago"

# 显示尾部的最新10行日志
$ sudo journalctl -n

# 显示尾部指定行数的日志
$ sudo journalctl -n 20

# 实时滚动显示最新日志
$ sudo journalctl -f

# 查看指定服务的日志
$ sudo journalctl /usr/lib/systemd/systemd

# 查看指定进程的日志
$ sudo journalctl _PID=1

# 查看某个路径的脚本的日志
$ sudo journalctl /bin/bash

# 查看指定用户的日志
$ sudo journalctl _UID=1000 --since today

# 查看某个 Unit 的日志
$ sudo journalctl -u nginx.service
$ sudo journalctl -u nginx.service --since today

# 实时滚动显示某个 Unit 的最新日志
$ sudo journalctl -u nginx.service -f

# 合并显示多个 Unit 的日志 (-u --unit)
$ journalctl -u nginx.service -u php-fpm.service --since today

# 查看指定优先级（及其以上级别）的日志，共有8级
# 0: emerg
# 1: alert
# 2: crit
# 3: err
# 4: warning
# 5: notice
# 6: info
# 7: debug
$ sudo journalctl -p err -b 
 -p, --priority

# 日志默认分页输出，--no-pager 改为正常的标准输出
$ sudo journalctl --no-pager

# 以 JSON 格式（单行）输出
$ sudo journalctl -b -u network.target -o json --no-pager

# 以 JSON 格式（多行）输出，可读性更好
$ sudo journalctl -b -u nginx.service  -o json-pretty

# 显示日志占据的硬盘空间
$ sudo journalctl --disk-usage

# 指定日志文件占据的最大空间
$ sudo journalctl --vacuum-size=1G
提示 /run/log/journal/xxx

# 指定日志文件保存多久
$ sudo journalctl --vacuum-time=1years

 


 ---------------XDMCP--------------
 
solaris  可以用Xmanager 直接远程桌面连接 (XDMCP)

修改文件/etc/X11/gdm/gdm.conf，查找到[xdmcp]模块
Enable=false修改为Enable=true，同时查找#Port=177这一行，把行首的#号去掉。

修改文件/etc/X11/xdm/Xaccess文件，查找到下面一行，把前面的#号去掉。
# *         #any host can get a login window
# *               CHOOSER BROADCAST       #any indirect host can get a chooser


修改文件/etc/X11/xdm/xdm-config文件，找到下面这一行，把它注释掉。[注意该地方注释使用!,而不是我们常用的#号]
！DisplayManager.Requestport: 0

修改/etc/inittab文件，将id:3:initdefault:修改为：id:5:initdefault:并且在最后一行添加x:5:respawn:/usr/bin/gdm

openSUSE-15
		修改/etc/sysconfig/displaymanager文件，更改以下内容：
					DISPLAYMANAGER_REMOTE_ACCESS=”yes”               （ 注：允许远程桌面连接）
					DISPLAYMANAGER_ROOT_LOGIN_REMOTE=”yes”     （注：允许root用户远程连接）
					DISPLAYMANAGER_XSERVER_TCP_PORT_6000_OPEN="yes
		配置/etc/gdm/custom.conf
			在[xdmcp]下添加这样几句 
				Enable=true 
				Port=177 
		在[security]下添加
		 DisallowTCP=false 
			AllowRoot=true 
			AllowRemoteRoot=true

修改/etc/X11/xdm/Xsetup_0的属性为755(openSUSE-15无)

systemctl  restart xdm

ss -atr 没有监听177端口????   重启linux,关win,linux防火墙也一样
Xbrowser 5 ->new XDMCP session ->secure XDMCP 有输入用户密码(sshd)，但无界面

-------------上 XDMCP-----------

rdesktop 工具 (openSUSE-15自带RDP协议的远程桌面工具)  同windows的mstsc ,使用RDP协议,linux服务端xrdp


-------------gcc 的安装(4.3.1较新的)
　% .configure --prefix=/usr/local/gcc-4.3 --enable-languages=c,c++
	###solaris 10	--with-gmp=/usr/local/gmp --with-mpfr=/usr/local/mpfr
　% make 
　　这是一个漫长的过程。在我的机器上（P4-1.6），这个过程用了50多分钟。 
　% make install 

LD_LIBRARY_PATH =/usr/local/gcc-3.4.0/lib:$LD_LIBRARY_PATH
/etc/ld.so.conf 配置文件设置　lib 的查找路径
pkg-config --libs --cflags gtk+-2.0

gcc的环境变量 CPATH(-I选项),C_INCLUDE_PATH,CPLUS_INCLUDE_PATH,OBJC_INCLUDE_PATH(#Objective-C 编译加-lobjc)

ldconfig	生成/etc/ld.so.cache文件, LD_LIBRARY_PATH 或者 /etc/ld.so.conf 	里只 include ld.so.conf.d/*.conf	
因此当安装完一些库文件，(例如刚安装好glib)，或者修改ld.so.conf增加新的库路径后，需要运行一下 /sbin/ldconfig

pkg-config	PKG_CONFIG_PATH
pkg-config --modversion glib-2.0 显示大于这个版本的 ,一般在prefix/lib/pkgconfig,文件以.pc扩展名	 
-------
=======编译升级内核
tar zxvfj linux-2.4.26.tar.bz2(后,当前目录有linux-2.4.26文件夹)
bzcat patch-2.4.27.bz2 | more 有--- linux-2.4.26
打补丁:bzcat patch-2.4.27.bz2| patch -p0   //p1表示不要第一目录(--linux-2.4.26),把2.4.26的源码升级到时2.4.27的源码

make menuconfig 后看版本
mv linux-2.4.26 linux-2.4.27
make dep bzImage modulues modules_install install

lsmod
insmod
depmod
modinfo ext3
modprob (依赖安装,如失败会卸载整组的模块)
rmmod
============================fedora 专用的
--fedora mirror
 http://mirrors.fedoraproject.org/publiclist 其实是redhat的包
	http://download.fedoraproject.org/pub/fedora/linux/releases
	默认跳到 http://mirrors.163.com/fedora/releases/
		http://mirrors.163.com/fedora/releases/29/Everything/x86_64/os/Packages/
 

默认安装了ibus下面包
ibus-1.5.19-4.fc29.x86_64
ibus-qt-1.3.3-20.fc29.x86_64
ibus-libs-1.5.19-4.fc29.x86_64
ibus-rawcode-1.3.2-13.fc29.x86_64
ibus-gtk2-1.5.19-4.fc29.x86_64 
ibus-libzhuyin-1.8.92-3.fc29.x86_64
ibus-gtk3-1.5.19-4.fc29.x86_64 
ibus-m17n-1.3.4-27.fc29.x86_64 
ibus-kkc-1.5.22-10.fc29.x86_64
ibus-setup-1.5.19-4.fc29.noarch 
ibus-typing-booster-2.1.2-1.fc29.noarch
ibus-hangul-1.5.1-2.fc29.x86_64
 
没有ibus config应用, 没有拼音 五笔

http://mirrors.163.com/fedora/releases/29/Everything/x86_64/os/Packages/i/ 
		ibus-table-chinese-wubi-jidian-1.8.2-11.fc29.noarch.rpm
				ibus-table-chinese-1.8.2-11.fc29.noarch.rpm
							ibus-table-1.9.21-1.fc29.noarch.rpm
		ibus-pinyin-1.5.0-15.fc29.x86_64.rpm
				pyzy-0.1.0-19.fc29.x86_64.rpm
						pyzy-db-android-0.1.0-19.fc29.noarch.rpm
						pyzy-db-open-phrase-0.1.0-19.fc29.noarch.rpm
一共就这些就能安装，注销用户再登录就可使用了


http://mirrors.163.com/fedora/releases/29/Everything/x86_64/os/Packages/f/
			fcitx-4.2.9.6-2.fc29.x86_64.rpm
					fcitx-gtk2-4.2.9.6-2.fc29.x86_64.rpm
					fcitx-gtk3-4.2.9.6-2.fc29.x86_64.rpm
							imsettings-1.7.3-5.fc29.x86_64.rpm
							imsettings-gsettings-1.7.3-5.fc29.x86_64.rpm
							imsettings-libs-1.7.3-5.fc29.x86_64.rpm
			
			fcitx-pinyin-4.2.9.6-2.fc29.x86_64.rpm
					fcitx-libs-4.2.9.6-2.fc29.x86_64.rpm
						fcitx-data-4.2.9.6-2.fc29.noarch.rpm
			
			fcitx-table-chinese-4.2.9.6-2.fc29.noarch.rpm
							fcitx-table-4.2.9.6-2.fc29.x86_64.rpm
			fcitx-configtool-0.4.10-5.fc29.x86_64.rpm 就可以点fcitx config
		一共就这些就能安装
		
vi /etc/profile 增加 
	export INPUT_METHOD="fcitx"
后重启也没有fcitx进程？？？ fcitx config也没有配置？？？

touch /etc/profile.d/fcitx.sh 
	export GTK_IM_MODULE=fcitx
	export QT_IM_MODULE=fcitx
	export XMODIFIERS="@im=fcitx"

后重启也没有fcitx进程？？？ fcitx config也没有配置？？？

sudo dnf install im-chooser  （dnf 是yum 的下一个版本,就依赖一个im-chooser-common）
			win + a显示所有应用 ->sundry->input method selector 但报错
			im-chooser 命令也启动不了,fcitx 命令后就有进程了,
			
			sudo dnf install gnome-tweaks (就依赖一个gnome-shell-extension-user-theme)
					没有桌面Desktop 标签???
					-> startup application增加一个开机启动  fcitx
			
			
			gsettings list-schemas | grep keyboard
			gsettings  list-keys org.gnome.settings-daemon.peripherals.keyboard

			
http://mirrors.163.com/fedora/releases/29/Everything/x86_64/os/Packages/s/
			scim-tables-chinese-0.5.14-5.fc29.x86_64.rpm
			scim-pinyin-0.5.92-14.fc29.x86_64.rpm



---Fedora 29不能使用root用户登录的解决办法
sudo vi /etc/gdm/custom.conf 在daemon区增加

AutomaticLoginEnable=True
AutomaticLogin=root

用sudo passwd设置root密码
就可 su root
---
systemctl start sshd 就可远程用root登录

flatpak 类似 ubuntu 用的snaps

cat /etc/centos-release
cat /etc/redhat-release
cat /etc/system-release
cat /etc/os-release
============================CentOS 专用的
CentOS 版本 8.1 大小7GB , Stream 版本(滚动发行版) 大小8.4 GB

CentOS 版本 7.6 大小4.6GB
http://mirrors.huaweicloud.com/centos/7.6.1810/os/x86_64/Packages/
http://mirrors.huaweicloud.com/centos/7/updates/x86_64/Packages/  只有新版本的

https://www.centos.org/download/mirrors/  
http://mirrors.huaweicloud.com/centos/7/os/x86_64/Packages/

--vi /etc/yum.repos.d/huawei.repo
[huawei]
name=huawei
baseurl=http://mirrors.huaweicloud.com/centos/7.6.1810/os/x86_64/
gpgcheck=0
enabled=1
--

有 gcc-c++-4.8.5-28.el7_5.1.x86_64.rpm   
	->gcc-4.8.5-28.el7_5.1.x86_64.rpm
	->libstdc++-4.8.5-28.el7_5.1.x86_64.rpm
	->libstdc++-devel-4.8.5-28.el7_5.1.x86_64.rpm  
	->cpp-4.8.5-28.el7_5.1.x86_64.rpm
	-> kernel-headers-3.10.0-862.9.1.el7.x86_64.rpm     
	-> libmpc-1.0.1-3.el7.x86_64.rpm  
	
	-> glibc-devel-2.17-222.el7.x86_64.rpm   
		->glibc-2.17-222.el7.x86_64.rpm       
		->glibc-headers-2.17-222.el7.x86_64.rpm  
		->glibc-common-2.17-222.el7.x86_64.rpm   
	   
---- centOS 只有ibus
   要单独下载
				ibus-table-chinese-wubi-jidian-1.4.6-3.el7.noarch.rpm
				

application->system tools->software  安装软件界面(命令gpk-application) 类似 yast2,但不能配置仓库

centOS 7.6 默认带自动更新功能 

有一个software update的应用是gpk-update-view进程，gnome-packagekit-update软件包
https://help.gnome.org/users/gnome-packagekit/stable/
	可能要有更新才可设置首选项，才可设置更新频率 
 systemctl list-unit-files 查 packagekit-offline-update.service 和 system.update.target 是static 


yum remove gnome-packagekit-updater,刚装系统是有的

packagekit-yum 软件包中有python程序使用yum 做自动更新,刚装系统是没有的
yum remove packagekit-yum   (先kill `cat /var/run/yum.pid`)
	packagekit-backend 

============================Redhat专用的
doc
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/


http://mirrors.fedoraproject.org/publiclist 找 China

https://mirrors.ustc.edu.cn/epel/6/x86_64/Packages/i/ibus-table-chinese-1.4.6-1.el6.noarch.rpm
https://mirrors.ustc.edu.cn/epel/6/x86_64/Packages/i/ibus-table-chinese-wubi-jidian-1.4.6-1.el6.noarch.rpm
到7的版本就没有ibus-wubi,ibus-pinyin了

https://mirrors.ustc.edu.cn/epel/7/x86_64/Packages/f/fcitx-4.2.9.6-1.el7.x86_64.rpm
					fcitx-pinyin-4.2.9.6-1.el7.x86_64.rpm
					fcitx-table-chinese-4.2.9.6-1.el7.noarch.rpm

命令打开关闭wifi
nmcli radio wifi off
nmcli radio wifi on

nmtui  	(NetworkManagerTextUserInterface)终端界面配置网络 设置主机名,centos7.6/openSUSE-leap-15.1有的 ,配置后要 systemctl restart network
gnome桌面 settings->network->点齿轮图标
setup     终端界面 centOS-7.6配置开机启动服务 和 认证
ntsysv    终端界面 centOS-7.6配置开机启动服务 类似chkconfig  
timeconfig 时区界面

/etc/sysconfig/network-scripts/ifcfg-ens33　配置文件  可以复制出来 一个新的网卡

##DEVICE=ens33 可以没有
##NAME=ens33

#dhcp,none没有,static 静态IP
BOOTPROTO=dhcp

#下面的必须要有
ONBOOT=yes
HWADDR=
TYPE=Ethernet
#TYPE=Bridge 可为桥接

#以下对BOOTPROTO=static
IPADDR=192.168.6.137
#NETMASK=255.255.255.0
PREFIX=24 #24位子网掩码 功能同上
#是数字1
DNS1=114.114.114.114
#/etc/resolv.conf
GATEWAY=192.168.6.2   
#使用VMWare,view->virtual network editor->选vmnet8(NAT) -> NAT Settings->GatewayIP 显示的是 192.168.6.2

#---
#BRIDGE=<网卡名> 
#表示交换机

#--其它
RPOXY_METHOD=none
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
UUID=xxxx
#--
网络桥接不支持NetworkManager,禁用方法
NM_CONTROLLED=yes 修改为 no


chkconfig NetworkManager off
chkconfig network on


service crond start/stop/restart/reload
service network restart ##SSH会断


关SELinux (如果不关就要 chcon -t textrel_shlib_t /usr/local/apache2/modules/* 很麻烦)
	/etc/selinux/config 文件中的SELINUX=  改为 disabled
	echo 0 > /selinux/enforce  暂时性的关闭 SELinux
启动时读/etc/rc.local

临时关闭selinux模式 setenforce 0 
getenforce

rpm -q --requires pam-1.1.8-12.el7.i686 查已安装包的依赖
rpm -q --requires pam-1.1.8-12.el7 可不要架构名
rpm -q --requires -p pam-1.1.8-12.el7.i686.rpm 查指定包的依赖
--requires 可以-R ,即 rpm -qR pam-1.1.8-12.el7.i686

rpm -qpR gcc-c++-7-lp150.1.50.x86_64.rpm 查看包的依赖 (-p,--package  -R,--requires)
    gcc = 7
    gcc7-c++
---------Redhat  修改主机名
hostname myhost
/etc/hostname
/etc/sysconfig/networkk 中的 hostname
/etc/hosts 文件
-------
rpm -ivh xx.rpm --nodeps
rpm -ivh xx.rpm -force   强制安装,不管是否已经安装，都重新安装

-------------redhat rpm-build
可以安装rpm-build 来安装 *.src.rpm 等同于解压->./configure ->make 不过会提示少 openssl-devel
 /usr/src/redhat/SOURCE目录下
vsftp.src.rpm的示例

/usr/src/redhat
	BUILD目录：编译时存放临时文件
	SOURCES目录：存放.tar.gz源码包   
	SPECS目录：存放spec文件          ###   http://svn.rpmforge.net/svn/trunk/rpms/	下有mplayer 和unrar的spec 文件   
	RPMS目录：存放打包好的rpm文件	
	SRPMS目录：存放src.rpm文件

spec文件   rpmbuild  -ba vsftpd.spec  ()
	Summary: the First RPM of Howard
	Name: hellow
	Version: 0.1
	Release: 1
	Vendor:Ace soft (howard_ace@hotmail.com )
	Source0:hellow-0.1-1.tar.gz
	%description
		My test hellow
	%prep
		tar –xzvf $RPM_SOURCES_DIR/hellow-0.1-1.tar.gz
	%build
		cd $RPM_BUILD_DIR/hellow
		./configure
		make
	%install
		cd $RPM_BUILD_DIR/hellow
		make install
	%clean
		rm –fr $RPM_BUILD_DIR/hellow
	%defattr(-,root,root
		/usr/bin/hellow
	%doc $RPM_BUILD_DIR/hellow/readme



#rpm -ivh vsftpd-1.2.1-3E.1.src.rpm
#cd /usr/src/redhat/SPECS/
#rpmbuild  -ba vsftpd.spec
#cd /usr/src/redhat/RPMS/i386
#rpm -ivh vsftpd-1.2.1-3E.1.i386.rpm


yum -y install d4x 来在线下载安装
yum update 
yum list 列所有的包
yum search xxx
yum remove xxx  把依赖也自动删像ruby
yum deplist libcurl  查看软件包的依赖信息

-------RHEL8 新功能 
去KDE,使用Wayland做显示服务,替代X Window,nftables( netfilter项目)替代iptables

yum module list postgresql 显示有多个版本,有d表示默认版本,e表示enable,x表示disable
如安装低版本 yum -y module install postgresql:9.6
yum -y module remove postgresql:9.6
yum -y module disable postgresql:9.6

默认有python3 如使用python2 先安装 yum -y module install python26
alternatives --config python 选择哪个版本

---cockpit 控制台  CentOS 7.6 就可以做
启用web console
systemctl enable --now cockpit.socket
http://127.0.0.1:9090/  页面中有一个终端标签
yum install cockpit-machines 页面中会多一个虚拟机的标签

自定义镜像
yum install lorax-composer cockpit-composer composer-cli 
systemctl enable lorax-composer.socket --now
systemctl restart  cockpit.socket  
页面中会多了一个image builder标签

---分层存储 stratis 本地存储管理工具 
yum install stratisd stratis-cli
systemctl enable stratisd --now

建立存储池
stratis pool create mypool1 /dev/vdb  #lsblk要事先有这个vdb
stratis pool list
建立文件系统
stratis fs create mypool1 fs1
stratis fs list 有显示目录,直接mount这个目录就可以使用
扩容
stratis pool add-data mypool1 /dev/vdc
#rsync -ruP /var/log* /mnt/xxx 
		 -P  same as --partial --progress
 		 -r, --recursive  
 		  -u, --update 
快照
stratis fs snapshot mypool1  fs1 fs1_snap01
stratis fs destroy mypool1  fs1 #模拟有问题,如设备忙,先umount
stratis fs list  就会少一个,可以mount快照 

---vdo 数据压缩去重
centOS 7.6可以 yum install vdo
vdo create --name=vdo1  --device=/dev/vdd --vdoLogicalSize=50G 提示在/dev/mapper/vdo1
 
vod status --name=vdo1 | grep Deduplication  查重复数据可删除
vod status --name=vdo1 | grep Compresssion  查压缩

格式化
mkfs.xfs -K /dev/mapper/vdo1
/* no discard */	[-K]

注册
udevadm settle  后就可mount /dev/mapper/vdo1 /mnt/vdo1

df -h 看大小是50G,真实没有,是逻辑大小,
vdostats --human-readable 查真实的大小
在挂载的目录多次放相同大文件 ,查真实大小,发现增长不是很快

---使用podman代替docker
相应的工具 buildah,skopeo,runc
yum install podman-docker # centOS-7.6可 安装与docker-ce是冲突的
yum module install container-tools  (centOS-7.6用 yum install buildah)

创建容器
buildah from scratch
buildah containers 显示容器名字 working-container

加标签
buildah config --label name=custom-container  working-container

buildah inspect working-container

buildah mount working-container 显示挂载的目录,记下来 /var/lib/containers/storage/overlay/cabc3c44e7b60dc9c3492f587edd90ea6111d91fe1fa950b7732e8c357cbd23f/merged
rpm --root /var/lib/containers/storage/overlay/cabc3c44e7b60dc9c3492f587edd90ea6111d91fe1fa950b7732e8c357cbd23f/merged --initdb

yum install -y yum-utils
 
yumdownloader --destdir=/tmp/ redhat-release
rpm -ivh --root /var/lib/containers/storage/overlay/cabc3c44e7b60dc9c3492f587edd90ea6111d91fe1fa950b7732e8c357cbd23f/merged   /tmp/centos-release-7-7.1908.0.el7.centos.x86_64.rpm 
 #CentOS默认有老版本centos-release

cp /etc/yum.repos.d/epel.repo /var/lib/containers/storage/overlay/cabc3c44e7b60dc9c3492f587edd90ea6111d91fe1fa950b7732e8c357cbd23f/merged/etc/yum.repos.d/
yum install -y --installroot /var/lib/containers/storage/overlay/cabc3c44e7b60dc9c3492f587edd90ea6111d91fe1fa950b7732e8c357cbd23f/merged httpd
echo "hello" >> /var/lib/containers/storage/overlay/cabc3c44e7b60dc9c3492f587edd90ea6111d91fe1fa950b7732e8c357cbd23f/merged/var/www/html/index.html

配置容器启动命令
buildah config --cmd "/usr/sbin/httpd -DFOREGROUND" working-container

容器加端口
buildah  config --port 80/tcp working-container

清缓存
yum clean all  --installroot /var/lib/containers/storage/overlay/cabc3c44e7b60dc9c3492f587edd90ea6111d91fe1fa950b7732e8c357cbd23f/merged 

buildah umount working-container
生成镜像
buildah commit working-container custom-image

buildah images

podman run -d -p 80:80 localhost/custom-image

curl http://127.0.0.1:80 外网IP也要测试 ,如出错重新mount(还是原来的长目录),重新设置启动命令,umount,commit

---nftables( netfilter项目)
https://wiki.nftables.org/wiki-nftables/index.php/Main_Page

ipv4 和 ipv6 协议可以被合并为一个称为 inet 的单一地址族
如果未指定地址族，它将默认为 ip 协议，即 ipv4

arp(Address Resolution Protocol)  根据 IP地址 获得 物理地址(mac地址)
rarp  根据 物理地址 返回 IP地址

nft list ruleset 显示规则
nft flush ruleset 清空规则   使用 systemctl restart firewalld 后又有了
nft -f <read-from-file>

表Table			   
		family 可是: ip, arp, ip6, bridge, inet, netdev.
	nft list tables [<family>]  
	nft (add | delete | flush) table [<family>] <name>
	nft list table [<family>] <name> [-n] [-a]        #-a 输出handle数  
	
	示例
	nft list tables inet 显示有filter和firewalld
	nft  add  table  inet mytable 
	nft  flush  table  inet mytable 
	nft  delete  table  inet mytable 
	
链Chain
	type :有filter(除netdev全支持),route(只支持ip和ip6),nat(只支持ip和ip6)
	hook: 当family为 ip, ip6 ,inet 时, hooks可选值为 prerouting, input, forward, output, postrouting.
	policy: 可选值为 accept, drop, queue, continue, return.
	priority : NF_IP_PRI_FILTER (0) 命令只用数字
	
	nft (add | create) chain [<family>] <table> <name> [ { type <type> hook <hook> [device <device>] priority <priority> \; [policy <policy> \;] } ]
	nft (delete | list | flush) chain [<family>] <table> <name>
	nft rename chain [<family>] <table> <name> <newname>
	示例
	nft add chain inet mytable mychain { type filter hook forward priority 0 \; policy drop \; }
	nft list chain inet mytable mychain 
	nft flush chain inet mytable mychain 
	nft rename chain inet mytable mychain mychain2
	nft delete chain inet mytable mychain2
	
	
规则Rules
 
	nft add rule [<family>] <table> <chain> <matches> <statements>
	nft insert rule [<family>] <table> <chain> [position <position>] <matches> <statements>
	nft replace rule [<family>] <table> <chain> [handle <handle>] <matches> <statements>
	nft delete rule [<family>] <table> <chain> [handle <handle>]

	
	
	
	
	
----------

在/var/cache/yum/extras/packages/目录有下载的软件包
/var/cache/yum/x86_64/7/extras/packages/
在/var/cache/yum/base/packages/目录有下载的软件包
rpm -qa显示所有安装的软件包
rpm -ql 软件包名   显示软件包安装的文件
rpm -qf 文件名  显示文件属于哪个软件包
rpm -qi 软件包名 显示安装软件包信息
rpm -qpi 软件包名.rpm 显示未安装软件包信息

rpm -e 卸载软件包

install 命令相当于 cp
sudo install minikube /usr/local/bin

useradd -d /u01/oracle  这是用户的默认主目录
------------
----------------Redhat yum 自动安装光盘中软件包,相当于 SUSE 的 zypper 
/etc/fstab
/dev/cdrom	/mnt/cdrom	iso9660	ro,loop	0	0 

mount -t iso9660 -o ro,loop /dev/cdrom /mnt/cdrom
cd /etc/yum.repos.d/
mkdir bak
mv *.repo bak
vi RedhatENT7DVD.repo (CentOS7DVD.repo) 文件名任意,要以.repo结尾 
写入
[DVD]
name=cdrom
baseurl=file:///mnt/cdrom
gpgcheck=0
#enabled=1

yum install gnome-desktop3  就可以了,会自动查找依赖包
yum install gnome-session
 xorg-x11 中才有startx
 
CentOS-7.6测试以上还是没桌面，要yum groupinstall "GNOME Desktop" 才行
CentOS-7.6 System tool->software 也可像yast一样界面选中安装软件，但不能配置仓库

有ip命令,也有老的ifconfig,默认网卡叫ens33
要修改文件/etc/sysconfig/network-scripts/ifcfg-ens33 为ONBOOT=yes再 systemctl restart network 启动服务才能有IP

Gnome-desktop安装默认有qemu-kvm,bridge-util,有建立virbr0，virbr0-nic网卡

yum clean all		清除yum缓存
yum grouplist
yum group list 显示有 GNOME Desktop
yum groupinstall "GNOME Desktop"
yum groups install "GNOME Desktop"

yum search gcc  模糊查找软件包名
yum list |grep gcc  有gcc-c++
yum list all |grep gcc 
64位机 yum 安装32位 gcc ,yum search all gcc



/etc/yum.conf 文件中修改  keepcache=0  改为keepcache=1 这样在yum install xx 时，就不会删 /var/cache/yum/fedora/packages/e下的包了
				CentOS是/var/cache/yum/x86_64/7/

yum-config-manager   --add-repo    https://download.docker.com/linux/centos/docker-ce.repo
yum-config-manager   --add-repo    https://copr.fedorainfracloud.org/coprs/vbatts/bazel/repo/epel-7/vbatts-bazel-epel-7.repo

yum repolist 列出所有仓库
yum repolist all
yum install xen 如版本出来过新，想要老的
yum install xen-4.1.3
 可能依赖的版本要老的，而现有的是新的
yum install xen-4.1.3 xen-runtime-4.1.3 xen-libs-4.1.3

要安装pip 我们需要启用EPEL(Extra Packages for Enterprise Linux)存储库
sudo yum install epel-release
sudo yum install python-pip  是python2的 
sudo yum install docker-distribution

使用 （python-setuptools） easy_install pip 也是 python2


CentOS 7.6+ 当安装epel-release 就可 
yum install snapd
systemctl enable --now snapd.socket
	会创建link 从/etc/systemd/system/sockets.target.wants/snapd.socket 
	到 /usr/lib/systemd/system/snapd.socket
ln -s /var/lib/snapd/snap /snap


python3可以源码安装 
sudo yum install python36 安装
sudo yum install python36-pip 会安装 python36-setuptools



----------------
-----------------硬盘安装RedhatEL5------------

把ISO镜像文件放入 FAT32分区,不能是NTFS

把Grub For Dos解压缩,把grldr,menu.lst复制到C:\盘的根目录下
menu.lst也可复制到C:\boot\grub下(boot和grub文件夹自己建立)

boot.ini了,用记事本打开之后,在里面加上这么一行C:\grldr="GRUB For Dos" 然后保存退出.

isolinux文件夹解压出来放到C:\的根目录下,保留vmlinuz和initrd.img文件就可以了  (可以NTFS)


grub 下用find /isolinux/vmlinuz 会显示 hd0,x 为下面使用

C:\根目录的menu.lst文件,(先找c:\menu.lst  再找c:\boot\grub\menu.lst),在其最后
添加这么几行:

grub 下用find /isolinux/vmlinuz  会显示hd(0,x) 

title Install Redhat5
kernel (hd0,x)/isolinux/vmlinuz
initrd (hd0,x)/isolinux/initrd.img

或者是
title Install Redhat5
root (hd0,x)
kernel /isolinux/vmlinuz
initrd /isolinux/initrd.img


ISO镜像最好是在分区的根目录下,就不用输入路径了,grub 下用find /isolinux/vmlinuz  会显示hd(0,6) 那么就是/dev/hda7
可按提示按 F2,



引导windows 是
rootnoverify(hd0,0)
chainloader+1

不要删除boot 分区

其它命令
clear,displaymem内存,reboot重启
restart 重启,help 会打开编辑器

一个硬盘最多可以有 4 个 Primary + Extended 的扇区
------------
-----------Redhat EL5 安装Maya2008
[系统]－>[首选项]－>[窗口]    ,更改alt键为其它的
[Maya 2008](redhat 提示的)

chcon -t textrel_shlib_t /usr/autodesk/maya2008/lib/
setsebool -P allow_execheap=1
chcon -t textrel_shlib_t /usr/autodesk/maya2008/bin/plug-ins/*.so
chcon -t textrel_shlib_t /usr/autodesk/maya2008/bin/plug-ins/image/*.so
----------- 


====rsync
rsync -av dir/* dir2 					把dir/*的所有修改的内容再复制到dir2中 
			#  -a, --archive  -v, --verbose  有-r递归目录
rsync -av file*.txt dir2
rsync -av file  root@127.0.0.1:/root 	远程复制
rsync -av root@127.0.0.1:/root  dir
rsync  dir/  							相当于ls -l dir
rsync  root@127.0.0.1:/root/

--/etc/rsyncd.conf
uid = nobody
gid = nobody

#传输文件以前首先chroot到path,需要root权限
use chroot = no
max connections = 10

#是否检查口令文件的权限，如果为yes，则密码文件必须为root所有
strict modes = yes

pid file = /var/run/rsyncd.pid
lock file = /var/run/rsync.lock
log file = /var/log/rsyncd.log

#定义一个模块,可以有多个,web是对应模块的名称
[web]
# 指定要备份的文件或者目录
path = /var/log/httpd

comment = web server log 
#忽略无关的I/O错误
ignore errors

read only = no
write only = no
hosts allow = *
#hosts deny = 172.16.30.1
list = false

#该选项指定当该模块传输文件时守护进程应该具有的uid和gid，默认值为全局定义的"nobody"
uid = root
gid = root

#定义可以连接该模块的用户名，和系统用户无关，多个用户名用空格或者,好隔开
auth users = jia
#指定一个“用户名:密码”格式的文件，用户名就是auth users指定的，密码要和客户端的密码文件对用起来
secrets file = /etc/server.pass
--
vim /etc/server.pass
jia:leejia(第一个为用户名，第二个为对应的密码)
 
chmod 600 /etc/server.pass

启用服务用 rsync --daemon  监听 873 端口

测试文件是否能同步
rsync -vzrtopg --delete --progress jia@127.0.0.1::web /tmp/test  删本地的/tmp/test
 

--password-file=/etc/server.pass 客户端加这个无效果 
/tmp是客户端存放备份文件的目录

未成功,看日志
lsof -i :873  有ipv4 和 ipv6协议  ,执行时的权限 


--progress 显示进度
-z compress 传输时压缩
-r recursive
-t time 更新修改时间
-o owner 保存属主
-g group 保存组
-p perm 保存权限

====FTP client


======linux 内核参数
/proc/sys/kernel/threads-max  最大线程数

ps -eLf
ps axms
 
ulimit -a

打开文件数 (-n)  
ulimit -Sn     #查看
ulimit -Sn 65535 #设置
ulimit -Hn

 进程最大线程数 (u)
$ ulimit -Su 
$ ulimit -Hu


vi /etc/security/limits.conf
#nofile 最大打开文件数 
#nproc 进程的最大线程数  文件注释有各种说明 
oracle          soft    nofile  1024   
oracle          hard    nofile  65536



 

yum   install  lrzsz  就可以用 rz ,sz 


====== extundelete   ext3或者ext4  误删的恢复

debugfs  是linux系统自带工具, 恢复Ext3的文件系统中被rm、rm -f 掉的文件 

extundelete 主页 http://extundelete.sourceforge.net/
extundelete-0.2.4.tar.bz2 (2013年的,到2018年底不有更新)

extundelete-0.2.4
    可以恢复 ext3、ext4文件系统下被误删除的文件
    并且支持单个文件恢复、单个目录恢复、inode恢复、block恢复、完整磁盘恢复等
    
     openSUSE-15 DVD  中有 libext2fs2-1.43.8-lp150.2.24.x86_64.rpm  
     http://download.opensuse.org/distribution/leap/15.0/repo/oss/x86_64/
        libext2fs-devel-1.43.8-lp150.2.24.x86_64.rpm
            libcom_err-devel-1.43.8-lp150.2.24.x86_64.rpm
         
  ./configure    
  make
  make install
  安装 OK  安装在 /usr/local/bin/extundelete
  http://download.opensuse.org/distribution/leap/15.0/repo/oss/x86_64/
		extundelete-0.2.4-lp150.1.4.x86_64.rpm
   
   在数据被误删除后，第一时间要做的是卸载被删除数据所在的磁盘或者磁盘分区，如果是系统根分区的数据遭到误删除，就需要将系统进入单用户，并且将根分区以只读模式挂载
  
 mkdir /data
 mkfs.ext4 /dev/sdx1 102400  (单位是KB ,100MB)
 mount /dev/sdx1 /data/
 cp /etc/passwd /data/
cp -r /etc/init.d /data/
echo "my 我的"> /data/my.txt
rm -rf /data/*

cd ~
umount /data/
/usr/local/bin/extundelete /dev/sdx1 --inode 2   查分区可恢复的数据信息 （根目录的inode一般为2）

ls -i 可以看 indoe信息

恢复单个文件
/usr/local/bin/extundelete /dev/sdx1 --restore-file passwd   
在文件恢复成功后，extundelete命令默认会在执行命令的当前目录下创建一个RECOVERED_FILES目录
ls RECOVERED_FILES/
测试失败没有文件？？？？ 日志提示 No undeleted copies found in the journal.

恢复单个目录
/usr/local/bin/extundelete /dev/sdx1 --restore-directory init.d
测试失败没有文件？？？？

恢复所有删除数据
/usr/local/bin/extundelete /dev/sdx1 --restore-all
测试失败没有文件？？？？

date -d"-1 day" "+%Y%m%d"   是昨天
date -d"-1 day"  +%s 
    1544018945
/usr/local/bin/extundelete --after 1544018945 --restore-all /dev/sdx1 
测试失败没有文件？？？？

自己测试 真实的 /boot 分区 是可以恢复文件的(可能 mkfs.ext4 式就是不行的)


---ntfsprogs linux下恢复NTFS分区删除的文件 

openSUSE-leap-15.1 自带 ntfsprogs-2016.2.22-lp151.3.2.x86_64.rpm

http://tuxera.com
ntfsundelete 
	-S, --size RANGE  格式 数字+单位 k,m,g,t 开始-结束，如1K-300M
	-t, --time SINCE  格式 数字+周期  d=days，w=week,m=months,y=years 如2d
	-u, --undelete         Undelete mode
   -i, --inodes RANGE     Recover these inodes
 	-o, --output FILE      Save with this filename


su root
先取消挂载 umount /dev/sdb4

查看 可些文件可恢复
ntfsundelete -S 1K-300M  /dev/sdb4 
ntfsundelete -S 1K-300M -t 2d /dev/sdb4   
显示第一列是 Inode
ntfsundelete /dev/sdb4 -u -i 108 -o jettison-1.3.3.jar -d /tmp/ntfs_restor_dir
提示成功

----------缓存文件系统 tmpfs
/dev/shm 是共享内存，类型是tmpfs，可把文件复制过来  df -Th ,free -m 看 share

建立缓存系统名为mytmp

mkdir /mnt/cache
mount -t tmpfs -o size=50m mytmp /mnt/cache
调整大小
mount -t tmpfs -o remount,size=100m mytmp /mnt/cache


==========windows 仿问linux
Ext2Fsd-0.69.exe  只能读ext4分区,不能写

在win10 下安装测试成功
开始->  Ext2Fsd ->Ext2 Volume Manager 启动
	双击需要安装的 EXT 分区
	打开Volume Manager双击ext挂载的ext分区,复选 设置为只读,不可写 , 看到语种编码默认是utf8
	复选 固定盘符：对固定磁盘建议采用此方式  , 下拉选择盘符 -> 保存并退出
	
	不要使用teraCopy工具
	
Ext2Read 文件名 ext2explore-2.2.71.zip 在windows 10 什么也看不到,win7看不到home和boot目录下的内容

----无线设备   蓝牙
lsusb  命令

hciconfig 命令
显示 蓝牙设备是hci0


hciconfig hci0 up
如报 Can't init device hci0: Operation not possible due to RF-kill (132)
是因 设置中蓝牙 被关闭，可以手工打开，或用 rfkill unblock all

rfkill block wifi  相当于 设置中关闭 wifi
rfkill unblock wlan
 
rfkill list 效果同 rfkill list all  显示有 无线网卡和蓝牙

rfkill block all  关闭所有

hcitool scan   扫描
 设置中连接蓝牙后，双击连接的项->弹出窗口-> send file...选择要发送的文件
sdptool search  xxx  不知道干什么的
-------------
echo TXlQQHNzMTIz | base64 -d 显示base64解码后的原值


uuidgen 命令 生成UUID f3d3e394-d5a5-4859-a8f5-c690e44741b7




 
