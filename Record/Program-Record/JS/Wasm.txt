WebAssembly  Wasm 在浏览中运行二进制指令的形式（chrome,firefox调试时会被返编译成汇编指令），比JavaScript 快,应用于视频解码，3D游戏 

WebAssembly 1.0 已经在4大浏览器中有了Chrome, Edge, Firefox, and WebKit (Opera)
https://webassembly.org/roadmap/ 


https://developer.mozilla.org/en-US/docs/WebAssembly 

浏览器console中 WebAssembly.很多方法 
https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API


可使用 Rust 来开发
https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm


可使用C/C++ 来开发
https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm
 
 
使用Web Assembly 扩展Istio中的Envoy     ####配置有一个 EnvoyFilter 
Web Assembly  的开发语言只能使用单线程，是一个沙盒中执行的 （Envoy带有wasm的运行时，是一个Filter）

istio 1.9    istio agent 拦截  xDS 下载wasm （envoy xDS 协议 ）
 
 
============== C/C++  程序

#include<ctime>
#include<iostream>
using namespace std;
int fib(int x)
{
	if(x<=0)
		return 0;
	if(x<=2)
		return 1;
	return fib(x-1)+fib(x-2); 
}
int main()
{
	long start=clock();
	fib(20);
	long end=clock();
	cout<<"eleapse time"<<end-start<<endl; 
}
 

--linux下安装C++ 编译为wasm的工具 Emsdk = Emscripten   
git clone https://github.com/emscripten-core/emsdk.git
cd emsdk 就有emsdk命令 
./emsdk install latest 下载
./emsdk activate latest 激活版本
source ./emsdk_env.sh 环境变量 就有 emcc 命令 和 em++ 命令
#zypper install python3

./emcc hello.cpp 输出  a.out.js 和 a.out.wasm （二进制）
./emcc hello.cpp -o hello.html 可以放web服务器上运行


优化选项
	-O1
	-O2
	-O3
-s所有选项
https://github.com/emscripten-core/emscripten/blob/main/src/settings.js
	MODULARIZE
	EXPORT_ES6
	
	
node a.out.js 可以执行，5000多行的代码

 
--fib.cpp 只使用这个函数生成wasm文件
int fib(int x)
{
	if(x<=0)
		return 0;
	if(x<=2)
		return 1;
	return fib(x-1)+fib(x-2); 
}

---fib.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript">  
  fetch('a.out.wasm') 
  .then(function(response) { 
     response.arrayBuffer();
  })
  .then(function(bytes) {
    WebAssembly.compile(bytes)
  }).then(function(mode) {
    const instance = new WebAssembly.Instance(mode)
    const a = instance.exports 
    console.log(a);
    console.time();
      //a.fib(40);//这调不到
    console.timeEnd();
  }); 
</script>
</head>
<body>
---代码放一个web服务器,fetch不能跨域





C++程序可以读写文件
--hello-file.c

#include <stdio.h>
int main() {
  FILE *file = fopen("tests/hello_world_file.txt", "rb");
  if (!file) {
    printf("cannot open file\n");
    return 1;
  }
  while (!feof(file)) {
    char c = fgetc(file);
    if (c != EOF) {
      putchar(c);
    }
  }
  fclose (file);
  return 0;
}

emcc  hello-file.c -o hello-file.html --preload-file tests/hello_world_file.txt

加-g,Chrome就可以调试C代码（展开file：//就有.c文件），只能看代码执行的走高，右则展开 Scope->Local，不能看变量的值
emcc  hello-file.c -g -f  -o hello-file.html --preload-file tests/hello_world_file.txt

https://github.com/WebAssembly/wabt
bin/wasm2wat test.wasm -o test.wat


emrun hello-file.html 会启动自已的服务，启动浏览器 ，方式 打开 http://localhost:6931/hello-file.html
emrun --browser chrome  --host 127.0.0.1 --port 9000  hello-file.html  




 
--call_func.c
extern int print_value(int x);

void call_func(int input)
{
	print_value(input * 3);
} 

emcc -o call_func.html call_func.c

---call_func.html 
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript">  
 
var importObj={
	env: {
		_print_value: x =>console.log("x="+x) 	//或者显示在页面上
	}
}
WebAssembly.instantiateStreaming(fetch('call_func.wasm'),importObj)
.then(
			result =>  {
		     console.log(result);
				//result.instance.exports._call_func(9);//调不到？？
			}
		);

</script>
</head>
<body>


 内存可让WebAssembly和JavaScript 都访问,web assembly 只支持Int32,Int64,Float32,Float64 这4种类型数据格式
#new WebAssembly.Memory(initial, [maximum],[shared]);  shared默认为false,大小单位为page, 1 page=64KB

var memory = new WebAssembly.Memory({initial:10, maximum:100});
WebAssembly.instantiateStreaming(fetch('memory.wasm'), { js: { mem: memory } })
.then(obj => {
  var i32 = new Uint32Array(memory.buffer);
  for (var i = 0; i < 10; i++) {
    i32[i] = i;
  }
  var sum = obj.instance.exports.accumulate(0, 10);
  console.log(sum);
});








-----Makefile 未成功

PROJ=hello

ifeq ($(OS),Windows_NT)
	RM=del
else
	RM=rm
endif  

CC=emcc

CFLAGS=-O3 --emrun -s WASM=1
$(PROJ).html: $(RPOJ).c
	#$(CC) $(CFLAGS) -o $@ $^
	$(CC) $(CFLAGS) -o $(PROJ).html $(RPOJ).c 
	 
.PHONY: clean
clean:
	$(RM) $(PROJ).html $(PROJ).js  $(PROJ).wasm
--------

emmake make  clean 调用 clean 的定义 
emmake make   调用不到自己的命令 ？？？ ，只读到了CFLAGS变量？ -o 后面的读不到？？




==============
 




