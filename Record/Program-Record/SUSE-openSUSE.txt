https://doc.opensuse.org/


openSUSE leap       版本是稳定的发布版本 
openSUSE tumbleweed 版本是为希望有最新的包

openSUSE Leap 次要版本，大约每12个月(每年) 对齐  SUSE Linux Enterprise Service Packs
	主要版本大约36-48个月(3-4年) 对齐 SUSE Linux Enterprise Releases
 
 
openSUSE  Leap 15.2还首次提供Kubernetes支持作为正式包,也可为Windows SubSystem for Linux

openSUSE  Leap 15.3  发布时间  June 02, 2021,但真机安装后启动报错？？？ VMware安装正常(15.0,15.1,15.2都正常)
	下载iso文件不要从国内的镜像下，会在安装时报签名失败,rpm错误,导致没办法安装(vmware安装也是,说明镜像不是复制iso而各镜像站点单独生成的)
		,日本的镜像下载的(手工生成sha256的值和官方上的一样 )只有一次提示签名失败

 openSUSE Leap 15.4    Jun-19 2022 已经发布  
 (大白菜制作U盘启动成功USB-ZIP)安装时,硬盘分区时,提示要有BIOS Boot Loader类型的分区,自己建不出,建议的有,再删btrfs分区
 
	开始使用dnf,gnome-4.1(版本为41.2),Git服务器Pagure,
	kubernetes-1.17,1.18,1.19,1.20都有,但刚发时，已经有kubernetes-1.24,1.20是最后一个支持版本
		
	安装连网前建立 关闭 packagekit，一个软件更新的工具，没有提示日志显示在下载软件包，zypper 不能安装其它包
	systemctl stop packagekit  
	systemctl disable packagekit  #是 static 的，disable没用，再登录又启动了？？zypper remove PackageKit
	terminal 有黑色主题
	
	bluefish 不能去Spell check???
	
yast2 增加仓库地址 ，有kubernetes-1.24.3 
https://download.opensuse.org/tumbleweed/repo/oss/

	
openSUSE-leap-15自带的gnome软件 libreOffice,evolution,evince,gimp,inkscape,cheese摄像,Totem播放器,pidgin(可MSN,GTalk都测试过的),brasero(DVD工具)
	Firefox
	GStreamer是在Linux下创建流媒体的应用程序框架
	ibus,fcitx,cyrus,TiggerVNC
	Mesa(openGL) 
 
 
http://download.opensuse.org/update/leap/15.0/oss/
http://download.opensuse.org/update/leap/15.0/non-oss/
http://download.opensuse.org/distribution/leap/15.0/repo/oss/ 下的 x86_64/
	gcc-c++- 
		linux-glibc-devel-4.15-lp150.1.23.noarch.rpm ( 即是 linux-kernel-headers)
				
 
	mysql8 generic 服务端OK  客户端报少　libtinfo.so.5: (libncurses5-6.1-lp150.3.14.x86_64.rpm)
	mariadb-10.4.13-lp152.1.1.x86_64.rpm  DVD中有

docker-19.03.11_ce-lp152.1.1.x86_64.rpm 要下载的
	 依赖了 git-core-2.25.0-lp152.1.6.x86_64.rpm
python3-docker-compose-1.25.1-lp152.1.1.noarch.rpm 要下载的

---kubernetes 
openSUSE-15.3 有 kubernetes1.20-kubeadm ,也有kubernetes1.18-kubeadm包

kubernetes-master-1.18.0-lp152.1.4.x86_64 不能安装下面三个
	kubernetes-controller-manager-1.18.0-lp152.1.4.x86_64.rpm
	kubernetes-apiserver-1.18.0-lp152.1.4.x86_64.rpm
	kubernetes-scheduler-1.18.0-lp152.1.4.x86_64.rpm
	
kubernetes-node-1.18.0-lp152.1.4.x86_64 不能安装proxy
	kubernetes-proxy-1.18.0-lp152.1.4.x86_64.rpm

kubernetes-kubeadm-1.18.0-lp152.1.4.x86_64.rpm
	依赖了kubernetes-kubelet1.17-1.18.0-lp152.1.4.x86_64 ,kubernetes-kubelet1.18-1.18.0-lp152.1.4.x86_64两个版本,
	kubernetes-kubelet-common-1.18.0-lp152.1.4.x86_64
	cri-o-1.17.3 这个和docker类似 (systemctl list-unit-files | grep crio 显示为disabled,关闭了会自动被启动)

kubernetes-pause-3.2-lp152.1.3.x86_64.rpm
kubernetes-client-1.18.0-lp152.1.4.x86_64.rpm (kubectl命令)
	
依赖了 qemu ,runc

coredns-1.6.7
etcd-3.4.3  或者 etcd-for-k8s-image
nginx-ingress-controller
#flannel (依赖 net-tools-deprecated)
flannel-k8s-yaml-0.11.0
#kube-prometheus-k8s-yaml-0.3.0
也有 minikube,helm 
没有dashboard
 
--- 上  kubernetes

redis-6.0.4-lp152.1.1.x86_64.rpm 


java-11-openjdk-11.0.7 默认安装的
java-1_8_0-openjdk-1.8.0.252
	

rabbitmq-server-3.7.14-lp151.1.9.x86_64.rpm	(可用unix用包)
		erlang-20.3.8.15-lp151.2.33.x86_64.rpm
			erlang-epmd-20.3.8.15-lp151.2.33.x86_64.rpm
				/mnt/iso/x86_64/unixODBC-2.3.6-lp151.2.3.x86_64.rpm
		erlang-sd_notify-1.0-lp150.1.1.x86_64.rpm		
		socat-1.7.3.2-lp151.4.3.x86_64.rpm
	
		
git-2.16.4-lp151.3.4.x86_64.rpm (yast可以不选择git-svn,git-cvs)
			git-core-2.16.4-lp151.3.4.x86_64.rpm
			git-email-2.16.4-lp151.3.4.x86_64.rpm
			git-gui-2.16.4-lp151.3.4.x86_64.rpm
			gitk-2.16.4-lp151.3.4.x86_64.rpm
			libsha1detectcoll1-1.0.3-lp151.3.3.x86_64.rpm
			perl-Authen-SASL-2.16-lp151.2.1.noarch.rpm
			../noarch/perl-Digest-HMAC-1.03-lp151.2.1.noarch.rpm
			perl-Error-0.17025-lp151.2.1.noarch.rpm
			perl-Net-SMTP-SSL-1.04-lp151.2.1.noarch.rpm
 
gitlab-ce  https://packages.gitlab.com/gitlab/gitlab-ce 

	
sysstat (iostat)
	sharutils-lang-4.15.2-lp151.3.3.noarch.rpm
	procmail-3.22-lp151.3.3.x86_64.rpm
	sharutils-4.15.2-lp151.3.3.x86_64.rpm
	metamail-2.7.19-lp151.2.3.x86_64.rpm
	sysstat-12.0.2-lp151.2.1.x86_64.rpm
	

 
bridge-utils-1.6-lp151.2.3.x86_64.rpm (brctl命令)
tcpdump-4.9.2-lp151.3.1.x86_64.rpm

 
extundelete-0.2.4-lp150.1.4.x86_64.rpm

xen-4.10.0_20-lp150.1.2.x86_64.rpm
libvirt-daemon-xen-4.0.0-lp150.6.18.x86_64.rpm
	libvirt-daemon-driver-libxl-4.0.0-lp150.6.18.x86_64.rpm
xen-tools-4.10.0_20-lp150.1.2.x86_64.rpm 
	grub2-x86_64-xen-2.02-lp150.12.8.x86_64.rpm
libvirt-daemon-xen-4.0.0-lp150.6.18.x86_64.rpm
	libvirt-daemon-driver-libxl-4.0.0-lp150.6.18.x86_64.rpm

openSUSE-leap-15.1的yast 自带 phpMyAdmin包(直接安装在/srv/www/htdocs/phpMyAdmin目录下)

		
lxc-2.0.9-lp150.1.8.x86_64.rpm
	liblxc1-2.0.9-lp150.1.8.x86_64.rpm
	...
	
http://download.opensuse.org/distribution/leap/15.0/repo/oss/ 下的 noarch/ 
	iotop 
 
 
	
http://nginx.org/packages/sles/15/x86_64/RPMS/
	rpm -ivh nginx-1.14.2-1.sles15.ngx.x86_64.rpm 

zypper install netcat-openbsd

lsb_release -a
cat /etc/SUSE-brand  
cat /etc/os-release

ctrl+alt+f7 出现的登录界面，是为新开一个用户使用桌面(即多用户同时使用桌面) ctrl+alt+fx 来查找
ctrl+alt+fx的控制台 输入错误命令时 会发出beep声音，关闭方法 
setterm -blength 0  加入到 /etc/profile


VMWare 15 安装 openSUSE-leap-15 时必须要建立Partition ID为 Bios Boot Partition 类型 的分区(不要选格式化,大于2MB默认8MB,默认是第一个分区) 

如真机安装 openSUSE-leap-15(存的window 10)则要一个至少256M的fat分区,挂在/boot/efi下
默认其它分区类型是 /是 BrtFS((btree,还是ext4好,windows有可能读ext4 )  /home是 XFS

U盘是openSUSE-15分区类型是fuseblk ,windows是NTFS,可以写数据 (FUSE=Filesystem in Userspace)
默认不支持 exFat 格式 ,要安装包  zypper -n install fuse-exfat exfat-utils 后 就可以 mount -t extfat /dev/sdax /mnt 了

------------------------硬盘安装SUSE-Desktop-10-DVD
(用isoemu,硬盘安装SUE不行,要用grub4dos)
SUSE.iso\boot\i386\loader 目录下的文件linux,initrd  

title Install SUSE-10
kernel (hd0,6)/SUSE_boot/linux
initrd (hd0,6)/SUSE_boot/initrd


find /SUSE_boot/initrd


SUSE-11可以使用ISO文件,也可是解压的(FAT32分区OK，NTFS分区也可见)，输入路径一定要加 /  ，如/SUSE-11.iso ，
不会显示未使用空间，要添加分区才行，不要选择[客户中心],主机名自动配置,默认不带C++开发，可以选择,


安装SUSE-10时,不要用默认的分区,会把windows 删除的, [专家]按钮->[重读分区表] ,出现windows 分区,再修改

------------------------

安装oracle 时界面乱码,必须export LANG=en_US.UTF-8 可以显示英文(默认是zh_CN.UTF-8)

------------SSH
/etc/ssh/sshd_config   
PermitRootLogin 改成yes 
PasswordAuthentication 就是把no改为yes

chkconfig sshd on
即目录 /usr/lib/systemd/system 有sshd.service 也可 systemctl start  sshd  会弹出UI 输入密码

service sshd start
service -staus-all显示所有服务状态
ss -atr | grep ssh
ss -ant | grep 22  (选项同windows的netstat -an)
   -n, --numeric
	-t --tcp
	-a --all
	-r --resolve
	-p, --processes

开机自动登录，不用输入用户名和密码,
		修改输入密码 yast2->security and users标签->security and users组下的user and group management->选用户->expert options->login settings->取消 auto login

有防火墙的


#chkconfig --list  
 提示用 systemctl list-unit-files 有 firewalld.service 是enabled
systemctl stop firewalld   (要不然ssh连不上) 或者 nft flush ruleset ,不是老的 iptables虽然命令还在
systemctl disable firewalld

查看开机是否启动  systemctl is-enabled sshd
查看开机自启动的程序 ls /etc/systemd/system/multi-user.target.wants/

journalctl 是查看所有systemctl按理服务的日志
journalctl -b 只看本次启动的

yast 显示界面  停止防火墙(有图形界面来停止,启动时是否停止)

firewall-cmd --reload   重新加载 FirewallD 配置 

菜单 展开 点 firewall 会提示安装 firewall-config 包 openSUSE-leap 15 DVD 中没有
     http://download.opensuse.org/distribution/leap/15.0/repo/oss/noarch/ 中有 firewall-config
	 界面默认Zone标签 public组中 复选中ssh 就打开了远程接入
sudo firewall-cmd --zone=public --add-service=ssh --permanent

	
systemctl start  sshd
systemctl enabled sshd

openSUSE-leap 15  光驱是/dev/sr0 默认挂载到 /run/media/<user> 目录下
看 /etc/hosts.deny 中的的注释  man tcpd ,man hosts_access

-----------------
systemctl restart network.service

SuSE Linux配置网关
/etc/sysconfig/network/routes #  只有在route add default gw 192.168.1.1 ,可能才会自动出现这个文件
	加入default 192.168.1.1 - -    ##,第一列目标,第三列netmask ,第四列 网卡,
route -n 可以看,netstat -rn 相同 (前三列,和最后一列 是network/routes 文件结构)

可以route add default gw 192.168.1.1 netmask 255.255.255.0
 ifroute-<config> 和routes 文件 内容
	[default]  10.10.0.0/16   #is valid
	”－“ 表示忽略

/etc/sysconfig/network/ifcfg-[网络类型]/-id-[网卡mac地址] ,#如ifcfg-wlan-id-00:16:6f:25:73:1f

nmtui 工具可以设置静态IP，但没有修改上面文件
systemctl enable NetworkManager
systemctl start NetworkManager

/etc/resolv.conf 中提示 文件是生成的根据配置文件  /etc/sysconfig/network/config file:
#     NETCONFIG_DNS_STATIC_SEARCHLIST
#     NETCONFIG_DNS_STATIC_SERVERS    #生成 nameserver的值
#     NETCONFIG_DNS_FORWARDER
# or disable DNS configuration updates via netconfig by setting:
#     NETCONFIG_DNS_POLICY=''
调用 netconfig update 来更新配置


查看所有路由表。
ip r
ip rout
ip route list
ip route show
ip link show 
ip link set eth0 address aa:aa:aa:aa:aa:aa
//改MAC ,要先关闭网卡

路由表的查看
    ip route list table table_number
    ip route list table table_name
路由表序号和表名的对应关系在 /etc/iproute2/rt_tables 文件中
ip route add table 3 via 10.0.0.1 dev ethX 

示例
ip route   del default dev wlan0
ip route   del default dev p4p2
ip route add default via 10.31.192.1 dev wlan0
ip route replace default via 10.31.192.1 dev wlan0
ip route del 10.91.0.0/16
ip route add 10.91.0.0/16 via 10.91.3.1 dev p4p2

ip route save > route.bak   保存为二进制文件 
ip route restore < route.bak

ip address show   (无ifconfig,net-tools 不再维护, 我们强烈建议以 ip 命令(iproute2包中)代替 ifconfig)
address  可缩写为addr或a
ip a
ip a s
ip a show p4p2 (openSUSE-leap-15.1默认网卡叫写p4p2)
 
ip addr change 10.91.3.19/26 dev p4p2   修改IP

禁用 p4p2 
ip link set dev p4p2 down

激活 p4p2 
ip link set dev p4p2 up




--netns

ip 可操作的对像，如 netns 网络名称空间(network namespace)
ip netns help

ip netns list
ip netns ls

ip netns add r1

ip netns add r2
#ip netns delete r2

ip netns exec r1 ip a s  #exec进入网络空间,默认只有一个 lo 网卡,是DOWN的状态
#也可 ip netns exec r1 bash 提示符没变化 再 ip link 再 exit
#设置提示符
ip netns exec r1 bash --rcfile <(echo "PS1=\"rc1>\"") 
    --rcfile 表示初始化命令,来代替	~/.bashrc  文件
	进入后可以通过PS1="rc11>"来修改提示符
ip netns exec r1 ip link set lo up

ip link  add name veth1.1 type veth peer name veth1.2  建两个网卡做连接
#ip link add      veth2.1 type veth peer name veth2.2  #可以没有第一个name
#ip link  delete veth2.1
 
ip link show/list  显示的名为 veth1.2@veth1.1 ,veth1.1@veth1.2 (表示从哪个网卡到哪个网卡)
#ip link 

把一个网络设置称动名称空间中
ip link set dev veth1.2 netns r1 (原来本机上的就消失了)
ip netns exec r1 ip a s 就有了新的网卡
ip netns exec r1 ip link set dev veth1.2 name eth0 对设备改名
ip netns exec r1 ip a s 显示修改后为  eth0@ifX  (X为数字)

设置IP
ip netns exec r1  ip addr change 10.0.0.1/24 dev eth0

激活
ip netns exec r1  ip link set dev eth0 up  看显示 < 中有 UP > ,state为 LOWERLAYERDOWN 必须另一个网卡也要up

 
再另一个名称空间做相同事，两个空间可以ping通
ip link set dev veth1.1 netns r2
ip netns exec r2 ip link set dev veth1.1 name eth0  
ip netns exec r2  ip addr add dev  eth0  10.0.0.2/24  #修改地址方式2
ip netns exec r2  ip link set dev eth0 up

两个网就通了
ip netns exec r2  ping -c 3 10.0.0.1  
ip netns exec r1  ping -c 3 10.0.0.2 

#ip netns delete r1
#ip netns delete r2
-- 使用 网桥 通信 (可多个网络名称空间)
ip link add mybrg type bridge
ip link set mybrg up

ip link  add   vnet1.1 type veth peer name vnet1.2

ip netns add myns1


ip link set dev vnet1.1 netns myns1 
ip link set dev vnet1.2 master mybrg
ip a s 显示 vnet1.2 网卡有 master mybrg 
bridge link 来查看

ip netns exec myns1  ip addr add dev  vnet1.1  10.0.0.1/24   
ip netns exec myns1 ip link set vnet1.1   up 
ip link set vnet1.2  up 
 
 
另一方 相同方式 接入网桥
ip netns add myns2
ip link  add   vnet2.1 type veth peer name vnet2.2
ip link set dev vnet2.1 netns myns2
ip link set dev vnet2.2 master mybrg

ip netns exec myns2  ip addr add dev  vnet2.1  10.0.0.2/24   
ip netns exec myns2 ip link set vnet2.1   up 
ip link set vnet2.2  up 

两个网就可以通(使用桥)
ip netns exec myns2 ping -c 3 10.0.0.1  
ip netns exec myns1 ping -c 3 10.0.0.2 

#ip link delete mybrg
#ip netns delete  myns1
#ip netns delete  myns2

--

 (无 netstat,net-tools 不再维护)
ss 命令（Socket Statistics）
ss -atr | grep ssh  
-a all
-t tcp
-r resolve hostname
	
bridge

iwlist、iwconfig(只显示无线网卡)
这两个命令需要你有无线网卡才能够进行使用


ifstat 只可显示一次 网络使用，只是刚网卡级 
iftop 要单独安装(zypper install iftop)  				iftop -i  wlan0 		不能知道是哪个进程
nload 要单独安装(zypper install nload) 				nload wlan0  				也是不能知道是哪个进程
iptraf-ng 要单独安装(zypper install iptraf-ng)  	iptraf-ng -g 				也是不能知道是哪个进程
vnstat 要单独安装(zypper install vnstat)  			vnstat -i wlan0 -l   也是不能知道是哪个进程

nethogs 要单独安装(zypper install nethogs)  			nethogs wlan0				可以看到使用网络的进程及大小  
交互式 	m : 修改单位
    	  r  sort by 'received'
       s  sort by 'sent'


ps aux 或 ps -aux 有%CPU,%MEM的使用


nmcli 是 network manager 工具
默认没有启用
yast 命令->System  			-> Network Settings -> Global Options标签-> Network Setup Method->下拉选择NetworkManager(gnome桌面要nm-applet,即NetworkManager-applet包)
yast2命令->Network Services ->System 组下的 Network Settings

nmcli dev status


SUSE 修改grub 让 windows 默认启动
改/boot/grub/menu.lst  ###中有 default 后加一数字 从0开始是每一个

dhclient eth0  #DHCP网络

lynx  和links都没有

文件浏览器可以ctrl + 拖动滑轮来放大，缩小 图标

SUSE有ReiserFS 文件系统,也可以用EXT3

cat /etc/issue 显示操作系统
echo password|passwd --stdin oracle  改密码


vim -u vimrc文件
SUSE vim 文档路径 /usr/share/vim/vim64/doc/starting.txt
	/etc/vimrc文件，中把" syntax on 前的" 去掉

进入 Ex 模式. 输入 "visua" 以回到正常模式



===================SUSE-11-Desktop 

Planner项目管理，Gnome-Sound-recoder录音机，Banshee音乐播放器，MoonShine WMV播放器 
Dia图表(简单的Viso),GNU Cash财物管理，InkScape矢量图软件(可保存为illustrator ai格式)，Gftp

SUSE 11的桌面特效 系统->观感->Desktop effect->特效标签中可以取消 ［启动震颤］，也可把切换方式改成Cylinder,预设中的Advance来恢复正方体,［切换工具］里选择是为alter +tab 用的，在桌面标签－＞可以使用［桌面立方体］和［桌面墙壁］,
 
===================OpenSuse
--------openSUSE 在win7  硬盘安装
openSUSE也可以用DeamonTool加载ISO,双击运行openSUSE12_2_LOCAL.exe,就不用使用grub4dos了,

opensuse 在硬盘安装时 输入入正确的/suse-d.iso(ISO文件可以放在D盘中使用的) 提示repository not found.
使用ALT+F3查看信息，发现其实是安装脚本中的一句mount出错了，因为找不到/bin/mount。
在/usr/bin/目录下。拷贝mount到/bin目录下

openSUSE-<version>-DVD-x86_64.iso也放在C盘下修改名为openSUSE.iso,
openSUSE-<version>-DVD-x86_64.iso\boot\x86_64\loader 目录下的文件linux,initrd  解压放在C:\openSUSE_boot目录下
grub4dos-0.4.4中的grldr.mbr,grldr,menu.lst文件入在C盘中,C:\下
	
	C盘是NTFS分区

在menu.lst尾加入

title Install openSUSE
find --set-root /openSUSE.iso
kernel /openSUSE_boot/linux	        devfs=mount,dall ramdisk_size=65536  lang=en splash=silent vga=0x31A
initrd /openSUSE_boot/initrd


或者是
title Install openSUSE
kernel (hd0,6)/openSUSE_boot/linux
initrd (hd0,6)/openSUSE_boot/initrd

find /openSUSE_boot/initrd 知道是(hd0,?)



bcdedit /create /d "Grub4Dos" /application bootsector   此时会得到一个字符串，下面用id代替上一命令得到的字符串
bcdedit /set {id} device partition=C:
bcdedit /set {id} path \grldr.mbr				
bcdedit /displayorder {id} /addlast

 

bcdedit 显示所有启动项和对应{id}字符串
后可以 bcdedit /delete xxx-xxxx-xxx


提示输入时,输入路径一定要加 /  ，如/openSUSE-12.1.iso     也可以是把ISO文件解压 ,

 
还要用EasyBCD创建windows启动项,选择左边的Add New Entry，右边选择NeoGrub，点击Install 会自动添加neogrub 启动项
点击“Configure”，会打开NeoGrub 的menu.lst 文件，
把C:\menu.lst 文件里面的内容复制到NeoGrub 的menu.lst 文件中
“Save Settings"
重启后会自动出现卸载


C:\menu.lst的内容为
hiddenmenu 
timeout 0 
title openSUSE <version> installer (LOCAL) 
find --set-root /openSUSE_hitme.txt
kernel /openSUSE/linux devfs=mount,dall ramdisk_size=65536  lang=en splash=silent vga=0x31A
initrd /openSUSE/initrd


可能出现不能识别的31a,等一会,就会出现界面,
安装时Booting中有红色提示 ,boot 什么不是在 135G 下面,如果BOIS只持XX可能会报XX错误,忽略它

显示安装界面时提示 0x31a无效 ,安装后把kernel vga=0x31a 修改为vag=0x318 (看提示是318=1024*768*32)


bcdedit时提示：“无法打开启动配置数据存储，系统找不到指定的文件”
因我装了Linux，用PartitionManager.9.0 或者 计算机管理->磁盘 只需将win7创建的100M主分区(不是C盘)设置为活动分区即可(linux的grub引导界面没有了)
1. 在"运行"里，输入"cmd"; 
2. 接着输入"diskpart";
3. 接着输入"list disk";
4. 接着输入"select disk 0"比如我们现在要将第1硬盘的第1分区做为活动的;
5. 接着输入"list partition";
6. 接着输入"select partition 1";
7. 最后输入"active"。 

linux的grub引导界面没有了
----grub2
光盘启动->选择rescue system	
fdisk -l
parted 再 p

swap 分区不需要挂载。要先挂在根分区，然后把其他的分区相应的挂在到根分区下
#示例 
mount /dev/sda5 /mnt
mount /dev/sda7 /mnt/boot
mount --bind /dev /mnt/dev
mount --bind /proc /mnt/proc 
mount --bind /sys /mnt/sys
chroot /mnt

然后是重装grub2
update-bootloader --add
update-bootloader --refresh
cp /boot/grub2/grub.cfg /boot/grub2/grub.cfg.bak
grub2-mkconfig -o /boot/grub2/grub.cfg  ##正常是可以发现windows的,是使用os-prober命令来检查是否有windows
grub2-install /dev/sda   ###注意是grub2-install

exit
reboot

分区有一个UUID,使用 　ls -l /dev/disk/by-uuid 查看

/etc/grub.d/40_custom 加入
 
menuentry "Windows 7" {
insmod part_msdos
insmod ntfs
set root='(hd0,msdos2)'
search --no-floppy --fs-uuid --set 3038D76238D7261E
chainloader +1
}


报 Invalid EFI file path ??
可能要yast boot loader 修改Grub2 for EFI到Grub2 ,也没用,
安装linux时/boot/efi 安装时有提示要用vfat,分区ID默认为EFI系统分区，修改为Liux，也不行,EFI是安装在BOIS中的，如在BOIS中删除，会进入grub rescue模式,再次安装linux不要选择EFI(对MBR分区表)即可

fdisk -l 显示的中 Disklabel type: dos 表示是MBR式硬盘 
parted -l 显示的中 Partition Table: msdos 表示是MBR式硬盘 


menuentry "Windows loader" {
insmod ntfs
set root=(hd0,2)
drivemap -s (hd0) ${root}
chainloader +1
}
menuentry "Windows 7 search" {
  insmod ntfs
  search --set -f /bootmgr               
  chainloader +1
}
##search -f /bootmgr 返回 hd0,msdos2 ，在windows 7 的boot分区中有一个bootmgr 的文件
有项,但不能引导???
--如果是LVM的做法

---解决方法 使用grub4dos进入CommandLine下
1. grub>find /grub/stage1 结果是hd0,x
2. grub>root (hd0,x)
3. grub>setup (hd0)      
###要小心,如果多次失败很有可能硬盘分区表损坏,VMware测试时
##命令提示成功后,结果只进入了grub>  不能引导linux????(可能grub4dos是grub1.0而系统是grub2.0)
如要引导 windows 
grub>rootnoverify (hd0,0)
grub>chainloader +1
grub>boot

光盘启动->选择rescue system	->用户名使用root 执行
###### grub-install /dev/sda 提示使用 yast2 bootloader
#####进入 grub 模式(linux rescue)	grub>setup (hd0,0);
--------上openSUSE  在win7  硬盘安装

---单用户模式
在grub2引导界面 按e进入编辑模式，在linuxefi最后面的增加 init=/bin/bash 按f10启动
进入root登录后的#提示符，但/目录是只读方式挂载的，不能修改root密码，执行 mount -o remount,rw / 后再修改root密码
没有找到命令重启机器方式(rebbot,shutdown命令都不行，ctrl+d后caps lock键一直闪)

---------openSUSE 使用
没有iostat命令,sar,要安装sysstat包,
看磁盘使用 pidstat -d 1 100

使用yast2安装软件包,会自动解决依赖关系,
菜单configuraitons->repositories->Add->local ISO image 再选择openSUSE-12.1x64.iso或者 Local Directory->输入rpm包名,像gucharmap-devel,
		可设置prioriy 为1 , keep Download package(restart  yast2 effect)
(就可知道哪些是DVD中安装的可做命令备份，哪些是从网上下的做文件备份)
可能要取消Active其它在线repository，它会自动也把依赖的包选择上

yast2->date and time 取消 复选  hardware clock set to UTC

SuSE中在/etc/init.d/boot.local文件中添加命令  ,Red Hat系统的对应文件是/etc/rc.d/rc.local。

  

mount FAT32分区时,中文文件名显示??
mount -t vfat -o iocharset=utf8 /dev/sda7 /media/F/

zypper search gconf-editor
cnf gconf-editor	#  command will display need install gconf-editor	
zypper install gconf-editor #
rpm -ivh gconf-editor-3.0.0-5.1.2.x86_64.rpm
cnf 和 zypper /etc/zypp/repos.d/xx.repo(类似于yum)命令
zypper lr  查看列出库
zypper lr -p  列出仓库优先级
zypper lr -u  列出仓库的URI
zypper lr <ID> 有显示keep packages的值 On/Off ,Enabled 的值: Yes/No  

zypper pd	 列出所有可用的产品
zypper in sqlite*  (install)
zypper rm sqlite2	 删除软件包

想把安装后的软件，卸载时也删除只有该软件依赖的包
zypper xxx  ??



zypper info kubernetes1.20-kubeadm 



zypper removerepo snappy 
zypper addrepo --refresh https://download.opensuse.org/repositories/system:/snappy/openSUSE_Leap_15.1/ snappy
    生成 /etc/zypp/repos.d/snappy.repo 文件
加  --refresh 表示自动刷新仓库
zypper ar https://download.opensuse.org/repositories/filesystems:/ceph/openSUSE_Leap_15.1/filesystems:ceph.repo
ar=addrepo 生成文件 /etc/zypp/repos.d/filesystems_ceph.repo  

zypper ar -f /mnt/iso dvd  (-f --refresh)

zypper mr  -d  --all
zypper mr  -e  dvd
(-d = disable,-e == enable)
 

手动升级仓库 （dup=dist-upgrade）
zypper dup --from snappy 

zypper install -y mariadb\*   可通配安装

/etc/zypp/zypp.conf
    solver.cleandepsOnRemove = false 改为true (不会立即生效)
    默认下载的缓存目录为 /var/cache/zypp/packages/<name>/ 就可以找到下载的文件
/etc/zypp/repos.d/xxx.repo 中都是 keeppackages=0 修改为１就会保留,测试成功
也可 yast ->configuration->repository 仓库选中keep download packages但要重启yast才生效



/etc/init.d/boot.local文件中添加命令(openSUSE-13.2不用了)
echo OFF >/sys/kernel/debug/vgaswitcheroo/switch

 
-------------fcitx 输入法 

sudo zypper install fcitx-table-cn-wubi-pinyin

 
Free Chinese Input Tool for X  
输入文字提示背界是灰色，文字颜色

openSUSE-leap-15.2 DVD 带部分rpm

start->fcitx  启动   
	ps -ef | grep fcitx 
		有fcitx，fcitx-dbus-watcher ，dbus-daemon --config-file /usr/share/fcitx/dbus/daemon.conf 进程	
	
	就可使用 start -> fcitx configuration

start ->fcitx configuration  就有输入法可以选择了,就可以用了,当前语言在中文还是英文都可用
start ->fcitx configuration->右下角的键盘按钮 -> add Chinese (取消复选框Only show current language)
start ->fcitx configuration-> input method ->  这里就是切换输入法是有几个

(/etc/sysconfig/language 设置 INPUT_METHOD="fcitx"  ,logoff也没用  有文件/etc/X11/xim.d/fcitx )

/etc/profile 仅限于传统的X11  /etc/environment (说明是被 pam_env 模块解析的)设置变量
（下面的配置放~/.bashrc文件中，fcitx在xfce桌面上也是生效的）

export XMODIFIERS=@im=fcitx
export QT_IM_MODULE=fcitx
export GTK_IM_MODULE=fcitx 
export INPUT_METHOD="fcitx" 

注销再登录就可以用了

ctrl+space来打开输入法 ，ctrl+shift 切换输入法,会有弹出的提示当前是什么输入法
速度比ibus快很多,中文输入一半时就可按左shift打入英文 比ibus方便
(如已经安装ibus,再安装fcitx,在komoedit中只可用ibus,textedit中只可用fcitx)

----如fcitx和ibus一起安装下面可不做
Settings->Yast2 moudle ->System组中language ,main language 选择 Simplify chinese 会安装一些rpm
	自动安装ibus-table-chinese-wubi及很多其它输入法,firefox,libreoffice,gnome界面全变中文（可以再修改回来,在安装删除包时可abort）
komodo edit也可使用fcitx了,没有不能复制问题 
Settings->Regon & Language -> Input Source ->  + add a chinese 就可以win+space切换(但这个只对ibus有用)


##/etc/sysconfig/language  文件(有注释提示 /etc/X11/xim.d/) 
# export LANG=en_US.UTF-8

-------------ibus输入法  支持日文anthy,韩文hangul
拼音是用python3写的，输入文字背界是黑色，文字白色

在GTK3中会出现右上角的工具栏中

openSUSE-15.1 默认安装一些包 默认安装后就有  Setting -> ibus config


还要安装五笔和拼音 openSUSE-leap-15.1 DVD中带

rpm -ivh ibus-1.5.19-lp151.1.2.x86_64.rpm ibus-table-1.9.21-lp151.1.1.x86_64.rpm ibus-table-1.9.21-lp151.1.1.x86_64.rpm 
 ../noarch/ibus-table-chinese-wubi-jidian-1.8.3~pre.1531454400.f1f6a33-lp151.1.3.noarch.rpm

rpm -ivh ibus-pinyin-1.5.0-lp151.3.5.x86_64.rpm libpyzy-1_0-0-1.0git20120805-lp151.3.3.x86_64.rpm opencc-1.0.5-lp151.4.4.x86_64.rpm libopencc2-1.0.5-lp151.4.4.x86_64.rpm opencc-data-1.0.5-lp151.4.4.x86_64.rpm ../noarch/pyzy-db-android-1.0git20120805-lp151.3.3.noarch.rpm  ../noarch/pyzy-db-open-phrase-1.0git20120805-lp151.3.3.noarch.rpm sqlite3-3.28.0-lp151.1.1.x86_64.rpm ../noarch/python3-pyxdg-0.25-lp151.2.1.noarch.rpm 

Settings->Regon & Language -> Input Source ->  + add a chinese -> 就会有安装的极点五笔和拼音 (如没有要先确保ibus配置中有，安装rpm后再注销重登录 或者用 killall ibus-daemon )
						->Add 增加,删除输入法在右上角的栏才有效果, 就可以win+space切换(但这个只对ibus有用)

win(super) +space 切换输入法 同win10 , 设置 -> 设备 -> 键盘 -> 打字 -> 切换至下一输入法
左shift(右shift不行) 可切换中英文,但如中文输入一半就没用了,esc或者全删才行,必须在没有一个中文输入时才有用,不方便

----如fcitx和ibus一起安装下面可不做
ibus配置
进入面板的ibus preferences->Input Method->Add->下拉选择chinese（如没有安装rpm后再注销重登录 或者用 killall ibus-daemon）->Pinyin和Wubi-jidian

默认就已经有环境变量设置了
env | grep IM
QT_IM_MODULE=ibus 

env | grep XMODI
XMODIFIERS=@im=ibus

/etc/X11/xim 中有说明 变量INPUT_METHOD 在  /etc/sysconfig/language 文件 或者  ~/.i18n 
/etc/X11/xim.d/ibus   

killall ibus-daemon           in ibus-config can show new  input method ,
ibus-daemon -d

Settings->Yast2 moudle ->language ,main language 选择 chinese 会安装很多输入法，这个影响gnome显示语言,再选回english会卸载,还要重新安装ibus-tables

#有提示重启， 有说明修改 /etc/sysconfig/language  文件   

/etc/profile (openSUSE-leap-15不修改也可的,有时不修改也没用)
				export QT_IM_SWITCHER=imsw-multi
				export XMODIFIERS=@im=ibus
				export GTK_IM_MODULE=ibus
				export QT_IM_MODULE=ibus
-------ibus 在 xfce 4 桌面下
打开ibus设置会提示启动ibus进程，还会提示下面放在 ~/.bashrc 文件中
export XMODIFIERS=@im=ibus
export GTK_IM_MODULE=ibus
export QT_IM_MODULE=ibus
使用速度比在gnome 3下快多了，爽
				
-------------scim输入法 openSUSE-leap-15没有这个,openSUS官方说有scim不维护了
支持日文ja,韩文ko
默认显示在右下角浮动的输入法栏
GTK3的Activies搜索中按backspce变多黑块 ??? 

/etc/profile

export LANG=en_US.UTF-8   （必须和gnome->Settings->Region & language -> Language设置一致,遇到过gnome-terminal打不开的情况） 
export QT_IM_SWITCHER=imsw-multi

export XMODIFIERS=@im=SCIM
export QT_IM_MODULE=scim  
export GTK_IM_MODULE=scim:xim

 
env | grep im 来查看

自带安装 gtk3-immodule-xim,scim-1.4 软件包后,就可以在gedit,vim 右击->input method 
下载安装 scim-pinyin, scim-tables,scim-tables-zh
再gedit中生效,但在firefox,libreOffice无效,还要安装scim-bridge,scim-bridge-gtk   

重启生效  ctrl+space切换中英文 ,ctrl+shift切换中文

---
 
GTK3的Activies 搜索中输入中文没有弹出提示 ??? 
 
/etc/sysconfig/language 中修改 INPUT_METHOD=""为空时
(Gedit中一直使用的是fcitx ,而在Firefox和GTK面板使用的是环境变量的配置 )

进入面板的 fcitx settings->可以删不用的输入法, 无用的rpm

/etc/profile
export QT_IM_SWITCHER=imsw-multi

export XMODIFIERS=@im=fcitx
export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx

---
（注销后无线网络，就不对了，要按fn键禁用再启用）

/etc/vfstab 中
~/Documents/openSUSE-12.2.iso       /mnt/iso  iso9660 	ro,loop 					0 0
/dev/sda8 	 						/mnt/fat  vfat		uid=zh,iocharset=utf8  0 0

---win7 iso
直接用  mount -t iso9660 -o ro,loop /tmp/en_windows_7_ultimate_with_sp1_x64_dvd_u_677332.iso  /mnt/win7/  目录内容不对

losetup   显示最近用的是 /dev/loop0    
losetup  /dev/loop1  /tmp/en_windows_7_ultimate_with_sp1_x64_dvd_u_677332.iso
mount /dev/loop1 /mnt/win7/ 内容就对了


----Grub2
view /boot/grub2/grub.cfg  是用grub2-mkconfig工具通过/etc/grub.d和 /etc/default/grub的设置
view  /etc/sysconfig/bootloader  配置使用grub2


openSUSE-leap-15 有Boot Loader界面工具
修改默认选中的引导系统
vi /etc/default/grub
修改GRUB_DEFAULT＝saved为GRUB_DEFAULT＝2,按从上到下顺序从0开始 ,
后使用 grub2-mkconfig -o /boot/grub2/grub.cfg ,看menuentry项

在选择项目
按c 进入新的
按e 编译
----
mount -t ntfs-3g /dev/sdb1 /mnt/usb
自带ntfs-3g, mount命令查看 NTFS格式显示为fuseblk类型,自动挂载也是显示fuseblk,


chkconfig 也可在yast中有System Servcies配置

Ctrl+L => 输入 ' smb://[IP地址] '

	
===================要手工下载安装的软件  
  
unar Record.zip  可以成功解决zip包中是windows的GBK编码的文件名  默认是和unzip生成相同的目录
unar -e GBK -o Record2019-01-24__16 Record2019-01-24__16.zip 


====node.js源码安装
./configure
make
make install


---------openSUSE-12.3 SMB Client

smbclient -L [主机]  -U user%pass  ##显示列表,以$结尾的在windows中看不到的

smbclient //host/share  -U user%pass  ##后像ftp工具 help,
	可ls,
	get xxx 
	mget xxx #可以目录但每个文件都要提示
	put 本机文件 (远程的重命名)   ##如不加第二参数,和第一参数一样 
	rm xxx ,
	!pwd 	##使用一机命令,
	lcd  xxx 	##切换本机目录

有时要"/"要转义,也可不转
smbclient \/\/192.168.253.1\/share -U administrator%pass   ,用户必须要设置密码才行


mount -t cifs -o username=xxx,password=xxx //IP/temp /mnt 
//Common Internet File Systemcifs(cifs)来代替原来的smbfs  
mount -t cifs -o username=xxx,password=xxx  \/\/192.168.253.1\/share /mnt/smb   
openSUSE-12.3 报错????
 
---------openSUSE-12.2 NFS
防火墙关闭测试
要安装nfs-doc,nfs-kernel-server,yast2-conf-server
su - root

/etc/exports 配置文件格式
/本机要共享的目录		可仿问的客户机IP或*(ro,rw)
/opt/exports            127.0.0.1(rw)

先启动rpcbind,再启动nfs
systemctl start  rpcbind.service 
/etc/init.d/nfs start 是客户端 , 有nfs进程

cat /var/log/messages 有日志，如新建用户不能登录也有日志，原因为home目录没有创建，建立用户没-m选项 (openSUSE-leap-15没有这个文件错误进入不了系统提示用  journalctl -xb )
dmesg 作用不大

cat /etc/services | grep rpcbind 查到是111 
cat /etc/services | grep nfs 查到是2049

rpcinfo 查看信息

showmount -a localhost  ( --all)
showmount -e localhost  (--export) 查看(远程)提供的服务

mount -t nfs 192.168.0.1:/opt/exports  /mnt/localshare 把远端的目录挂到本地
也可写入 /etc/fstab文件

yast中有nfsclient的界面配置，可测试到服务端提供哪些目录共享 , 会把配置写到/etc/fstab文件中
mount.nfs
-----------取消自动登录
Yast2 -> Security and User -> User and Group  Management -> Expert Options -> Login Settings 取消 Auto login

----------snap 格式安装包
 (Canonical　支持Ubuntu的)
https://snapcraft.io/    A universal app store for Linux

支持很多linux, Ubuntu,Fedora,CentOS,Redhat(目前没有SUSE),openSUSE
https://snapcraft.io/docs/installing-snapd

从 Snap Store 下载，地址是 https://snapcraft.io/store

--openSUSE snap
zypper removerepo snappy  
zypper addrepo --refresh https://download.opensuse.org/repositories/system:/snappy/openSUSE_Leap_15.2 snappy
	
zypper install snapd  安装下面 
    squashfs-4.3-lp151.2.3.x86_64.rpm		openSUSE-leap-15.1 DVD 中就有的
    snapd-2.39.1-lp151.3.1.x86_64.rpm

sudo systemctl enable snapd
sudo systemctl start snapd
 

--CentOS 7.6+ 当安装epel-release 就可
yum install snapd
systemctl enable --now snapd.socket
ln -s /var/lib/snapd/snap /snap
--
 
snap find  <app_name> 
snap install  <app_name> 
snap version
snap info <appname>



snap install  --channel=stable <appname> 
--channel 默认是 stable  
或者用 
snap install  -stable <appname> 

--stable, --candidate, --beta 和 --edge 能替代 --channel=<risk-level>

snap list
snap list -all <appname>
snap switch --channel=stable <appname>  不会更新，如想即切换又更新用 snap refresh --channel=stable <appname>
sudo snap disable <appname>
sudo snap enable <appname>
sudo snap remove <appname>

/snap 目录
/snap/bin                   - Symlinks to snap applications
/snap/<snapname>/<revision> - Mountpoint for snap content  
/snap/<snapname>/current    - Symlink to current revision, if enabled

export PATH=$PATH:/snap/bin

得到应用的配置,可用set修改配置,如监听端口等
snap get <snap name>

snap services 列出所有的服务

snap services <snap name> 显示服务状态
snap restart <snap name> 重启服务,名后的.daemon可有，可无
snap stop <snap name>  
snap start <snap name>
snap start --enable <snap name> 开机启动
snap stop --disable <snap name> 禁止开机启动

snap logs <snap name> 查日志
snap logs <snap name> -f 查日志


若snap应用需要使用系统资源或其它应用程序提供的资源，需通过interfaces机制配置接口。interfaces接口分为两种，slot(服务提供者)和plug(服务使用者)。 
snap interfaces  查看系统上已经存在的plug和slot

snap interfaces <snapname> 查某个应用下有哪些 plug和slot

格式  snap connect <snap>:<plug interface> <snap>:<slot interface>
 slot 和   plug 必须连接相同的interface名
示例 snap connect ffmpeg:alsa :alsa  如:前没有值就是系统的,这里的alsa两个相同
相应的也有 disconnect 命令

全部可用的接口名 https://docs.snapcraft.io/supported-interfaces/7744

snap info --verbose <snapname> 可查confinement的级别，可为
	Strict   运行在完全隔离，不能仿问系统资源 
	Devmode  完全仿问系统资源 
	classic  和传统包一样仿问系统资源,防止滥用要手工同意

snap aliases 简写名>  查看简写名的全写名
snap unalias <简写名>  去除简写名
snap alias <简写名> <全名> 增加 简写名 
snap changes 查询 找到 status为doning的id号，如这里是2
snap abort 2


snap install redis-desktop-manager
snap install lxd

以下未试
snap info kubectl  显示版本 放在--channel参数 ,版本带 --classic
snap 安装指定版本
snap install kubectl  --channel=18.0/stable  --classic

snap install kubectl --classic
kubectl version --client

----------

----------snap 下载配置

----------snap 私服

----------构建snap包
可以使用snapcraft
$ sudo snap install snapcraft --classic

docker或才lxd来构建 

----------sdkman
	 managing parallel versions
	 
------------Xen 
官方目前最新版本 4.11.1 and 4.8.5 are available


对不支持虚拟化的CPU,Xen可以实现半虚拟化
半虚拟化安装要求只能用网络安装

支持虚拟化的CPU,可以实现全虚拟化

Linux 3.0以上支持Xen domain0 和 domainU(domU) 及各种优化
Redhat 6.0开始 收购了KVM的公司,后面Redhat不再支持Xen domain0了,如要用编译kernel-3.x版本,编译libvirt

Xen 的开发API(编程接口) 是 XL(4.2版本后), XAPI 不支持Qemu
于是又有了通用性的  libvirtd 可以支持Qemu,Xen,KVM


openSUSE-leap-15 DVD带的
rpm -ivh xen-libs-4.10.0_20-lp150.1.2.x86_64.rpm  libyajl2-2.1.0-lp150.2.4.x86_64.rpm

下载 rpm -ivh xen-4.10.0_20-lp150.1.2.x86_64.rpm
/boot/目录下就有 xen-4.10.gz -> xen-4.10.0_20-lp150.1.gz
				 xen-4.gz -> xen-4.10.0_20-lp150.1.gz
				  
下载 libvirt-daemon-xen-4.0.0-lp150.6.18.x86_64.rpm 其它的依赖DVD中有
		libvirt-daemon-driver-libxl-4.0.0-lp150.6.18.x86_64.rpm
	
	rpm -ivh ~/libvirt-daemon-xen-4.0.0-lp150.6.18.x86_64.rpm  ~/libvirt-daemon-driver-libxl-4.0.0-lp150.6.18.x86_64.rpm  ./libvirt-daemon-driver-interface-4.0.0-lp150.6.18.x86_64.rpm  ./libvirt-daemon-driver-network-4.0.0-lp150.6.18.x86_64.rpm  ./libvirt-daemon-driver-nodedev-4.0.0-lp150.6.18.x86_64.rpm   ./libvirt-daemon-driver-nwfilter-4.0.0-lp150.6.18.x86_64.rpm   ./libvirt-daemon-driver-secret-4.0.0-lp150.6.18.x86_64.rpm  ./libvirt-daemon-driver-storage-* ./radvd-2.17-lp150.3.4.x86_64.rpm  ./librbd1-13.0.2.1874+ge31585919b-lp150.1.2.x86_64.rpm ./libnetcontrol0-0.3.1-lp150.1.7.x86_64.rpm ./qemu-tools-2.11.1-lp150.6.7.x86_64.rpm  ./nfs-kernel-server-2.1.1-lp150.3.5.x86_64.rpm 
 
下载 xen-tools-4.10.0_20-lp150.1.2.x86_64.rpm 其它的依赖DVD中有
		grub2-x86_64-xen-2.02-lp150.12.8.x86_64.rpm
		
	rpm -ivh ~/xen-tools-4.10.0_20-lp150.1.2.x86_64.rpm ~/grub2-x86_64-xen-2.02-lp150.12.8.x86_64.rpm ../noarch/qemu-seabios-1.11.0-lp150.6.7.noarch.rpm ./qemu-x86-2.11.1-lp150.6.7.x86_64.rpm ./libSDL2-2_0-0-2.0.8-lp150.1.1.x86_64.rpm libfdt1-1.4.4-lp150.1.9.x86_64.rpm  librdmacm1-16.4-lp150.3.2.x86_64.rpm  libsnappy1-1.1.3-lp150.1.7.x86_64.rpm  libspice-server1-0.14.0-lp150.2.4.x86_64.rpm  ../noarch/qemu-ipxe-1.0.0-lp150.6.7.noarch.rpm  ../noarch/qemu-sgabios-8-lp150.6.7.noarch.rpm  ../noarch/qemu-vgabios-1.11.0-lp150.6.7.noarch.rpm  libvdeplug3-2.3.2+svn587-lp150.3.4.x86_64.rpm  libvirglrenderer0-0.6.0-lp150.2.4.x86_64.rpm 
	
	就有 xl , pygrub 命令

	
下载 xen-doc-html-4.10.0_20-lp150.1.2.x86_64.rpm 安装在	/usr/share/doc/packages/xen/html
	
查看/boot/grub2/grub.cfg 是有增加Xen配置项的  (启动时grub配置修改内核指向xen ,原来的vmlinuz和initrd 做为xen的module)
	multiboot       /boot/xen-4.10
	module  /boot/vmlinuz
	module  --nounzip   /boot/initrd
	
	而老的是
	linux   /boot/vmlinuz
	initrd  /boot/initrd
	
这个文件是修改/etc/grub.d/目录 和 /etc/default/grub文件的配置用 grub2-mkconfig -o /xx_grub.cfg生成的
有可能是 /etc/grub.d/20_linux_xen 


重新启动后选择xen启动项后刚开始的日志是(Xen),进入后有鼠标,但没有界面????,ip还是原来的IP,还要远程连接才能用
ls /proc/xen   有capabilities文件
/proc/xen/capabilities 内容为 control_d   说明成功 OK

xl list 有显示 Domain-0  ,State列的值的含义, man xl list有解释
   r - running
   b - blocked 
   p - paused
   s - shutdown
   c - crashed
xl help 看子命令
xl create  建虚拟机 
	xl create <配置文件名> -c 
	-c看控制台
xl destroy 模拟拔电源
xl shutdown
xl reboot
xl pause
xl unpause
xl console
	可用图形工具 virt-manager (见KVM)
	
做桥接网卡
	现在网卡模拟成交换机,工作在混杂模式下,虚拟一个网卡，把mac地址绑定到模拟交换机上
	虚拟机里的网卡连接模拟交换机,这样模拟交换机就可以仿问外网,就可以网络安装虚拟机

systemctl start libvirtd 后会创建虚拟机交换接口 , ip addr show 会多了一个网卡(测试没用???)


virsh 命令创建桥接设备
brctl 命令创建桥接设备

CentOs 系统下把/etc/network/ifcfg-eth0 目录下的文件做复制修改 创建桥接设备

/etc/xen/examples/ 有示例文件  xlexample.hvm  xlexample.pvlinux
PV (Para Virtualization 半虚拟化) 
HVM(全虚拟化,CPU的虚拟化)

在虚拟机中安装grub , pygrub

------------KVM (openSUSE-leap-15)

OpenStack,CloudStack都只是虚拟化管理工具,实现跨多个物理机
直接运行在硬件上的虚拟机叫Hypervisor
qemu 可以在x86机器上 模拟 IBM AIX ,·但会慢
KVM 集成到了linux 内核 (要求CPU支持虚拟化,要求64位系统） 
AndroidStudio  也提示安装KVM提速
 
openSUSE-leap-15 DVD下安装 virt-manager ( virt-manager 命令工具 依赖 libvirt)
rpm -ivh ../noarch/virt-manager-1.5.0-lp150.5.1.noarch.rpm ../noarch/virt-manager-common-1.5.0-lp150.5.1.noarch.rpm  ../noarch/virt-install-1.5.0-lp150.5.1.noarch.rpm typelib-1_0-AppIndicator3-0_1-12.10.1+bzr20170215-lp150.3.1.x86_64.rpm  typelib-1_0-GtkVnc-2_0-0.7.2-lp150.1.15.x86_64.rpm typelib-1_0-SpiceClientGlib-2_0-0.34-lp150.1.14.x86_64.rpm  typelib-1_0-SpiceClientGtk-3_0-0.34-lp150.1.14.x86_64.rpm typelib-1_0-Vte-2.91-0.50.2-lp150.4.2.x86_64.rpm  typelib-1_0-Libosinfo-1_0-1.1.0-lp150.1.9.x86_64.rpm typelib-1_0-LibvirtGLib-1_0-1.0.0-lp150.1.9.x86_64.rpm typelib-1_0-GVnc-1_0-0.7.2-lp150.1.15.x86_64.rpm libvirt-glib-1_0-0-1.0.0-lp150.1.9.x86_64.rpm  libvirt-libs-4.0.0-lp150.6.18.x86_64.rpm  libssh2-1-1.8.0-lp150.2.3.x86_64.rpm python3-libvirt-python-4.0.0-lp150.1.2.x86_64.rpm  python3-libxml2-python-2.9.7-lp150.1.7.x86_64.rpm ../noarch/python3-ipaddr-2.1.11-lp150.1.3.noarch.rpm libyajl2-2.1.0-lp150.2.4.x86_64.rpm 


openSUSE-leap-15 DVD下安装 libvirt-daemon , qemu
rpm -ivh libvirt-daemon-4.0.0-lp150.6.18.x86_64.rpm  numad-0.5.20130522-lp150.1.8.x86_64.rpm ../noarch/qemu-ovmf-x86_64-2017+git1510945757.b2662641d5-lp150.3.1.noarch.rpm qemu-2.11.1-lp150.6.7.x86_64.rpm



DVD 有
libvirt-daemon-qemu-4.0.0-lp150.6.18.x86_64.rpm

 
openSUSE-leap-15 DVD下安装  libvirt-client
	rpm -ivh libvirt-client-4.0.0-lp150.6.18.x86_64.rpm  gnutls-3.6.2-lp150.3.2.x86_64.rpm  libopts25-5.18.12-lp150.1.35.x86_64.rpm  libgnutls-dane0-3.6.2-lp150.3.2.x86_64.rpm  libunbound2-1.6.8-lp150.1.4.x86_64.rpm  unbound-anchor-1.6.8-lp150.1.4.x86_64.rpm  libfstrm0-0.3.2-lp150.1.3.x86_64.rpm 

就有 virsh 命令

openSUSE-leap-15 DVD下安装 virt-viewer (界面工具 )
	rpm -ivh virt-viewer-6.0-lp150.1.4.x86_64.rpm  libspice-controller0-0.34-lp150.1.14.x86_64.rpm


openSUSE-leap-15 DVD下安装 yast2-vm
	rpm -ivh yast2-vm-4.0.1-lp150.1.1.x86_64.rpm  (界面工具,放在yast2中了 )

	YaST2 -> Virtualization -> Install Hypervisor and Tools -> 复选  KVM server ,   KVM Tools 
	YaST2 -> Virtualization ->reload server configuration 会写防火墙设置 ，启动 libvirtd 服务
	YaST2 -> Virtualization ->create  virtual  machines for Xen and KVM 就会启动virt-manager 自动连接成功

openSUSE-leap-15 DVD
rpm -ivh	qemu-tools-2.11.1-lp150.6.7.x86_64.rpm 


zypper install libvirt-daemon-lxc (见 LXC )
zypper in -t pattern kvm_server

openSUSE-leap-15 DVD 中　
rpm -ivh kdump-0.8.16-lp150.11.1.x86_64.rpm libfdt1-1.4.4-lp150.1.9.x86_64.rpm librdmacm1-16.4-lp150.3.2.x86_64.rpm libSDL2-2_0-0-2.0.8-lp150.1.1.x86_64.rpm  libsnappy1-1.1.3-lp150.1.7.x86_64.rpm libspice-server1-0.14.0-lp150.2.4.x86_64.rpm libvdeplug3-2.3.2+svn587-lp150.3.4.x86_64.rpm libvirglrenderer0-0.6.0-lp150.2.4.x86_64.rpm libvirt-daemon-driver-qemu-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-qemu-4.0.0-lp150.6.18.x86_64.rpm lzop-1.04-lp150.1.3.x86_64.rpm  makedumpfile-1.6.3-lp150.5.1.x86_64.rpm  ovmf-2017+git1510945757.b2662641d5-lp150.3.1.x86_64.rpm  patterns-base-basesystem-20171206-lp150.14.1.x86_64.rpm  patterns-server-kvm_server-20180302-lp150.3.1.x86_64.rpm ../noarch/qemu-ipxe-1.0.0-lp150.6.7.noarch.rpm  ../noarch/qemu-seabios-1.11.0-lp150.6.7.noarch.rpm ../noarch/qemu-vgabios-1.11.0-lp150.6.7.noarch.rpm qemu-x86-2.11.1-lp150.6.7.x86_64.rpm  tftp-5.2-lp150.3.4.x86_64.rpm  vm-install-0.10.03-lp150.1.1.x86_64.rpm xinetd-2.3.15.3-lp150.3.1.x86_64.rpm  yast2-kdump-4.0.3-lp150.1.1.x86_64.rpm ../noarch/qemu-sgabios-8-lp150.6.7.noarch.rpm 

	
zypper in -t pattern kvm_tools  (kvm_tools -> kvm_server)

openSUSE-leap-15 DVD 中　
 rpm -ivh db48-utils-4.8.30-lp150.5.10.x86_64.rpm guestfs-data-1.38.0-lp150.2.4.x86_64.rpm jfsutils-1.1.15-lp150.1.7.x86_64.rpm  ldmtool-0.2.3-lp150.1.5.x86_64.rpm  libguestfs0-1.38.0-lp150.2.4.x86_64.rpm  libhivex0-1.3.14-lp150.1.11.x86_64.rpm libldm-1_0-0-0.2.3-lp150.1.5.x86_64.rpm  libvirt-daemon-config-network-4.0.0-lp150.6.18.x86_64.rpm patterns-server-kvm_tools-20180302-lp150.3.1.x86_64.rpm qemu-block-ssh-2.11.1-lp150.6.7.x86_64.rpm reiserfs-3.6.27-lp150.1.10.x86_64.rpm supermin-5.1.18-lp150.1.13.x86_64.rpm virt-v2v-1.38.0-lp150.2.4.x86_64.rpm xfsprogs-4.15.0-lp150.2.1.x86_64.rpm xmlstarlet-1.6.1-lp150.1.10.x86_64.rpm zerofree-1.0.4-lp150.1.8.x86_64.rpm 


UEFI support is provided by OVMF (Open Virtual Machine Firmware).即上面安装的 qemu-ovmf-x86_64

qemu-img -h 
支持格式最后有openStack的 qcow2 格式,
		有vmware的vmdk格式,
		Virtualbox的vdi格式
qemu-img  create -f qcow2   myfile.img 2G
	
 
systemctl start libvirtd
systemctl status libvirtd
注意 libvirtd  和 xendomains 不能同时运行
systemctl is-active xendomains


Mono  linux上运行C#
openVZ 每个虚拟机使用的内核共享的，如一个虚拟机down了，只关闭它的虚拟文件系统
wineHQ 虚拟windows库
VMware Horizon Client for (window/linux)



cnf brctl 提示 zypper install bridge-utils
brctl 命令建桥设置
brctl -h
brctl show 显示有几个桥设备
brctl addbr br0 增加网桥名为br0
brctl setfd br0 0  (fd=forward delay)

brctl delbr br0 删除桥
brctl addif     	<bridge> <device>	向桥上关联一个网卡
brctl addif br0 eth0

virsh  
virsh # help
virsh iface-bridge 命令建桥设置 会立即生效

virtinstall 命令行工具 功能同 界面工具  virt-manager
systemctl start libvirtd 后就可以用 virt-manager 连接上来
	安装的虚拟机位置/var/lib/libvirt/images/xx.img
virsh list
virsh uri 显示当前系统可用的连接接口
	
moosefs 小文件
GlusterFS  分布式文件系统 KVM 支持好
NFS
SheepDog


egrep  'vmx|svm' /proc/cpuinfo	
lsmod | grep kvm
/dev/kvm

openSUSE 界面中带lftp


PXE 使用UDP协议,不用验证,网络安装要求TFTP协议读安装源
同时装配多台服务器 ,安装系统、配置各种服务 
要求
1.主板主持网络引导，并设置BIOS中允许从Network或LAN启动
2.一台DHCP服务器为客户机分配地址
3.通过TFTP服务器提供引导镜像文件的下载

virt-mananger  选PXE网络安装系统,提示是iPXE是PXE的扩展版 支持HTTP协议

virt-manager建立的镜像默认在 /usr/lib/libvirt/images/xx.qcow2 位置 

KSM是Kernel Samepage Merging  允许合并同一个进程或不同进程之间内容相同的匿名页面(比Xen要好)
virtio 通用的 半虚拟化  KVM
vmware 的cpu 可以打开 virtual

modprobe kvm
modprobe kvm_intel
lsmode

KVM实时迁移 要求
  共享存储 如,iSCSI,NFS,GFS2
  存储必须挂载到相同的目录
  相同的CPU
  KVM 系统版本要相同
  时间要同步
  网络配置要一样
  

---------KVM  --未试记录
virt-install --version
virt-install --extra-args "ks=file:/my.ks"    
ks=kickstart

virsh --version
kvm --version  没有这个命令 ???
virsh list --all 
   error: failed to connect to the hypervisor
   error: <null> 没有连接驱动器可用 
 
virt-install -h

virt-install --conect qemu:///system --virt-type kvm --name myKvmOpenSUSE  --memory 512,maxmemory=1024 --vcpus 2,maxcpus=4, --network bridge=br0 --disk path=/tmp/images/myKvmOpenSUse.img,sparse --location http://127.0.0.1/ --extra-args="ks=http://127.0.0.1/myOpenSuse-leap15.cfg" --os-variant openSUSE-leap-15 

virt-install --conect qemu:///system --virt-type kvm --name myKvmWin7  --memory 512,maxmemory=1024 --vcpus 2,maxcpus=4, --network bridge=br0 --disk path=/tmp/images/myKvmWin7.img,sparse --location http://127.0.0.1/ --extra-args="ks=http://127.0.0.1/myWin7.cfg" --os-variant Win7 

/etc/libvirt/qemu 下有创建的虚拟机的.xml文件 
也可以用命令 virsh dumpxml win7 产生xml文件
virsh help
virsh create newDomain.xml #从xml创建一个域
vish console win7  (只能输入标签名，不能选，ctrl+]退出) 自动启动用 vish autostart 
virsh define 创建后不想启动

virsh shutdwon 正常关闭
virsh destroy 强行关闭
virsh undine  删除， 后要手工删除文件

virsh help
virsh help setvcpus  设置CPU数
virsh help setmem   设置内存大小
    --config
    --live
virsh setmem win7 500MB --live 开机时设置内存大小 
virsh vcpuinfo win7
virsh vcpucount win7
virsh setvcpus win7 1 --live 开机时设置VCPU数

virsh help domain
qemu-img  create -f raw   /tmp/myfile.img 512M
virsh attach-disk win7 /tmp/myfile.img vdb  #/dev/vdb 开机时增加硬盘
fdisk -l /dev/vdb[1-9]
virsh deattach-disk win7 vdb
virsh list 查看所有启动的虚拟机

virsh  cpu-stats
virsh  attach-interface 网卡
virsh  attach-device 除网卡和磁盘的
virsh  desc win7 --new-desc "my first KVM"s
virsh  desc win7

virsh  domdisplay win7  查看远程连接是 vnc://127.0.0.1:0
/etc/libvirt/qemu.conf 中打开#vnc_listen = "0.0.0.0"

virsh domid win7
virsh domname win7
virsh vncdisplay win7 显示VNC连接的IP和端口  127.0.0.1:0

Mac地址前三部分是固定的

命令方式安装虚拟机
virt-install --graphics none  --network bridge=br0,model=virtio,
--extra-args="ks=http://127.0.0.1/myOpenSuse-leap15.cfg console ttyS0 serial"  --console ttyS0 serial --video=cirrus

reset 重置终端

virsh help monitor

virsh domblklist win7
virsh domcontrol win7
virsh domiflist win7  网卡列表

virsh  help host
virsh hostname 显示hypervisor主机名
virsh nodeinfo
virsh help interface
virsh iface-list
virsh iface-dumpxml br0
virsh net-list

-----------LXC
https://linuxcontainers.org/lxc/introduction/

LXC和KVM虚拟化的区别是LXC不去模拟硬件,而是共享相同的内核命名空间,这一点上非常类似于chroot应用
C++ namespace

不是全虚拟化,Guest OS只能是linux,所有系统使用Host OS内核,安装依赖于Host OS 


rpm -ivh libnetcontrol0-0.3.1-lp150.1.7.x86_64.rpm librbd1-13.0.2.1874+ge31585919b-lp150.1.2.x86_64.rpm libvirt-daemon-driver-interface-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-network-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-nodedev-4.0.0-lp150.6.18.x86_64.rpm  libvirt-daemon-driver-nwfilter-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-secret-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-storage-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-storage-core-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-storage-disk-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-storage-iscsi-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-storage-logical-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-storage-mpath-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-storage-rbd-4.0.0-lp150.6.18.x86_64.rpm libvirt-daemon-driver-storage-scsi-4.0.0-lp150.6.18.x86_64.rpm nfs-kernel-server-2.1.1-lp150.3.5.x86_64.rpm radvd-2.17-lp150.3.4.x86_64.rpm 

zypper install lxc 提示共16个包要安装
zypper install libvirt-daemon-lxc 
		libvirt-daemon-driver-lxc libvirt-daemon-lxc

lxc-checkconfig
systemctl status lxc.service

ls /usr/share/lxc/templates 可用的LXC模板容器
lxc-create -n <container-name> -t <template> -f <configfile>
lxc-create -n myLXC -t fedora　　会在线下载,22不是最新 
lxc-create -n myLXC -t fedora -- --release 29  下载指定版本
lxc-create -n myLXC -t opensuse -- --release 42.2 目前只支持到这个版本,不支持15.0　官方已经有了　https://uk.images.linuxcontainers.org/
lxc-create -n myLXC -t centos -- --release 7 要yum 命令,oracle也是一样的
lxc-create -n myLXC -t ubuntu -- --release bionic  (18.04) 要 debootstrap 命令



Docker微容器Alpine (阿尔卑斯山的)
	
创建在　/var/lib/lxc　目录,容器的根文件系统放在 /var/lib/lxc/<容器名>/rootfs 目录下
创建过程中下载的软件包保存在 /var/cache/lxc 目录下面

/etc/lxc/default.conf


lxc-start -n myLXC -d 
lxc-ls --active
lxc-ls --fancy
lxc-console -n  myLXC

brctl addbr lxcbr0  
brctl addif lxcbr0 p4p2  (wlan0不行)  
 --wlan0不行
	zypper in tunctl
	brctl addbr br0 
	tunctl -t tap0 
	brctl addif br0 tap0 
	ip addr add 192.168.1.6/32 dev br0
	ip link set br0 up
		
	zypper in parprouted 没有???
	/usr/bin/parprouted wlan0 br0
	
	
-----------LXD
是基于LXC的增强 集成　OpenStack
　LXD 使用 Go　开发

要安装snapd后 
snap install lxd

建容器前先配置

lxd init
提示 Would you like to use LXD clustering? (yes/no) [default=no]:
默认storage pool使用 BTRFS
默认网桥名 lxdbr0

lxc launch ubuntu:18.04 first  起名叫first，会下载镜像
lxc list
lxc exec first -- /bin/bash
lxc file pull first/etc/hosts  从容器中取文件
lxc file push hosts first/tmp/ 向容器中放文件 
lxc stop first
lxc delete first

其它镜像 可用的 https://uk.images.linuxcontainers.org/
lxc launch images:centos/7/amd64 my-centos

如本地已经有镜像可以导入 (不知从哪个下载？？？，已经载的存在哪？？？)
lxc image import <file> --alias my-alias 

使用导入的镜像
lxc launch my-alias my-container


-----------启用 XDMCP 为XManager
vi  /etc/sysconfig/displaymanager 以下3个 由原来的 "no" 修改为 "yes"   
	DISPLAYMANAGER_REMOTE_ACCESS="yes" 
	DISPLAYMANAGER_ROOT_LOGIN_REMOTE="yes" 
	DISPLAYMANAGER_XSERVER_TCP_PORT_6000_OPEN="yes" 

vi /etc/gdm/custom.conf 
在 [xdmcp] 区增加

Enable=true
Port=177

增加一个security区
[security]  
DisallowTCP=false 
AllowRemoteRoot=true 


vi /etc/X11/xdm/xdm-config 注销掉这一行(45行上 在起点加以个!)
! DisplayManager.requestPort: 0 

重启xdm
systemctl  restart xdm  (openSUSE方式,没有177端口监听???? 测试不行)
/etc/init.d/xdm restart

openSUSE-leap-15.4  原DVD 自带 Xfce-4.16 桌面 
openSUSE-leap-15.1 Rescue LiveCD 默认是Xfce桌面 体积最小,也有Gnome,KDE桌面版本
	zypper install  -t pattern  xfce  (基于GTK的，ibus 输入法比gnome快很多,在登录时点设置图标下拉可以切换桌面,gnome有好多次在使用chrome查找时死机)

	类似的还有一个 LXQt
	
	zypper search gnome 显示的type列为pattern
	zypper search -t pattern gnome 	
	zypper install -t pattern gnome (-t type) 来安装gnome,如对于windows Sub Linux下
	
试过openSUSE-leap-15.1 gnome版本DISO文件 在linux下使用 dd命令方式写U盘可以成功启动，使用windows下的ultra写虽然可以引导但不能成功启动
	linux dd 写的也可在linux下浏览目录，但目录内容和windows ultraiso写的内容不一样

-----------未解决的
openSUSE-leap-15.2 每次锁机再使用时，会卡5秒左右，非常不爽


是使用一段时间后，不能从bluefish复制到 text edit 或其它中,再关闭bluefish和textedit又好了，可能是bluefish的问题,打开SUSE.txt  在ctrl+f  vmware  选中kernel-default后。
terminal不能复制到text edit中，和fcitx输入法有关？

grub2引导iso没试成功

vim 和gedit 打开windows下的有中文GBK文件时,显示其它的怪字符

--
我的电脑的openSUSE
不存在komodoEdit不能使用fcitx输入法的问题，

也不存在fat32分区文件丢失的情况
也不会出现开机时的报的错误信息


--公司电脑新硬件
15.1版本开始机时有 PCI错误
Komodo Edit-11使用fcitx无效(yast2语言切换又可以了) 可以单独为Komodo Edit使用ibus, 其它使用fcitx 

fat32分区最好不要加fsck 为2 ,遇到一次openSUSE-leap-15写入的文件到windows中什么也没有了!!!! 多出一些FSCK0000.REC等文件,如是文本还能打开看到多半数据.
建立ext4分区( DiskGenius 中建才行,openSUSE建的读不了),Extfsd可在windows中读,有时也看不到openSUSE下写的内容(U盘是必用的方式)


(不能挂载vfat,exfat分区，也可能是windows系统更新导致!!!!!,重新格式化vfat分区就可以了）
（exFAT 报file system is not found不行可能是新的exfat驱动原因，也可能是vmware安装后编译内核导致)

linux下挂载android的mtp设备 ,  MTP 协议连接移动设备的内部存储



