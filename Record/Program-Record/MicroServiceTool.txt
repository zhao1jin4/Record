consul,zipkin

=============consul
Go语言开发

分布式系统的服务注册和发现、配置等
服务健康监测
key/value 存储

Istio的组件prometheus使用这个

源码在  https://github.com/hashicorp/consul/  
https://www.consul.io/downloads.html 
下载 win zip包,就一个consul命令  ，可放在~/bin目录下


consul agent -dev 启动
http://localhost:8500

一致性(Consistency)  所有节点在同一时间具有相同的数据，强一致
可用性(Availability)  保证每个请求不管成功或者失败都有响应 
分隔容忍(Partition tolerance)  系统中任意信息的丢失或失败不会影响系统的继续运作 
consul 是 CP(牺牲可用性)

使用 Raft(同etcd)

consul members 显示数据中心dc1的主机，其实是调用 http://localhost:8500/v1/catalog/nodes 

---consul cluster
consul agent -server -bootstrap-expect=2 -data-dir=/tmp/consul1 -node=consul1 -bind=127.0.0.1 -client=0.0.0.0 -datacenter=discover_dc -ui
	-node=<value>
     Name of this node. Must be unique in the cluster. 默认是主机名
	-bind=<value>
     Sets the bind address for cluster communication.
	-datacenter 默认值为dc1,数据中心名称
	-client 配置为 0.0.0.0  内部，外部都可以访问http,https
	-advertise  默认为 -client 的值
	
    -server-port=<value>   默认 8300 server RPC port
	-http-port=<value> 	   默认 8500
	-https-port  默认 -1 禁用
	-dns-port=<value> 	   默认 8600
	-serf-lan-port=<value> 默认 8301
	-serf-wan-port=<value> 默认 8302
	-serf-lan-bind 默认值同 -bind
	-serf-wan-bind 默认值同 -bind 
    -ui-content-path=<value> 默认是 /ui
    -config-file=<value> 	文件可以是json格式的

consul agent -server -bootstrap-expect=2 -data-dir=/tmp/consul2 -node=consul2 -bind=127.0.0.1 -client=0.0.0.0 -datacenter=discover_dc -ui  -server-port=9300 -http-port=9500 -dns-port=9600 -serf-lan-port=9301 -serf-wan-port=9302
consul join 127.0.0.1:9301 127.0.0.1  会选leader 这个成功，http://localhost:8500 可以看到页面

同台机器的多节点
--- node1.json
{
  "datacenter": "dc1",
  "data_dir": "/tmp/consul1",
  "log_level": "INFO",
  "server": true,
  "node_name": "node1",   # node_name 同命令行 -node
  "ui": true,
  "bind_addr": "127.0.0.1",  # bind_addr 同命令行 -bind
  "client_addr": "0.0.0.0",  # client_addr 同命令行 -client
  "advertise_addr": "127.0.0.1", # advertise_addr 同命令行 -advertise
  "bootstrap_expect": 2,
  "ports":{
    "http": 8500,
    "dns": 8600,
    "server": 8300,
    "serf_lan": 8301,
    "serf_wan": 8302
   }
}
consul agent -config-file=node1.json 
 
--- node2.json 这个没有ui,只一个节点有ui就可以了
{
  "datacenter": "dc1",
  "data_dir": "/tmp/consul2",
  "log_level": "INFO",
  "server": true,
  "node_name": "node2",
  "bind_addr": "127.0.0.1", 
  "client_addr": "0.0.0.0", 
  "advertise_addr": "127.0.0.1",
  "bootstrap_expect": 2,
  "ports":{
    "http": 9500,
    "dns": 9600,
    "server": 9300,
    "serf_lan": 9301,
    "serf_wan": 9302
   }
}
consul agent -config-file=node2.json 
consul join 127.0.0.1:9301 127.0.0.1  这个成功，http://localhost:8500 可以看到页面

consul members -http-addr=localhost:8500
consul info -http-addr=localhost:8500

---key/value 值是持久存储的，像zookeeper

consul kv put redis/config/connections 5  在界面中显示为多级目录式
consul kv get redis/config/connections
consul kv get -detailed redis/config/connections
consul kv delete redis/config/connections

consul kv get -recurse   查全部
consul kv delete -recurse redis 删除这个前缀的key


consul kv put foo bar
consul kv get -detailed foo  信息中有 ModifyIndex      99

consul kv put -cas -modify-index=99 foo bar1  这样才可修改成功，类似乐观锁的版本

consul  kv get -recurse / 			 查所有的key和值 用 : 分隔
consul  kv delete -recurse /    删所有，要小心 

也有http接口
 


=============zipkin 
Dapper  一个请求在系统中会经过多个子系统的处理，而且这些处理是发生在不同机器甚至是不同集群上的，
	当请求处理发生异常时，需要快速发现问题，并准确定位到是哪个环节出了问题 
Twitter开源的Zipkin就是参考Google Dapper 论文而开发

还有PINPOINT  (也是 Dapper)监控调用哪个链路出现了问题，如响应时间
https://github.com/naver/pinpoint
 

https://github.com/openzipkin/zipkin/
Slim(苗条的)版本 是小的快速的,但不支持 Kafka 或 RabbitMQ
 
java -jar zipkin-server-2.19.2-exec.jar  后就可 http://127.0.0.1:9411/zipkin/  或
docker run -d -p 9411:9411 openzipkin/zipkin

Slim(苗条的)版本 是小的快速的,但不支持 Kafka 或 RabbitMQ

耗时分析
可视化错误
一次完整链路请求所收集的数据被称为Span
Zipkin 提供了可插拔数据存储方式：In-Memory、MySql、Cassandra 以及 Elasticsearch。生产推荐 Elasticsearch
Zipkin的 收集器组件，从外部系统发送过来的跟踪信息,并转换为 Zipkin 内部处理的 Span 格式
 存储组件，API 组件，UI 组件


 
