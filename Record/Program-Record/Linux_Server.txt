
==============vsFTP===============

ftp中mget下载，put上传

chkconfig vsftpd off --list
finger 用户名


make 后　生成vsftpd文件
cp vsftpd	/usr/local/sbin
cp vsftpd.conf /etc/
cp xinetd.d/vsftpd  ...

cp  RedHat/vsftpd.pam    /etc/pam.d/ftp   复制认证文件
后service vsftpd start 后在文件保存在　/var/ftp/下的文件夹中

vi /etc/vsftpd/vsftpd.conf  配置文件　

listen_port=2121改变默认端口21为 2121
anonymous_enable=YES 改为NO取消匿名登录,要用系统的ftp用户,有主目录
local_enable=YES

chroot_local_user=YES	#将本地用户锁定在主目录中，不允许切换到上一级目录中


FTP虚拟用户 --linux才有
db_load(db4-utils) -T -t hash -f /etc/vsftpd/ftp_users.txt( 第一行用户，第二行密码) vsftpd_login.db

编辑 /etc/pam.d/vsftpd 
auth	required	/lib/secrity/pam_userdb.so db=/etc/vsftpd_login
vi /etc/vsftpd/vsftpd.conf  中加入 guest_enable=YES	guest_username=ftp(虚拟用户充当的用户)

find -perm 002  其它可写的文件
权限s
find -perm +6000 | more
smtps 
https
sftp
ssh



配置 listen=YES 可独立启动
/usr/local/sbin/vsftpd & 启动,会读/etc/vsftpd.conf

local_enable=YES 要用目录/usr/share/empty

======================DNS   bind,
www.isc.org

catching-nameserver,bind-utils软件包

./conifgure --sysconfdir=/etc   默认的是PREFIX/etc
make
make install

/etc/named.conf
opotions { directory "/var/named"; };  注意在{} 前有空格
catching-nameserver.rpm软件包,安装会产生一个named.conf文件

dig -t NS .  根服务器的主机
如果只有一个根主机 A 表示的 (address) 把它的地址放入resolv.conf中再次 dit -t NS .
dig -t NS .>/etc/named/named.ca　　//有了很多的根域服务器的地址
再换成本机IP来解析DNS
echo "nameserver 127.0.0.1">/etc/resolv.conf

rndc-confgen > /etc/rndc.conf
看提示把文件下半部分放在named.conf文件中

cat -n 显示行号

tail +13 /etc/rndc.conf >> /etc/named.conf  从第13行到尾

(tail -n +2 从第二行开始到尾,-2从倒数第二行开始到尾)
tail -10f console.log　看尾最后10行

删除注释
VI中 :.,$-1s/^#\ //　　　
.表示当前行，$表示最后一行,s/.../替换 (行首的#和空格转义)　/删除　　　
看/var/log/messages 日志文件

named来启动
ps -aux | grep named   :53 端口 (domain)


host www.google.cn来测试

rndc status 显示信息

host和dig是让nameserver来查找的 不会去找hosts文件中的


zone "." IN(可无)
{
type hint;
file "named.ca";
};


zone "localhost" IN
{
type master;
file "named.local";
};

/var/named/named.local文件

////@表示传过来的区名(即 zone 后的字符串)
////IN inernet类型
////SOA (start of authority)
////管理员 root 或者 root.localhost. (因为@有特意不能root@localhost)   注意尾部点表示全称
@ 1D IN SOA localhost. root.locahost. (  #1D １天
#这里的root.localhost.可以省为root ,"."表示完成，@表示传来的域名　"("前要有空格
#　Ｈ小时　Ｍ分钟　Ｗ周  D天
#;表示注注释
23232 ;serial  更新次数  
1H ;refresh
15M ;retry
1w  ;expire
1D 　;TTL  缓存时间
)


#A 表示地址　
#　　　@第一个字段为空表示于上一行相同
#ＮＳ　域名
#CNAME  表示别名

localhost.( 与上行同可省，或@ 域名)   IN    NS  locahost.(主机名,可用@)     #第一个localhost的域名服务器的第二loc
localhost.		IN    A   127.0.0.1                   #localhost对应上面第二个的IP


rndc reload重新加载named.conf文件
 
dig -t A localhost 信息要比host多一些,可存文件

就可以用host  localhost来解析了


hostname   FQDN
$origin chinaitlab.com  默认域的后缀
@ 1D IN SOA chainitlab.com. root (   #root.chainitlab.com.
	23232
	1H
	15M
	1W
	1D  )
      IN NS   ns      #ns.chinaitlab.com. 可以把NS 改为@,并改一下ns行的ns删 ,NS后只可是主机名,不可以是IP
      IN MX 10 mail   #mail.chinaitlab.com.  (Mail Exchange 一定要可以解析的,所以下面要有对应的)
ns    IN  A     10.0.0.254)
www   IN  A      10.0.0.454
mail  IN  A     10.0.0.254
new   IN  CNAME     www            #如www变了,new这个别名也变了




/etc/resolv.conf文件中的   search example.com 
表示   host www 时会www.example.com


127.0.0的反向区
zone "0.0.127.in-addr.arpa" {
	type master ;
	file "127.0.0.zone" ;
};



$TTL 1D ####$TTL 3h 缓存时间,表示该文件所有第 一行的第二列可以省1D
###@ 表示0.0.127.in-addr.arpa.    root.localhost.不能简写成root
@	IN	SOA  @	root.localhost. (121 1H 30M 1W 1D)  ##第二个@用正向,返向无所谓的
	IN	NS	localhost.
1	IN	PTR	localhost.   ## 1 = 1.0.0.127.in-addr.arpa. 


rndc reload
host 127.0.0.1 来测试
dig -x 127.0.0.1   或是 dig -t PTR(pointer) 1.0.0.127.in-addr.arpa


history看操作历史
子不知道父，在/etc/resolv.conf加　search  278.xxxxxx

zone "" {
type "slave";
file "chaineitlab";
masters { 10.0.0.1; } ;   #{}前后最好有空格
};

host -t SOA chinaitlab.com

named 是以named用户来运行的不可以写root 的文件/var/named/  (slave)
refresh 来决定 多长时间从主服务器上根据serial拿最新的数据,如主服务器不通retry的时间来重试,什么时候过期,最后一个是缓存

useradd -s /bin/false -d /dev/null named
mkdir /var/run/named 
chown named.named /var/run/named
named -u named    表示以指定的用户(named)运行  会写/var/run 进程信息,要建一目录

/etc/rc.loacal 开机启动运行


options {pid-file "/var/run/named/named.pid"}
###全局有效
options
{
	forwarders { 192.168.1.1; } ;#如果自己不能解析，发给ＩＰ来解析，如也不能解析，就给根来解析
	allow-transfer { 192.168.1.1; } ;#充许传输文件的ＩＰ(对slave)，可放在　zone "xx" 中
	allow-query { 10.0.0/24 } ;  充许查询的IP(解析) 
}

/var/named/chroot/
ls /var/named/chroot/var/named/
zone "xx.com" IN
{
	allow-update{none;}
}

nslookup  后输入 域名来解析 ，（resolv.conf）
canonical
[kE5nCnikEl]
adj.
规范的
VMWare的Team

/var/named/chroot/var目录要正确权限(755)，否则slave不能从master,更新服务
chmod 755 -R chroot

======================DHCP======================
www.isc.org


man dhcpd.conf

示例：

ddns-update-style none;##必须要有，man dhcp.conf

subnet 10.0.0.0 netmask 255.255.255.0{
	option routers		10.0.0.254;   
	option  subnet-mask	255.255.255.0;
	option domain-name	"chainitlib.com";#windows ipconfig会显示DNS suffix，/etc/resolv.conf中有search chainitlib.com
	option domain-name-servers 10.0.0.254;   #DNS服务的IP多个 ,要分号，不在range范围中有
	range 10.0.0.128 10.0.0.253;             #分配IP范围，不要包含静态地址，DHCP服务器必须是静态的,mail,dns
	default-lease-time 21600;		 #租用时间，秒
	max-lease-time 43200;			#最多租用，如有人抢地址就释放，一般不会抢的
	host mail{				#mail 是主机名 静态地址  ping mail.chinaitlab.com
	
		hardware ethernet 12:34:56:AB:CD;   #如果是这个网卡就给它下面的地址，不要放在上面的IP范围内
		fixed-address 10.0.0.1;		  #不在range范围中有
	}

  }

  示例OK ,总是从小的向大的分配
--------------------
　
	default-lease-time 21600;		 
	max-lease-time 43200;
	option domain-name	"chu888";	
	option domain-name-servers 10.0.0.254;   
	option routers		10.0.0.254;
	option  broadcast-address 192.168.1.1;
	option  perform-mask-discovery on;
	ddns-update-style none;
	group
	{
		subnet 192.168.4.0 netmask 255.255.255.0
		{
			range dynamic-bootp 192.168.4.2 192.168.4.200;
		}
		host printer
		{
			hardware ethernet 00:00:80:F8:07:10;
			fixed-address 10.0.0.1;
			option host-name "printer server"
		}
	}

--------

vi /etc/dhcpd.conf 只可这个目录，可从安装目录中复制、改
touch /var/state/dhcp/dhcpd.leases   #释放IP信息
rpm包的是 /var/lib/dhcp/dhcpd.leseas	
/var/log/message  有日志放了哪个地址

dhcpd  启动  局域网中只能有一个DHCP服务
grep bootp /etc/services  得知 监听端口 67　　


windows中 (ipconfig /renew， ipconfig /all 显示DNS suffix:chainitlib.com配置的,DCHP Server是哪个 )
dhclient eth0 重新获得IP
　
route -n 来看 或者用netstat -r

at now+1minutes 回车后
	service network restart　　##SSH会断
ctrl+d结束




==============apache2===集成其它==tomcat-connectors====php5
-----apache2
apache   ./configure -enable-so
  --sysconfdir=/etc/   --enable-ssl  --enalbe-modules
 
	make 
	make install


---------apache2 安装proxy http_proxy  可以做 LoadBalance

如果安装时已经使用--enable-proxy --enable-proxy-http --enable-ssl  
不用加 LoadModule proxy_module 和 LoadModule proxy_http_module

下面是对安装时未使用上面的编译选项

定位到Apache源码的 modules/proxy 目录
#/usr/local/apache2/bin/apxs -c -i -a -n proxy  mod_proxy.c proxy_util.c   或者用下面两条命令

-i install ,-a all ,-n modname ,-c compile

编译相应模块：--OK
# /usr/local/apache2/bin/apxs -c  mod_proxy.c proxy_util.c
加载模块：--OK
# /usr/local/apache2/bin/apxs -i -a -n proxy mod_proxy.la




httpd.conf自动添加了如下语句：
LoadModule proxy_module        modules/mod_proxy.so
module 文件夹中也生成了相应的 mod_proxy.so 模块

需要 http
#/usr/local/apache2/bin/apxs -c -i -a mod_proxy_http.c   或者用下面两条命令

# /usr/local/apache2/bin/apxs -c mod_proxy_http.c
# /usr/local/apache2/bin/apxs -i -a -n proxy_http mod_proxy_http.la

LoadModule proxy_http_module modules/mod_proxy_http.so
module 文件夹中也生成了相应的 mod_proxy_http.so 模块



ProxyRequests On
<Proxy *>
	Order deny,allow
	Allow from all
</Proxy>
ProxyPass	 /mdm	http://localhost:7001/mdm
ProxyPassReverse /mdm	http://localhost:7001/mdm


-------------PHP5
./configure --prefix=/usr/local/php5 --with-mysql=/usr/local/mysql --with-apxs2=/usr/local/apache2/bin/apxs 
(路径不要以/ 结尾,　可--with-config-file-path=/etc/php.ini 所在的路径 PREFIX/lib)
可选的有 --enable-fastcgi ,--enable-fpm (fastcgi process manager 有配置文件php-fpm.conf 有配置listen_address,allowed_clients ,php-fpm start)
 cp php.ini-dist  /usr/local/php5/lib/
 ./php-cgi --help看有-c 指定查找php.ini文件位置
 
要libxml2 


make
make test
make install 

##make install 后在/usr/local/apache2/modules/libphp5.so 就有了
##httpd.conf 中也有了LoadModule php5_module        modules/libphp5.so

AddType application/x-httpd-php  .php 放在最外面

 
cp php.ini-dist /usr/local/lib/php.ini

httpd.conf文件中要有
AddType application/x-httpd-php  .php  .phtml
#AddType application/x-httpd-php-source .phps  高亮
LoadModule php5_module libexec/libphp5.so

-------------Python 2.7
./configure 
make
make install

-----tomcat-connectors-1.2.42
tomcat-connectors-1.2.42-src.tar.gz  是linux 版本

# cd tomcat-connectors-1.2.42-sr/native
# ./configure  --prefix=/usr/local/tomcat-connector --with-apxs=/usr/local/apache2/bin/apxs  --with-java-home=/usr/java/jdk1.7.0_75
# make
# cp ./apache-2.0/mod_jk.so /usr/local/apache2/modules/

 

cd /usr/local/apache2/conf/ 
建立两个配置文件mod_jk.conf和workers.properties。

# vi mod_jk.conf

指出mod_jk模块工作所需要的工作文件workers.properties的位置
JkWorkersFile /usr/local/apache2/conf/workers.properties
JkLogFile /usr/local/apache2/logs/mod_jk.log

# Set the jk log level [debug/error/info]
JkLogLevel info

# Select the log format
JkLogStampFormat "[%a %b %d %H:%M:%S %Y]"

# JkOptions indicate to send SSL KEY SIZE,
JkOptions  +ForwardKeySize +ForwardURICompat -ForwardDirectories

# JkRequestLogFormat set the request format
JkRequestLogFormat "%w %V %T"

#----对一个Tomcat的配置
# 将所有servlet 和jsp请求通过ajp13的协议送给Tomcat，让Tomcat来处理
JkMount /servlet/*  worker1
JkMount /*.jsp worker1


################JkMount /*.jsp  worker_jsp 对如果有虚拟机pts ,不能用/* 这样会所有虚拟机全部拦截
		JkMount	 /*.action worker_jsp
		JkMount	!/*.php
	可Include mod_jk.conf文件放入在<VirtualHost >中


# vi workers.properties     

# Defining a worker named worker1 and of type ajp13
worker.list=worker1

# Set properties for worker1
worker.worker1.type=ajp13 
worker.worker1.host=localhost 
#ajp13端口,tomcat中server.xml默认是8009
worker.worker1.port=8009  
worker.worker1.lbfactor=50 
worker.worker1.cachesize=10 
worker.worker1.cache_timeout=600 
worker.worker1.socket_keepalive=1 
worker.worker1.socket_timeout=300



在httpd.conf文件中加
LoadModule jk_module modules/mod_jk.so
Include /usr/local/apache2/conf/mod_jk.conf

---下面的可以不配置
chmod 755  tomcat-8.5.6/bin/*.sh

最后编辑Tomcat的配置文件server.xml，在HOST段中加入：
<Context path="" docBase="/var/wwwroot" debug="0" reloadable="true" crossContext="true"/>

<Directory "/var/wwwroot/WEB-INF">  ###WEB-INF内容不可仿问  
    Order deny,allow
    Deny from all
</Directory>


如JK报错,/etc/apache2/logs/jk-runtime-status ,是由/etc/apache2/下没有logs目录所导至的


=========一个apache mod_jk.so 多个tomcat  版本8测试成功==============
---负载均衡
修改多台机器的Tomcat的监听端口,默认的8080和默认的8009

mod_jk.conf 文件中
JkMount /*.jsp controller

workers.properties 文件中
worker.list = controller,tomcat1,tomcat2  #server 列表
#========tomcat1========
worker.tomcat1.port=8009       #ajp1.3 端口号，在tomcat下server.xml <Connector port=  配置,默认8009
worker.tomcat1.host=localhost  #tomcat的主机地址，如不为本机，请填写ip地址
worker.tomcat1.type=ajp13
worker.tomcat1.lbfactor = 1   #server的加权比重，值越高，分得的请求越多
#========tomcat2========
worker.tomcat2.port=9009       #ajp1.3 端口号，在tomcat下server.xml <Connector port= 配置,默认8009
worker.tomcat2.host=localhost  #tomcat的主机地址，如不为本机，请填写ip地址
worker.tomcat2.type=ajp13
worker.tomcat2.lbfactor = 1   #server的加权比重，值越高，分得的请求越多

#========controller,负载均衡控制器========
worker.controller.type=lb
worker.controller.balanced_workers=tomcat1,tomcat2   #指定分担请求的tomcat
worker.controller.sticky_session=1		 
#worker.controller.sticky_session=true  #或者用true  表示相同的SESSION ID 跳到相同的workder(如果这个worker挂了就不行了,要做集群)

---集群

session复制,集群内的tomcat都有相同的session
集群后,要进行session复制,导致速度较慢。Tomcatd的复制，目前不支持application复制


分别修改每个tomcat 8 配置conf/server.xml
现有的<Cluster>标签做如下变动  ,可以从文档上cluster-howto.html复制最新
  <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"
                 channelSendOptions="8">

          <Manager className="org.apache.catalina.ha.session.DeltaManager"
                   expireSessionsOnShutdown="false"
                   notifyListenersOnReplication="true"/>

          <Channel className="org.apache.catalina.tribes.group.GroupChannel">
            <Membership className="org.apache.catalina.tribes.membership.McastService"
                        address="228.0.0.4"
                        port="45564"
                        frequency="500"
                        dropTime="3000"/>
            <Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"
                      address="auto"
                      port="4000"
                      autoBind="100"
                      selectorTimeout="5000"
                      maxThreads="6"/>

            <Sender className="org.apache.catalina.tribes.transport.ReplicationTransmitter">
              <Transport className="org.apache.catalina.tribes.transport.nio.PooledParallelSender"/>
            </Sender>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"/>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor"/>
          </Channel>

          <Valve className="org.apache.catalina.ha.tcp.ReplicationValve"
                 filter=""/>
          <Valve className="org.apache.catalina.ha.session.JvmRouteBinderValve"/>

          <Deployer className="org.apache.catalina.ha.deploy.FarmWarDeployer"
                    tempDir="/tmp/war-temp/"
                    deployDir="/tmp/war-deploy/"
                    watchDir="/tmp/war-listen/"
                    watchEnabled="false"/>

          <ClusterListener className="org.apache.catalina.ha.session.ClusterSessionListener"/>
        </Cluster>
		
		
在<Engine name="Catalina" defaultHost="localhost" jvmRoute="tomcat2"> 中修改jvmRoute的值　，两个Tomcat对应修改    

应用的web.xml加入  <distributable/>

tomcat的session同步功能需要用到组播(MultiCast 地址配置的是 228.0.0.4 ),windows默认情况下是开通组播服务的，
但是linux默认情况下并没有开通,	route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0
启动时开通组播在/etc/sysconfig/static-routes文件内加入eht0 net 224.0.0.0 netmask 240.0.0.0



=========一个apache proxy_balancer 多个tomcat  负载均衡==============
到apache 的源码解压 modules/proxy 目录

#/usr/local/apache2/bin/apxs -c -i -a -n proxy mod_proxy.c proxy_util.c
#/usr/local/apache2/bin/apxs -c -i -a mod_proxy_balancer.c
#/usr/local/apache2/bin/apxs -c -i -a mod_proxy_http.c

LoadModule proxy_module		modules/mod_proxy.so  
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so  
LoadModule proxy_http_module	modules/mod_proxy_http.so  


ProxyRequests Off 
 <Proxy balancer://mycluster>  
     BalancerMember http://node-a.myserver.com:8080  
     BalancerMember http://node-b.myserver.com:8080  
 </Proxy>  
 ProxyPass /myweb  balancer://mycluster/myweb      

#警告：绝不要添加到生产环境中！！！  http://localhost/balancer-manager/监视负载均衡的工作情况的,
# <Location /balancer-manager>  
#     SetHandler balancer-manager  
#     order Deny,Allow  
#     Deny from all  
#     Allow from localhost  
# </Location>  


 ProxyRequests Off  
 <Proxy balancer://mycluster>  
     BalancerMember http://node-a.myserver.com:8080 loadfactor=7  
     BalancerMember http://node-b.myserver.com:8080 loadfactor=2  
     ProxySet lbmethod=bytraffic  
 </Proxy>  
 ProxyPass /myweb   balancer://mycluster/myweb  
 


#loadfactor 参数取值范围为1-100
lbmethod=byrequests 按照请求次数均衡(默认)
lbmethod=bytraffic 按照流量均衡
lbmethod=bybusyness 按照繁忙程度均衡(总是分配给活跃请求数最少的服务器) 


---集群
ProxyRequests Off  
<Proxy balancer://mycluster>  
     BalancerMember http://node-a.myserver.com:8080  
     BalancerMember http://node-b.myserver.com:8080 status=+H  
</Proxy>  
ProxyPass /myweb   balancer://mycluster/myweb    


status=+H
请求总是流向 node-a ，一旦node-a挂掉， Apache会检测到错误并把请求分流给 node-b。Apache会每隔几分钟检测一下 node-a 的状况，如果node-a恢复，就继续使用node-a。

--OK 但不能保存session,除非只有一台在用,要用 ajp://

-----------使用ajp://  -----------
#/usr/local/apache2/bin/apxs -c -i -a mod_proxy_ajp.c
LoadModule proxy_ajp_module modules/mod_proxy_ajp.so 　##报错??

./configure  --prefix=/usr/local/apache2 --enable-so \
 --enable-proxy  --enable-proxy-ajp --enable-proxy-balancer --enable-proxy-connect \
 --enable-proxy-connect \
 --enable-proxy-ftp     \
 --enable-proxy-http    \
 --enable-proxy-scgi   \
 --enable-ssl            

httpd -l查看

ServerName mdm-server # 是hostname的值 


/usr/local/apache2/bin/apxs -c -i -a mod_proxy_ftp.c ##OK
LoadModule proxy_ftp_module modules/mod_proxy_ftp.so 

#tomcat的AJP 默认端口是8009

ProxyRequests Off
<proxy balancer://cluster> 
	BalancerMember ajp://127.0.0.1:8009 loadfactor=1 route=tomcat1  ##tomcat集群
	BalancerMember ajp://127.0.0.1:9003 loadfactor=1 route=tomcat2
</proxy>
ProxyPass	 /myweb    balancer://cluster/myweb  stickysession=jsessionid nofailover=On 
ProxyPassReverse /myweb    balancer://cluster/myweb


Tomcat 的　server.xml   , 可以从文档上cluster-howto.html复制最新
  <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"
                 channelSendOptions="8">

          <Manager className="org.apache.catalina.ha.session.DeltaManager"
                   expireSessionsOnShutdown="false"
                   notifyListenersOnReplication="true"/>

          <Channel className="org.apache.catalina.tribes.group.GroupChannel">
            <Membership className="org.apache.catalina.tribes.membership.McastService"
                        address="228.0.0.4"
                        port="45564"
                        frequency="500"
                        dropTime="3000"/>
            <Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"
                      address="auto"
                      port="4000"
                      autoBind="100"
                      selectorTimeout="5000"
                      maxThreads="6"/>

            <Sender className="org.apache.catalina.tribes.transport.ReplicationTransmitter">
              <Transport className="org.apache.catalina.tribes.transport.nio.PooledParallelSender"/>
            </Sender>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"/>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor"/>
          </Channel>

          <Valve className="org.apache.catalina.ha.tcp.ReplicationValve"
                 filter=""/>
          <Valve className="org.apache.catalina.ha.session.JvmRouteBinderValve"/>

          <Deployer className="org.apache.catalina.ha.deploy.FarmWarDeployer"
                    tempDir="/tmp/war-temp/"
                    deployDir="/tmp/war-deploy/"
                    watchDir="/tmp/war-listen/"
                    watchEnabled="false"/>

          <ClusterListener className="org.apache.catalina.ha.session.ClusterSessionListener"/>
        </Cluster>
		
<Engine name="Catalina" defaultHost="localhost" jvmRoute="tomcat2">  ###对应修改    

应用的web.xml加入  <distributable/>



<VirtualHost>中可以使用
 ProxyPass 
 ProxyPassReverse 


ab -n 100 -c 10 http://127.0.0.1:8080/   打压力
-n 请求总数
-c 并发数

============================apache2 使用========================

源码安装 依赖于 Apache APR  (Apache Portable Runtime ) 
cd apr-1.5.2
./configure  其实安装在 /usr/local/apr目录中
make
make install

cd apr-util-1.5.4
./configure --with-apr=/usr/local/apr
make
make install

cd pcre-8.39	
./configure
make 
make install

cd httpd-2.4.23
./configure  其实安装在 /usr/local/apache2 目录中
make 
make install


http://doc.javanb.com/apache-http-server-version-2-2-cn/sitemap.html

检查httpd.conf 语法-windows:
	httpd -t
	或者：
	httpd.exe -w -t -f "C:\Apache2.2\conf\httpd.conf" -d "C:\Apache2.2\."

检查httpd.conf 语法-linux:
	apachectl configtest
	或
	apache2ctl configtest



SSL Secure Socket Layer 有openssl ,modssl

顶层 HTTP ,POP,SMTP
中层 SSL(HTTPS,POP3S,SMTPS)
底层 TCP
最底层IP

/etc/rc.local 开机启动执行,可加自动启动apache

Listen 80
ServerRoot
DocumentRoot
MaxClients 最大的客户数(同时)

对<IfMoudle prefork.c>可以用
/usr/local/apache2/bin/httpd -l  列出apache内部的模块

User nobody  # 一定要有仿问目录的权限,r_x,可以看日志
Group nobody
子进程使用的用户来执行
启动apache要用root,setuid()改变子进程的身份



Errorlog log/error_log
LogLevel warn
DirectoryIndex index.html 文件夹索引
AddDefaultCharset　　UTF-8  (iso-8859-1) #默认返回页面的编码,浏览器可以改为UTF-8(系统是UTF-8), 可以把它注释,这样浏览器,jsp程序可以自动认识
Alias /xx /var/www/xx

locale 命令来看编码

killall -HUP httpd 也可以生启apache
<Directory />
#中没有仿问权限设置,默认是拒绝的,(也有的子)
Options Indexes #表示如果没有index.html (DirectoryIndex定义的)就列表显示它
Allow from 127. #127这个网段可以仿问 ,all
</Directory>

cgi  可以用任何来解释执行(bash,perl)  ,第一行必须声明content-type 再加一个换行 
如perl 用
	#!/usr/local/bin/perl　
	print "Content-type: text/plain\n\n";
如bash 用
	#!/bin/bash  
	echo "content-type :text-plain"
	echo 

ScriptAlias /cgi-bin/ "/usr/local/apache2/cgi-bin/"  


# 基于主机名的虚拟主机 (一个IP地址，多个网站)
# 基于IP地址的虚拟主机 (每个站点拥有一个的独立IP地址)，


可以多个域名用同一个IP

NameVirtualHost 192.168.1.104:80	#这三个ＩＰ地址是一样的　 两域名，相同IP，
<VirtualHost 192.168.1.104>		#这三个ＩＰ地址是一样的
	ServerAdmin	root@example.com
	DocumentRoot /var/www
	ServerName	example.com   ###可以用DNS解析到IP(可IP),会替换ServerName 的设置
	ErrorLog  logs/example_error.log
	CustomLog logs/example.log common
	ErrorDocument 404 http://cooling.ape-tech.com/bbs
</VirtualHost>

<VirtualHost 192.168.1.104>		#这三个ＩＰ地址是一样的
	ServerAdmin	root@test.com
	DocumentRoot /var/test
	ServerName	test.com
	ErrorLog  logs/test_error.log
	CustomLog logs/test.log common
	ErrorDocument 404 http://cooling.ape-tech.com/bbs
</VirtualHost>

如仿问的不是上两个域的网址,对:80会显示第一个VirtualHost 的主目录(DocumentRoot)
如是:443就不是VirtualHost,而是

VirtualHost也可以加SSL ,再 /etc/ssl.conf 文件中修改
	SSLEngine on ##开关

<VirtualHost>中可以用<Proxy>


----


Aliase  /test /var/www/test
<Directory /var/www/test>
	Options  ALL ##ExecCGI(可运行CGI程序 ),FollowSymLinks(支持符号链接访问其它目录),Includes(可使用SSL),IncludeNOEXEC(可SSL 不可CGI),Indexes(可列目录无DirectoryIndexes参数指定的文件如index.html),SymLinksIfOwnerMath(目标文件和目录属于同一用户可以符号链接)
	AllowOveride AuthConfig
	AuthName "显示的标题"
	Authtype Basic
	AuthUserFile /var/www/test/.htpasswd
	require valid-user  (htpaswd -c /var/www/test/.htpasswd mike  来增加mike,第一次加 -c, -m修改, )
	
	Order allow,deny   (较安全的,如  deny,allow 不在deny 中的都可以访问  ,(只考虑DENY))
	
	Allow from all
	Deny from xxx.com
</Directory>

UserDir disable  如为public_html(用户user1主目录下的目录,/home/user1/public_html),可以http://www.xx.com/~user1来访问
AccessFileName .htaccesss(访问控制文件)
		<Files ~ "^.ht">  ##不可任何人看到.ht的文件
			Order allow,deny
			Deny from all 
		</Files>
TypesConfig  /etc/mime.types
DefaultType text/plain  (如二进制文件被认为文本,application/x-octet-stream)
分析文件要 加载模块
<IfMoudle mod_mime_magic.c>
	MIMEMagicFile conf/magic
</IfMoudle>
	
AddType application/x-httpd-php   .php
ErrorLog logs/error_log
LogLevel warn   (debug,info,notice,warn,crit,alert,emerg)
LogFormat ".........."
CustomerLog logs/access_log combined
%a 远程IP
%b 发送字节
%h 远程主机
%l 远程登录名
%r 客户机请求的第一行
%s 状态
%t 时间
%u 远程用户
referrer 点击页面
user-agent 浏览器

ServerSignature On  在页面底部加服务名,版本,Email

Redirect permanent /foo  http://www.xx.com  访问不存在的项目时跳到页面


IndexOptions FancyIndexing VersionSort NameWith=* (按适合的宽度显示文件名)
列表的显示方式   
AddIcon /icons/xxx .exe .bin
DefaultIcon /icons/unknow.icn

DefaultLanguage 


<Location /server-status>
	SetHandler server-status
	Order deny,allow
	Deny from all
	Allow from 192.168.1.1
</Location>

<Location /server-info>
	SetHandler server-info
	Order deny,allow
	Deny from all
	Allow from 192.168.1.1
</Location>
就可以用 http://localhost/server-status (server-info) 看到信息




可每个守护进程来支持虚拟机




如何https (443),TLSV1.2,TLS( Transport Layer Security )最新版本1.2

ssl       执行httpd -l 有mod_ssl.c
<IfMoudle mod_ssl.c>
还要看 /etc/ssl.conf文件
	Listen 443
</IfMoudle>	
/usr/local/bin/apachectl -D /##startssl 来开启SSL ,查443端口,没有

ssl.conf文件

SSLCertificateFile /etc/ssl.crt/server.crt 证书
SSLCertificatekeyFile  /etc/ssl.key/server.key 私钥
SSLCertificatechainFile



openssl  genrsa -out /etc/ssl.key/server.key 1024(长度) //输出到文件
openssl  req(请求) -new(新建) -x509 (格式) -key (前面的key) 
	/etc/ssl.key/server.key(和上条命令的路径一样) -out /etc/ssl.crt/server.crt
   按提示输入一些信息

/usr/local/bin/apachectl startssl 
查443端口 ,发现有了

httpd -k stop/start/restart


bin/ab 压力测试
KeepAlive On //断点续传

ExtendedStatus On
<Location /server-status>  
SetHandler server-status   ##会在目录下显示服务状态下
Order deny,allow
Deny from all
Allow from 192.xxxxx
</Location>


<Location /server-status>  
SetHandler server-status   
Order deny,allow
Allow from all
authtype basic
authname "xxx"
authuserfile "/.htpasswd"
required valid-user
</Location>


htpasswd命令 -c
./apachectl configtest 来看错误
============apache2 上==============================================
============openSSL ==============================================
JKS(JavaKeysotre)格式和PFX(PKCS12) 
PFX常用于Windows IIS服务器 , JKS常用语JAVA类的WEB服务器

根据私钥pfx生成公钥crt
openssl pkcs12 -in myssl.pfx -nodes -out server.pem (像Base64的明文)
openssl rsa -in server.pem -out server.key
openssl x509 -in server.pem -out server.crt   (.crt是像Base64的明文的公钥文件)

1.创建根证私钥
openssl genrsa -out root-key.key 1024

2.创建根证书请求文件
openssl req -new -out root-req.csr -key root-key.key -keyform PEM    (对-key参数,默认PEM,可选DER)  
#有交互Country Name ,Province ,City,Organization,Organizational Unit,Common Name,Email , 最小4位challenge password,company name

3.自签根证书
openssl x509 -req -in root-req.csr -out root-cert.cer -signkey root-key.key -CAcreateserial -days 3650    (.crt是像Base64的明文的公钥文件)

4.导出p12格式根证书
openssl pkcs12 -export -clcerts -in root-cert.cer -inkey root-key.key -out root.p12 
#输入密码,有确认的
#-clcerts only output client certificates (not CA certificates)

5.生成root.jks文件
keytool -import -v -trustcacerts -storepass 123456 -alias root -file root-cert.cer -keystore root.jks 

如要二制的.cer文件,要转换pem到der
openssl x509 -in root-cert.cer -inform PEM -out root-cert_b.cer -outform DER 

----------------方式二
1) 创建私钥
openssl genrsa -out private_key.pem 1024  (像Base64的明文)

2) 创建证书
openssl req -new -out req.csr -key private_key.pem  -keyform PEM  (对-key参数,默认PEM,可选DER)  
#有交互Country Name ,Province ,City,Organization,Organizational Unit,Common Name,Email , 最小4位challenge password,company name

3) 自签署证书
openssl x509 -req -in req.csr -out public_key.der -outform der -signkey private_key.pem -days 3650

以上三步也可简化为一个命令
openssl req -x509 -out public_key.der -outform der -new -newkey rsa:1024 -keyout private_key.pem -days 3650 
----

openssl-1.0.1k.tar.gz
$ ./config    可选的 --prefix
$ make
$ make test
$ make install



===============SVN subversion=====================
TortoiseSVN 清记忆密码，可以右键出SVN菜单
Settings->Saved Data->Authentication data,Clear 

svn://协议 客户端 使用silkSVN可以用,但使用Visual SVN就不行


运行 svnserve -d (daemon)
lsof -i :3690 可以看服务已经运行   (cat /etc/service | grep svn)
list open files ,-i internet
 

客户端执行  
执行 #svn checkout svn://svn_server_ip/home/mysvn
或者 #svn checkout svn+ssh://svn_server_ip/home/mysvn
eclipse的SVN只对网址URL的方式



依赖于libtool ,autconf,opnessl(opensslv.h  openssl-devel.rpm) ,db(rpm 包不行的，用源码安装)
	awk(windows INSATLL中看的)

----db 源码安装 
cd build_unix 
../dist/configure
make
make install
安装在/usr/local/BerkeleyDB.4.7   

./configure  --prefix=/usr/local/subersion --with-apxs=/usr/local/apache2_svn/bin/apxs --with-openssl=/usr/local/openssl  --with-berkeley-db=/usr/local/BerkeleyDB.4.7/
subversion 中加　--with-berkeley-db=/usr/local/BerkeleyDB.4.7
-----

apache 中

  $ ./buildconf
  $ ./configure --enable-dav --enable-so --enable-maintainer-mode
  $ rm /usr/local/lib/libsvn*
  $ make clean && make && make install


subversion 中
最后解压subversion-deps-1.5.4.tar.gz

  $ sh ./autogen.sh
  $ ./configure　--with-apxs=/usr/local/apache2/bin/apxs　####--prefix=/usr/local/subversion 
  $ make
  # make install

安装后/usr/local/apache2/modules 下多了两个文件mod_authz_svn.so和mod_dav_svn.so
也自动改了httpd.conf文件中加了　
LoadModule dav_svn_module   modules/mod_dav_svn.so
LoadModule authz_svn_module modules/mod_authz_svn.so


建立仓库svnadmin create /home/mysvn  目录下生成一些文件

在/usr/local/apache2/conf/httpd.conf中加入:
<Location /svn/repository>
DAV svn
SVNPath /home/mysvn
</Location>



cat /etc/services | grep svn


在服务器的浏览器中输入网址:
http://localhost/svn/repository/


svnadmin create /home/svnroot/repository/test

这条语句将把路径/home/user/import下找到的文件导入到你创建的Subversion 仓库中去，
//提交后的修订版为1。
# ./svn import /home/user/import file:///home/svnroot/repository/test –m "注释"
# ./svn import /home/user/import/xx.java file:///home/svnroot/repository/test/xx.java –m "注释"

httpd.conf 中添加
   LoadModule dav_svn_module modules/mod_dav_svn.so
   LoadModule authz_svn_module modules/mod_authz_svn.so
   <Location /svn>
   DAV svn
   SVNParentPath /home/svnroot/repository/ //svn父目录
   AuthzSVNAccessFile /home/svnroot/repository/authz.conf //权限配置文件
   AuthType Basic //连接类型设置
   AuthName "Subversion.zoneyump" //连接框提示
   AuthUserFile /home/svnroot/repository/authfile //用户配置文件
   Require valid-user //采用何种认证
   </Location>
   //其中authfile是通过"htpasswd [–c] /home/svnroot/repository/authfile username password"来创建的
   //"Require valid-user"告诉apache在authfile中所有的用户都可以访问。如果没有它，
   //则只能第一个用户可以访问新建库 



http://localhost/svn/test/，

htpasswd [-c] /home/svnroot/repository/authfile wooin   加用户

修改svn配置
vi /home/svn/yourprojectname/conf/svnserve.conf
anon-access = read
auth-access = write

2)权限分配

# vi /home/svnroot/repository/authz.conf
   [test:/] //这表示，仓库test的根目录下的访问权限
   wooin = rw //test仓库wooin用户具有读和写权限
   bao = r //test仓库bao用户具有读权限
   [test2:/] //test2仓库根目录下的访问权限
   wooin = r //wooin用户在test2仓库根目录下只有读权限
   bao = //bao用户在 test2仓库根目录下无任何权限
   [/] //这个表示在所有仓库的根目录下
   * = r //这个表示对所有的用户都具有读权限
   #[groups] //这个表示群组设置
   #svn1-developers = wooin, bao //这个表示某群组里的成员
   #svn2-developers = wooin
   #[svn1:/]
   #@svn1-developers = rw //如果在前面加上@符号，则表示这是个群组权限设置

$ svnserve -d --foreground -r /home/svn 
SVN 就开始监听默认的端口(3690)

http.conf文件
   User daemon # 将daemon改为svnroot，让apache进程以svnroot的身份运行 


 svnlook tree /var/repos/testProject/ 
 
 svn://host.example.com/usr/local/repositories/project1
 或者用
 $ svnserve -d -r /usr/local/repositories 后就可以用
 $ svn checkout svn://host.example.com/project1　--username lisi  --password
 	或者用这样的形式　svn co svn://lisi@localhost:3690/testProject



-T　用线程代代替进程


conf 目录下的svnserve.conf 中anon-access =none  ( 原来是read不行的)

~/.subversion/auth/　目录缓存,
SSH密码缓存工具，像类Unix系统的ssh-agent或者是Windows下的pageant。 

关闭凭证缓存 使用参数--no-auth-cache：
svn commit -F log_msg.txt --no-auth-cache



??????????????????????

svnserve是以管道模式调用的（-t）  才用svn+ssh://


或者在svnserve.conf中加入
[auth]
store-auth-creds = no

[tunnels]
rsh = rsh
来使用svn+rsh://host/path

--with-openssl=/usr/local/openssl   (可以手工源码安装openssl)
./configure  --prefix=/usr/local/subersion --with-apxs=/usr/local/apache2_svn/bin/apxs --with-openssl=/usr/local/openssl  --with-berkeley-db=/usr/local/BerkeleyDB.4.7

apr-util 中也要加--with-openssl  ,要单独make && make install(失败)(deps包中的)

---------多端口的监听
Listen 5001
Listen 8080

#222.73.218.46
NameVirtualHost *:5001
<VirtualHost *:5001>
# DocumentRoot /apache2/htdocs  ##SVN不能使用DocumentRoot
</VirtualHost>

NameVirtualHost *:8080
<VirtualHost *:8080>
# DocumentRoot /apache2/apply
</VirtualHost>


SVN  如何禁止commit

==============上 SVN===================== 
==============Git 安装配置 使用
Git四种协议
1.本地
2.git://
3.http://
4.SSH

SmartGit界面UI 

---windows版本
Google Code项目 msysgit 中的Git 和 msysGit-fullinstall 有 GitGUI ,C:/Program Files (x86)/Git/doc/git/html
GitStack 说是开源,30天后变为基本版本,网页形式的Server,http://localhost/gitstack/,可以建库,建用户,以http(s)的形式对外使用
---
GitLab (linux) 收费的，有管理界面


%HOMEPATH%\AppData\Local\Programs\Git\mingw64\bin\git.exe

Git-2.15.1.2-64-bit.exe 如非管理员安装，默认安装在 %HOMEPATH%\AppData\Local\Programs\Git
 选择使用notepad++为默认编辑器 
 
 
C:\Program Files\Git\mingw64\etc\gitconfig
	[credential]
		helper = manager
%HOMEPATH%\.gitconfig
	[gui]
	
C:\Program Files\Git\mingw64\share\doc\git-doc 下有文档
 user-manual.html
 
 
---源码版本安装
make configure
./configure 
make all
make install

----

http://git-scm.com/book/zh

1. 安装目录/etc/gitconfig文件,使用 git config --system  读写
2. 用户主目录.gitconfig 文件,使用 git config --global 读写 
3. 工作目录中.git/config 文件

gitconfig 文件中  #或者;  是注释
[user]
	name = user
	email = userId@sina.com
	
配置的是你个人的用户名称和电子邮件地址,提交时用
git config --global core.autocrlf true

$ git config --global user.name "User"  (windows下是保存在用户主目录.gitconfig 文件)
$ git config --global user.email userId@example.com
$ git config --global core.editor vi		文本编辑器
$ git config --global merge.tool vimdiff	差异分析工具
git config --global alias st "status"  定义st 是status 的别名,就可以用git st=git status

git config --list 检查已有的配置信息, 会看到重复的变量名,来自不同的配置文件,实际采用的是最后一个
git config user.name 查配置

git help -a 查看一级帮助 
git config 查看二级帮助  , git help commit 打开浏览器 C:/Program Files/Git/mingw64/share/doc/git-doc/git-commit.html

cd project1
git init  初始化Git,生成.git目录
就可,提交 git add *.c  再  git commit  -m 'initial project version'  
git commit -a -v ( -a 已经跟踪的文件不用add了, -v 先看一下差异,可以写comment),实际上是提交到本地,如果要提交到远程用 push

git clone git://github.com/schacon/grit.git mygrit
#  操作基本上相当于 git init 加 git fetch
fetch 本地仓库中还没有的数据


git status  显示有没有新加文件,或者要提交的文件
 
--创建一个名为 .gitignore 的文件,列出要忽略的文件模式
#忽略所有以 .o 或 .a 结尾的文件
*.[oa]		

# 但 lib.a 除外
!lib.a

#忽略所有以swp结尾的文件,vi生成的
*swp

build/
#最后跟斜杠（/）说明要忽略的是目录 
--
git diff hello.c

rm hello.c
git rm hello.c
git mv file_from file_to  #改名

git log 历史版本
git log -p 2
-p 显示内容差异,-2 仅显示最近的两次更新

git remote -v  显示有名字为 origin , clone后就有
git remote show origin

git remote add pb git@192.168.0.184:/opt/my_git_server/project1
git fetch [remote-name]

git pull 为了合并分支,就是fetch加merge
git push [remote-name] [branch-name]
git push origin master   #master是哪个分支
git remote rm pb

---服务器上部署 Git

先把现有仓库(init过的)导出为裸仓库,裸仓库的目录名一般以 .git 结尾
git clone --bare project1 project1.git
.git目录用于放在服务中对外使用,目录有写权限,就有推送权限


建立git用户时指定SHELL 为 /usr/local/bin/git-shell 
useradd -s /usr/local/bin/git-shell git (可设置完成后再修改)

用户机 ssh-keygen 会要求输入密码(可不输)
传给对方的公钥 ~/.ssh/id_rsa.pub 

服务器收到用户机的公钥后 追加写入 ~/.ssh/authorized_keys 文件,用户就可(使用建立密钥时的密码或无)连接自己机器


git clone git@192.168.0.184:/opt/git_server/project1.git ##只对设置密钥密码为空时才可(linux客户端)

HTTP(S) 协议
cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update

 

客户端
## git clone http://192.168.0.184:80/project1.git

## git remote add local_proj /opt/git/project.git 本地协议  

Git 协议
9418端口,先创建 git-daemon-export-ok 文件,一旦允许该操作，网络上任何一个知道项目 URL 的人将都有推送权限

如何做,为开源匿名只读,要有独的用户验证机制


git branch 查看branch 有 *master
git branch --merged 查看哪些分支已被并入当前分支
git branch --no-merged 查看尚未合并的工作
git branch -d testing 合并后就没用了,删本地分支


git tag -l 查看tag
git remote -v 显示对应的克隆地址


当本地有git版本,服务器上有git版本,都是新建立, 从本地git版本 push报错时
git fetch  提示新branch是  master -> origin/master
git branch 显示的是*master
git status 
git checkout origin/master
git checkout master 切换到master
git merge  <服务器git版本最后的id>


---建分支

git clone -b myBranch ssh://git@xx.com/project.git  直接从分支拉代码

$ git checkout -b myBranch  提示切换到新的分支了
它是下面两条命令的简写 
$ git branch myBranch
$ git checkout myBranch
git push --set-upstream origin myBranch
开发做修改后

把myBranch 合并到master
git checkout master
git merge myBranch  (git merge remotes/origin/myBranch  ) 如有冲突提示符变  (master|MERGING)，如要取消修改git reset 到(master)

合并没用了，就可以删了
git branch -d myBranch 
git branch -r -d origin/myBranch 
git push origin :myBranch

远程没有有remote_branch分支并，本地已经切换到local_branch
git push origin local_branch:remote_branch
git push --set-upstream origin <branch_name>
git push origin myBranch:myBranch
git push <远程主机名> <本地分支名>:<远程分支名>
git remote show 查远程主机名是什么

git push -u origin master
命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了

git branch -a 可以查看到 remotes/origin 开头的远程分支
git branch -r 查看远程分支

git pull <远程主机> <远程分支>:<本地分支>


NetBeans 切换分支生成的命令 git branch --track performance origin/performance

---建tag 
轻量级标签就像是个不会变化的分支
	git tag v1.4-lw
	git tag
	
附注标签  可以加说明   
	git tag -a v1.4 -m 'my version 1.4'
	git show v1.4
	
默认情况下git push 并不会把标签传送到远端服务器上
tag要单独puhs用 git push origin [tagname]
	git push origin  v1.4

	git checkout -b branch-v1.4 v1.4  基于tag建立分支
	
	
---
如果想要恢复到修改之前的状态就使用，即自己的修改不想要了(Totorise SVN的revert某个文件)
git checkout  文件名
 
git reset --hard  <commit Id> 已经commit没有push做取消 ,<commit Id>是回到那次提交的状态，不是对某个文件，全局的  (新加的文件不会被删除)
								已经push回退到某个版本
git revert HEAD

git查看某个文件的修改历史
git log --pretty=oneline 文件名


的分支上开发一半, 发现原有的分支上有紧急的bug， 使用'git stash'就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中 
放心的修 Bug，等到修完Bug，提交到服务器上后，再使用'git stash apply'将以前一半的工作应用回来

你多次使用'git stash'命令后，你的栈里将充满了未提交的代码，'git stash list'命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用'git stash apply stash@{1}
可以使用'git stash clear'来将栈清空。

----  github操作提示
…or create a new repository on the command line

echo "# Record" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/userId/Record.git
git push -u origin master

…or push an existing repository from the command line

git remote add origin https://github.com/userId/Record.git
git push -u origin master

--网页上建立github的项目Record,自己的操作记录
cd C:\temp\Record
git init
git add Record
git commit -m "xxx record version"
git remote add origin https://github.com/userId/Record.git
git push -u origin master

如果在空目录中取代码 git clone https://github.com/userId/Record.git
修改更新,加新文件
git config --global user.email "userId@sina.com"   (windows中保存在用户主目录/.gitconfig)
git config --global user.name "User"
git add *
git commit  -m "2017-05-18 record version" 
git push 弹出UI 要输入用户名密码   (windows下密码保存在控制面板-》用户-》Creddentail manager)

删文件
git rm Not-Offen/Struts-2.x.java
git push

如用TortoiseGit ->Check for modifications 中 Commit 或者revert
			->push

github上的代码库时，如果使用SSH链接
ssh-keygen 然后系统提示输入文件保存位置等信息，连续敲三次回车即可，生成的SSH key文件保存在中~/.ssh/id_rsa.pub
拷贝 .ssh/id_rsa.pub文件内的所以内容，将它粘帖到github帐号管理中的添加SSH key界面中
(登录github->右上方的Accounting settings图标->SSH key->Add SSH key->填一个你自己喜欢的名称即可，然后将上面拷贝的~/.ssh/id_rsa.pub文件内容粘帖到key一栏，在点击“add key”按钮就可以了)
 
----  github

----- git 清除已保存的密码 测试OK  
git config --system --unset credential.helper

---
Git\mingw64\etc\gitconfig 的文件，打开文件
[credential]
XXXX=manager
然后我直接修改，文件吧文[credential] XXXX=manager 直接删除
---
TortoiseGit -》 setttings->Git->点edit systemwide gitconfig按钮

============== 上 Git 
============== MemCache  (memcached-1.4.17)
文档在google上

依赖于libevent(libevent-2.0.21), 如linux内核要有epoll
安装libevent  
./configure && make
make install
 
安装MemCache
./configure --with-libevent=/usr/local
make
make install

/usr/local/bin/memcached -h

启动Memcache的服务器端：
memcached -d -m 10   -u root -l 127.0.0.1 -p 12000 -c 256 -P /tmp/memcached.pid
-d 做服务端
-m 以M为单位的最大内存
-u user 只对root用户运行命令
-p 端口
-l 监听IP,本机IP
-c 最大连接数
-P PID文件只对-d同时有效
-f 增长因子 默认1.25
-vv very verbose
服务器监听端口,通过一定的协议交互来写入数据到服务器内存中


memcached -help 
memcached  -m 64    -l 127.0.0.1 -p 12000 -c 256 -vv (windows版本)
telnet 127.0.0.1 12000
	windows下按ctrl +] 打开回显功能 ->回车
windows下如何命令写错只能新写命令

add <key> <flag> <expire秒或时间戳.0不自动删也可能被删> <值的length>
add new  0  0 5 
回车后输入5个字符值hello后,显示STORED
get new 取值

delete <key> <可选秒数> 表示 删除而且几秒内不能使用同名的键 

replace 修改同add参数,只可对已经存在
set 相当于add 和 replace
set age 0 0 2
输入 18
incr age 1
decr age 1  因是无符号的,不可能<0
stats  显示状,可以看命中数
flush_all  后stats 显示curr_items还有值(过期后并没有删除,只当get时才判断如果过期则删除,再看stats就减少,或者有新值要占用直接用就好),一种惰性删除

防止内存的碎片更少
预先分组多个大小约相同的slab ,每组slab 中 的chunk大小不同,按-f参数来增长,启动可以看日志
在同一个slab 中 chunck 相同
不在同一个slab 中chunck不相同
chunk 存储选用最小,如果还是有空闲空间,是不可避免的
如果当前最小chunk所在slab已经满了,就把老chunk数据踢除(惰性过期 和LRU最近最少使用即多少次没被使用最大的,FIFO,删除)

Key长度限制250字节
Value限制1M

===========postfix===========================
 
源码安装 postfix, 依赖于PCRE , ./configure  && make && make install 安装在/usr/local下 ,
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
建立用户,组 
groupadd  postdrop
useradd postfix

make && make install 会提示输入很多目录,都有默认值 
install_root: [/]
tempdir: 
config_directory: [/etc/postfix]
command_directory: [/usr/sbin]
daemon_directory: [/usr/libexec/postfix]
data_directory: [/var/lib/postfix]
html_directory: [no] 
mail_owner: [postfix]
mailq_path: [/usr/bin/mailq] 
manpage_directory: [/usr/local/man]
newaliases_path: [/usr/bin/newaliases] 
queue_directory: [/var/spool/postfix]
readme_directory: [no]
sendmail_path: [/usr/sbin/sendmail]
setgid_group: [postdrop]

主配置文件是/etc/postfix/main.cf
Postfix主机名称，可使用下面的语句：myhostname = mail.gdvcp.net

“$”来引用该变量，  等号两边需要有空格字符  
如果变量有两个以上的设置值，就必须用逗号“，”或者空格符“ ”将它们分开

mydomain= gdvcp.net

myorigin  的邮件头中mail from的地址

inet_interfaces=localhost，这表明只能在本地邮件主机上寄信  ,一般应是all

mydestination参数非常重要，因为只有当发来的邮件的收件人地址与该参数值相匹配时,才自己接收

mynetworks=192.168.16.0/24，则表示这台邮件主机只转发子网192.168.16.0/24中的客户端所发来的邮件，而拒绝为其他子网转发邮件。


mynetworks-style = class(A,B,C类地址)
mynetworks-style = host
mynetworks-style = subnet


通常，用户不设置mynetworks-style参数，而直接设置mynetworks参数。如果这两个参
数都进行了设置，那么mynetworks参数的设置有效。


relay_domains = gdvcp.net
则表示任何由域gdvcp.net发来的邮件都会被认为是信任的，Postfix会自动对这些邮件进行转发。


要查看Postfix的当前主要配置postconf -n


virtual_alias_domains用来指定虚拟别名域的名称
irtual_alias_maps用来指定含有虚拟别名域定义的文件路径。

示例:
virtual_alias_domains = dzxx.cn，example.com
virtual_alias_maps = hash:/etc/postfix/virtual
/etc/postfix/virtual文件内容,第一列虚拟域或者虚拟域用户 ,  第二列无@ 表示本地linux用户
@dzxx.cn  @gdvcp.net
admin@example.com  lbt
st0321@example.com  st0321001，st0321002
daliu@example.com  lbt，liu6812@163.com

执行:
postmap /etc/postfix/virtual   生成virtual.db
postfix reload



用户别名
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases

示例:/etc/aliases，
st0322:  st0322001，st0322002，st0322003，st0322004
st0323:  :include: /etc/mail/st0323
jcz01:  jczliuming
lm01:  jczliuming，liuming86@163.com

示例:/etc/mail/st0323
st0323001，\
st0323002，\
st0323003，\




postalias /etc/aliases          
postfix reload



SMTP认证机制是通过Cyrus SASL包(Cyrus Simple Authentication and Security Layer)

saslauthd -v 查看所支持的密码验证机制。

/etc/sysconfig/saslauthd中
MECH=shadow    ###直接用/etc/shadow,  ,pam /etc/pam.d/imap

/etc/init.d/saslauthd start
saslauthd -a pam /shadow  这是OK的

testsaslauthd -u 用户 -p  密码  ##测试,日志文件

main.cf文件中
smtpd_sasl_auth_enable = yes
smtpd_sasl_local_domain = '' ##默认的
smtpd_recipient_restrictions = permit_mynetworks,permit_sasl_authenticated, reject_unauth_destination
broken_sasl_auth_clients=yes
smtpd_client_restrictions = permit_sasl_authenticated
smtpd_sasl_security_options = noanonymous  #默认的



（3）smtpd_recipient_restrictions：表示通过收件人地址对客户端发来的邮件进行过滤。通常有以下几种限制规则。

permit_mynetworks：表示只要是收件人地址位于mynetworks参数中指定的网段就可以被转发邮件。

permit_sasl_authenticated：表示允许转发通过SASL认证的邮件。
reject_unauth_destination：表示拒绝转发含未信任的目标地址的邮件。


/etc/init.d/postfix reload (restart)


就必须确保/usr/lib/sasl2/smtpd.conf文件中的内容为：pwcheck_method: saslauthd

测试 telnet localhost 25

telnet localhost 80
ftp> get index.html

输入ehlo 返回当前Postfix所支持的认证方式 两行AUTH ......

iptables -A INPUT  -p tcp   --dport 22 -j ACCEPT 
iptables -A OUTPUT -p tcp   --sport 22 -j ACCEPT
iptables -P INPUT DROP  
iptables -P OUTPUT DROP
iptables -P FORWARD DROP

iptables -I INPUT -p tcp --dport 25 -j ACCEPT

cyrus-imapd(redhat5 光盘中有的 lm_sensors,db4)

另一个 imap 服务器是dovecot1.0.x redhat5 光盘中有的
cp /usr/local/dovecot/etc/dovecot-example.conf /usr/local/dovecot/etc/dovecot.conf
可以直接用dovecot就可以启动与xinetd同
/usr/local/libexec/dovecot/imap-login(或者用pop3-login可加--ssl)

vi /etc/dovecot.conf在protocols = imap imaps 后添加pop3 pop3s 
  

/etc/yum.conf 中keepcache=1是保留文件,0是删
		cachedir=/var/cache/yum

service cyrus-imapd start
cyradm -u cyrus localhost

cyradm --user cyrus --server localhost --auth plain

main.cf 中加入
mailbox_transport = lmtp:unix:/var/lib/imap/socket/lmtp

/etc/sysconfig/cyrus-imapd：用于启动cyrus-imapd服务的配置文件。
/etc/cyrus.conf：是cyrus-imapd服务的主要配置文件，其中包含该服务中各个组件（IMAP、POP3、sieve和NNTP等）的设置参数。
/etc/imapd.conf：是cyrus-imapd服务中的IMAP服务的配置文件

service cyrus-imapd start
chkconfig cyrus-imapd on

源码安装cyrus-imapd
===看doc/index.html===
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure --with-bdb=/usr/local/bdb  
( 要安装Berker DB  ####./configure --with-bdb=/usr/local/bdb --with-sasl=/usr/local/sasl2/ --with-openssl=/usr/local/openssl)--with-cyrus-prefix=/usr/cyrus  --prefix=

make depend
make all CFLAGS=-0  ###不成功
cd perl(cyrus-imapd-src)安装 perl


cyrus-imapd
http://cyrusimap.web.cmu.edu/downloads.html

sasl2.1.22是有的
cyradm 

ln -s /usr/lib/perl5/5.10.0/Shell.pm /usr/lib/perl5/site_perl/5.10.0/Cyrus/IMAP/Shell.pm   ####Cyrus/IMAP/Shell.pm 部分是建的

=====
makedepend
http://www.t2-project.org/packages/makedepend.html

tcl
文档上依赖的
makedepend
perl 5
openssl 0.94
libsasl
libwrap  ftp://ftp.porcupine.org/pub/security/   tcp_wrapper7.6    光盘中有的 默认是安装的
net-snmp http://www.net-snmp.org/download.html   net-snmp-5.4.1.2  光盘中有的 默认是安装的
推荐 flex,gcc
--with-bdb=
--with-libwrap=
--with-snmp=
--with-sasl=

要cyrus用户

passwd cyrus


Cyrus-IMAP的邮件信箱位于/var/spool/imap目录下

关键字user表示信箱类型为用户信箱



 Postfix queues.默认是 [/var/spool/postfix]
不可queue management 组默认postdrop


imap ssl 端口 993
smtp ssl 端口 465

===========上 postfix==========================

===========Imap cyrus
---imap 的安装(http://rpmfind.net)
 rpm -ivh imap-2002d-3.i386.rpm --nodeps
 要修改/etc/xinetd.d/imap文件把disale=yes 改为no,会有143端口监听
 telnet localhost 143 来测试可能还 要libcrypto.so.4

cyrus
./configure --with-dbdir=/usr/local/BerkeleyDB.4.6/
	###--with-bdb-libdir or --with-bdb-incdir configure options.
成功编译后，make depend－》make all CFLAGS=-O(看文档的,可能不行的)

===========Imap Pop3  dovecot
  
---------OpenwebMail 
安装目录/var/www/html/和/var/www/cgi-bin/

cd /var/www/cgi-bin/openwebmail［Enter］　　// 进入openwebmail目录
　　　./openwebmail-tool.pl -init［Enter］　　// 软件包初始化
		当屏幕上显示"Please hit 'Enter' to continue or Ctrl-C to break."时，单击回车键继续。


==========Squid ,浏览器设置代理
代理服务器和Web缓存服务器
CDN(Content Delivery Network) 缓存  Edge Side Includes (ESI)

squid-3.5.22.tar.gz

./configure --prefix=/usr/local/squid
make all    ## 不能运行,如yum install squid后又可以了,知道依赖什么
make install

/usr/local/squid/etc/squid.conf		配置
	http_port 3128
	
/usr/local/squid/sbin/squid -z		安装
/usr/local/squid/sbin/squid			启动 报错???

----yum install squid
vi /etc/squid/squid.conf
service squid start  如 CentOS 跳到 /bin/systemctl start  squid.service
squid -k reconfig 重新加载配置
--- squid.conf 配置
http_port 3128
access_log /var/log/squid/access.log
cache_dir  /var/spool/squid/
visible_hostname  10.0.0.1

acl localnet src 10.0.0.0/8    		#localnet自己起的名字
acl all src 0.0.0.0/0.0.0.0 

http_access deny  localnet
http_access allow all

浏览器设置代理  10.0.0.1  3128


============== Nginx 比 Squid 强
最新稳定版本1.14  有windows 版本.zip文件 
Nginx Plus 收费版本

如何 https ,TLSV1.2,TLS( Transport Layer Security )

​N​e​t​S​c​a​l​e​r​ 和 A10 EX Series  类似于F5,Radware 的硬件 ,负载均衡器
Apache的 mod_proxy和mod_cache结合使用也可以实现对多台app server的反向代理和负载均衡，但是在并发处理方面apache还是没有 nginx擅长


nginx 有一个 master 进程(读配置,维护worker进程) 和几个 worker进程(处理请求),基于OS的事件模型,默认进程数是CPU的核数

流量控制 
URL rewrite：URL重写
reverse proxy：反向代理
做缓存服务器  
实现对web服务的负载均衡
安装第三方插件，实现健康状态监测


源码编译,要C++编译器 yum list| grep gcc-c++, 依赖于  PCRE (Perl Compatible Regular Expressions)库(不是2版本) 

http://nginx.org/packages/ 有二进制包
http://nginx.org/packages/sles/15/x86_64/RPMS/
http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.14.0-1.el7_4.ngx.x86_64.rpm  下载不了，网站问题
http://nginx.org/packages/rhel/7/x86_64/RPMS/nginx-1.14.0-1.el7_4.ngx.x86_64.rpm   下载OK
/usr/sbin/nginx ,man nginx 默认配置文件 /etc/nginx/nginx.conf

export PATH=/usr/sbin:$PATH


也可/etc/yum.repos.d/nginx.repo 
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/
gpgcheck=0
enabled=1


默认安装在/usr/local/nginx,包括日志
./confure   --with-pcre=../pcre-8.41  (CentOS7自带 pcre-8.32 apache也是用这个,如用 --with-pcre=/usr   --with-zlib=/usr可能不行)
make
make install


/usr/local/nginx/sbin/nginx 启动  默认监听80端口
/usr/local/nginx/sbin/nginx -s stop   (-s signal)快速退出 ，reload重读配置文件 ，quit 和平退出
	stop — fast shutdown
	quit — graceful shutdown
	reload — reloading the configuration file,如果配置有错,就停止worker(处理完正处理的连接)进程
	reopen — reopening the log files

/usr/local/nginx/sbin/nginx  -t 检查配置文件语法正确性
nginx -v  (version)
nginx -h  (help)
	-p prefix     : set prefix path (default: /etc/nginx/)
	-c filename   : set configuration file (default: /etc/nginx/nginx.conf)

--/usr/local/nginx/conf/nginx.conf   
每个server块以listen和server_name做区分

http{
	 server {  虚拟主机
		#listen       80;		注释的配置,就是默认的配置,默认监听80端口
		server_name  localhost;
		location / {  			是http请路径
				root   html;	是安装目录下的html目录
				index  index.html index.htm;
		 }
	 }
}

配置层级结构 http->server->location , events 和http同级

server   
{
	listen 8080;
	root /data/up1;   页面所在本地目录
	location / {
	}
}

#一个server下可有多个location
#一个http下可有多个 server,同时http和https
server {
	location / {
		proxy_pass http://localhost:8080;   代理
	}

	location /images/ {   请求 /images 对应本地/data/images/目录
		root /data;
	}
}
server 组中
location ~ \.(gif|jpg|png)$ {     #正则表达式以~.开头表示,(\.是转义)  ,即以.gif,.jpg,.png结尾的的请求到指定目录去读
	root /data/images;
}

 
upstream  nginx支持4种Load Balancing算法，要在http组中

1 Round Robin 轮询(默认)    有两台机器测试下来,每台机器执行两次后再切换机器,后端服务器down掉，自动切除。
	upstream backend {
	   server backend1.example.com;
	   server backend2.example.com;
	}
	location / {
		proxy_pass http://backend;
		proxy_buffering off; #默认on打开的,会使请求变慢 !!!!!
		
	}
2. Least Connections  ,最小的； 最少的little的最高级  
	upstream backend {
		least_conn;
		server backend1.example.com;
		server backend2.example.com;
	}

3 ip_hash 		每个请求按访问ip的hash结果分配，每个访客有固定的后端服务器，可以解决session问题
	upstream backend {
		ip_hash;
		server backend1.example.com;
		server backend2.example.com;
		server backend3.example.com down; 临时下线
	}
4 Generic Hash  按用户定义的key 如URL，按访问的url的hash结果分配，使每个url定向到同一个后端服务器，后端为缓存服务器比较有效。
	upstream backend {
		hash $request_uri consistent;  # ketama 一致性hash
		server backend1.example.com;
		server backend2.example.com;
	} 
Round Robin 方式参数 
	weight 		设定服务器权值 ,默认weight=1
		upstream backend {
			server backend1.example.com weight=5;
			server backend2.example.com;
			server 192.0.0.1 backup;#只有其它服务无效时才接收请求
		}
	   

固定Session方式  可使用上面的hash or ip_hash 
	
设置最大连接数 max_conns=3;超出放queue,如果其它工作进程打开了 keepalive 这个参数会被忽略
upstream backend {
    server backend1.example.com max_conns=3;
    server backend2.example.com;
    queue 100 timeout=70;
}

#被动健康检查 max_fails=3 fail_timeout=30s;
upstream backend {
    server backend1.example.com;
    server backend2.example.com max_fails=3 fail_timeout=30s;
    server backend3.example.com max_fails=2;
}
#活动健康检查 NGINX Plus 支持
http {
    upstream backend {
        zone backend 64k;
        server backend1.example.com;
        server backend2.example.com;
        server backend3.example.com;
        server backend4.example.com;
    }
    server {
        location / {
            proxy_pass http://backend;
            health_check;
        }
    }
}


示例
upstream http_server 
{
　　ip_hash;
　　server 127.0.0.1:9090 down;			--down暂时不参与负载，不进行反向代理
　　server 127.0.0.1:8080 weight=2;		--weight默认为1，weight越大，负载的权重越大
　　server 127.0.0.1:6060;
　　server 127.0.0.1:7070 backup;			--其它为down或者忙时候，请求backup机器
}    


nginx对静态资源 html静态页面缓存
location ~* .(ico|gif|jpg|jpeg|png|js|css|mp3|mp4) {
  root  /var/www/opkeep;
  expires 30d;
}



proxy_cache_path /data/nginx/cache keys_zone=one:10m;  用本地文件系统去缓存，keys_zone指定名字，和共享内存大小，用于存无数据
server {
	proxy_cache one;  用上面的名字
	location / {
		proxy_pass http://localhost:8000;
		proxy_read_timeout  60s; --for reading a response from the proxied server
		proxy_send_timeout 60s; -- for transmitting a request to the proxied server 没用
	}
}
------上传文件大小限制
location / {
            root   html;
            index  index.html index.htm;
            client_max_body_size    500m;
  } 
-----自定义错误页
放在    server 下和 location /  下

	error_page  502   /50x.html;   #后台服务全部不可用时报 502 Bad Gateway
	location = /50x.html {
			root   html;  #windows下安装目录的html(linux是/usr/share/nginx/html)目录有/50x.html 
	}
	
------nginx  HTTP2
源码编译增加
--with-http_v2_module 选项
--with-http_ssl_module

---nginx.conf
listen 443 ssl http2 default_server;  未试

------nginx Memcached
server {   
    location / {
        set            $memcached_key "$uri?$args";
        memcached_pass 127.0.0.1:11211;
        error_page     404 502 504 = @fallback;
    }
    location @fallback {
        proxy_pass     http://backend;
    }
}

 
------nginx  fastcgi  PHP
CGI(Commmon Gateway Interface)
fastcgi应用程序(可以使用使用C/C++,python,PHP编写),
	单独的进程(出错不影响nginx)一直启动着(老的CGI是每次用的时候启动,性能差)
	apache是把cgi嵌入进来 (SAPI就是Server API 就是合并到服务器中,语言开发有限制,即apache的php模块只能用C/C++) 

	
PHP 编译加 --enable-fastcgi ,--enable-fpm (fastcgi process manager 有配置文件php-fpm.conf 有配置listen_address,allowed_clients ,php-fpm start)

#windows PHP 打开配置修改
extension_dir = "D:/software/php-7.2.8-Win32-VC15-x64/ext"
extension=mysqli
cgi.force_redirect = 1 
cgi.fix_pathinfo = 1 
cgi.rfc2616_headers = 1

#windows (D:\software\php-5.6.37-Win32-VC11-x64>)用 php-cgi.exe -b 127.00.1:9000 -c php.ini 启动



用 ngx_http_fastcgi_module 模块

#配置文件中也有示例,打开#后做修改
location ~ \.php$ {
	#root  			html;    		#修改目录,windows以/分隔, 同location / {root  xx的值;}
    fastcgi_pass  localhost:9000;  #php-fpm 的listen_address
    fastcgi_index index.php;

    #fastcgi_param SCRIPT_FILENAME /home/www/scripts/php/$fastcgi_script_name;  #对方机器的指定目录找php文件
	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;   # 原/scripts为修改 $document_root 即root的值
    
	fastcgi_param QUERY_STRING    $query_string;
    fastcgi_param REQUEST_METHOD  $request_method;
    fastcgi_param CONTENT_TYPE    $content_type;
    fastcgi_param CONTENT_LENGTH  $content_length;
	include        fastcgi_params;
 
}

D:\software\nginx-1.14.0\nginx-1.14.0> nginx.exe -p D:\software\nginx-1.14.0\nginx-1.14.0
-p(prefix)

<?php
phpinfo();
?>
测试成功
------nginx  限流
添加limit_zone和limit_req_zone

添加limit_conn 和limit_req

1、limit_conn_zone

2、limit_req_zone

3、ngx_http_upstream_module

----- rockmongo  

进入首页提示下载php_mongo.dll (http://pecl.php.net/package/mongo) 放在php安装解压的ext目录中 
注意支持的PHP版本,如php_mongo-1.6.16-5.6-ts-vc11-x64 支持 PHP5.6  
php.ini中增加  extension=php_mongo.dll
可以进入页面, 但好像不能对Mongo4 上面用??? 

----phphbaseadmin
	报PHP(php-5.6.37)语法错误
	
------nginx https ssl 
http ssl 默认端口443


------nginx cluster



================OpenResty
由中国人发起
基于nginx,使用lua 语言

源码安装

cd openresty-1.15.8.1

 ./configure -j2
 提示 you need to have ldconfig in your PATH env when enabling luajit. 可以使用yast安装luajit
ldconfig在/sbin/下，PATH中没有  export PATH=$PATH:/sbin
报 ./configure: error: the HTTP rewrite module requires the PCRE library (yast可安装，pcre2-devel不行, pcre-devel可以的)
报 ./configure: error: SSL modules require the OpenSSL library. (yast可安装 libopenssl-1_1-devel)
gmake
gmake install

export PATH=/usr/local/openresty/bin:$PATH
export PATH=/usr/local/openresty/nginx/sbin:$PATH

resty -e 'print("hello, world")'

mkdir openResty_Data
cd  openResty_Data
mkdir logs/ conf/

--vi conf/nginx.conf
worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;
        location / {
            default_type text/html;
			#这里做了增强
            content_by_lua_block {
                ngx.say("<p>hello, world</p>")
            }
        }
    }
}

nginx -p `pwd`/ -c conf/nginx.conf



================Kong
基于openResty
API网关   将安全认证，流量控制，审计日志，黑白名单等实现

有docker ， kubernate 版本，
没有windows版本

源码安装依赖于  OpenResty 1.13.6.2  依赖openssl.h

依赖于luarocks  (可以yast安装)
依赖于 lua.h,
		安装lua53-devel-5.3.4 依赖于
				lua-macros-20170611-lp151.2.70.noarch.rpm
		安装后lua.h在/usr/include/lua5.3/目录
	gcc提示要求5.3版本 
	不能源码安装lua(除非修改PREFIX), 因为找 /usr/include/lua5.3
	cd lua-5.3.0  
	make linux   依赖 <readline/readline.h> yast可安装 readline-devel (即最新的7版本)
	sudo make install INSTALL_TOP=/usr
	sudo make uninstall

方式一
luarocks install kong 1.2.1-0   #Lua 包管理工具Luarocks,类似 maven,npm

luarocks 的默认下载地址是 https://luarocks.org 
可用下面2个镜像
http://luafr.org/moonrocks/
http://luarocks.logiceditor.com/rocks

luarocks --server=http://luafr.org/moonrocks/ install kong 1.2.1-0  
Warning提示安装 luasec 支持https

后面报  (和openResty没关系)
bit.c:79:2: error: #error "Unknown number type, check LUA_NUMBER_* in luaconf.h"
 #error "Unknown number type, check LUA_NUMBER_* in luaconf.h"


方式二 
https://github.com/kong/kong 下载源码zip  目前版本 kong-1.2.1
cd kong
sudo make install
	 也是下载 https://luarocks.org/luabitop-1.0.1-1.src.rock 形式安装，还不能指定server
    也是一样报  bit.c:79:2: error: #error "Unknown number type, check LUA_NUMBER_* in luaconf.h"
 #error "Unknown number type, check LUA_NUMBER_* in luaconf.h"
		
		可能是luabitop-1.0.1-1.src.rock 代码问题, 用lua53-devel-5.3.4不行，源码安装lua-5.3.0  也不行
	
目前openSUSE下没办法了，用docker版本吧

----kong centOS
cd /etc/yum.repos.d/
vi kong.repo 写入
[kong]
name=kong
baseurl=https://kong.bintray.com/kong-rpm/centos/7
gpgcheck=0
keepcache=1 
 
 
sudo yum install kong 最新版本是不稳定
sudo yum install kong-1.2.0
ls /var/cache/yum/x86_64/7/kong/packages/
有保留 kong-1.2.0.el7.noarch.rpm

postgreSQL

CREATE USER kong;
ALTER USER kong WITH password 'kong';
CREATE DATABASE kong OWNER kong;

kong migrations bootstrap [-c /path/to/kong.conf]

kong start [-c /path/to/kong.conf]

curl -i http://localhost:8001/

本机仿问外网IP就不行了
/etc/kong/kong.conf.default 有配置 admin_listen=127.0.0.1:8001

kong config init 当前目录生成kong.yml

检查配置文件语法
kong check  ./kong.yml

cp /etc/kong/kong.conf.default /etc/kong/kong.conf
admin_listen=127.0.0.1:8001 修改为 0.0.0.0：8001
kong check  /etc/kong/kong.conf
kong stop
kong start -c /etc/kong/kong.conf





--------kong-dashboard web界面工具 linux版本 
 
npm install -g kong-dashboard
版本是 kong-dashboard@3.6.0

kong-dashboard start --kong-url http://127.0.0.1:8001
   --port [port] 
   --basic-auth user1=password1 user2=password2

访问
http://localhost:8080

--------konga web界面工具 linux版本
 使用anjular
 
git clone https://github.com/pantsel/konga.git
cd konga
npm i



开发模式启动
npm start
http://localhost:1337
第一次进入 http://localhost:1337/register 注册Admin用户,如返回错误的json，必须重新注册，如密码简单

生产模式启动

#CREATE DATABASE konga OWNER kong;

node ./bin/konga.js  prepare --adapter postgres --uri postgresql://localhost:5432/konga
cp .env_example  .env
npm run production



----kong docker安装
docker network create kong-net

使用PostgreSQL,启动
docker run -d --name kong-database \
               --network=kong-net \
               -p 5432:5432 \
               -e "POSTGRES_USER=kong" \
               -e "POSTGRES_DB=kong" \
               postgres:9.6
 建立后启动
docker container start kong-database

准备数据库
docker run --rm \
     --network=kong-net \
     -e "KONG_DATABASE=postgres" \
     -e "KONG_PG_HOST=kong-database" \
     -e "KONG_CASSANDRA_CONTACT_POINTS=kong-database" \
     kong:latest kong migrations bootstrap
	 
启动kong ，KONG_DATABASE指定用哪种数据库,这里用 postgres

docker run -d --name kong \
     --network=kong-net \
     -e "KONG_DATABASE=postgres" \
     -e "KONG_PG_HOST=localhost" \
     -e "KONG_CASSANDRA_CONTACT_POINTS=kong-database" \
     -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" \
     -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" \
     -e "KONG_PROXY_ERROR_LOG=/dev/stderr" \
     -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" \
     -e "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl" \
     -p 8000:8000 \
     -p 8443:8443 \
     -p 8001:8001 \
     -p 8444:8444 \
     kong:latest
	 
下次启动
dockerd
docker container start kong


测试有返回json
curl -i http://localhost:8001/
查versio是1.1.2



docker volume create kong-vol
docker volume inspect kong-vol  看MountPoint目录


--------kong-dashboard docker版本
https://github.com/PGBI/kong-dashboard
 

docker run --rm -p 8080:8080 pgbi/kong-dashboard start --kong-url http://127.0.0.1:8001

报连接不上???
 
浏览器打开 http://localhost:8080



================FastDFS-5.08



	logger.h 是依赖 libfastcommon 下载安装 ./make.sh  ./make install
./make.sh  
./make install
cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf
修改 base_path=/opt/fastdfs/tracker
默认 port=22122
默认http.server_port=8080

# /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart   
没有监听8080 ????

cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf
修改 base_path=/opt/fastdfs/storage
默认 port=23000

# /usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart

cp /etc/fdfs/client.conf.sample  /etc/fdfs/client.conf 
修改 base_path=/opt/fastdfs/client
	 tracker_server=127.0.0.1:22122

# /usr/bin/fdfs_test /etc/fdfs/client.conf upload /usr/include/stdlib.h

# /usr/bin/fdfs_monitor <client_conf_filename>


---
http.anti_steal.check_token=true
http.anti_steal.secret_key=123456

================linux NIS  类似   Windows  domain 
要有下面的rpm包
yp-tools： 提供NIS相关查寻指令
ypbind ：提供Client的设置
ypserv ： 提供server的设置
portmap ：RPC所需要的信息
 

　
cat /etc/fstab 根目录　就是xfs　类型的
 
 

========================== Sphinx  基于SQL 的全文搜索  可MySQL
Coreseek 带有中文分词
 

==========================配置管理
--------- Ansible 配置管理
让我们自动化部署APP
自动化运维工具  实现批量系统配置，批量程序部署，批量运行命令
没有界面,使用python开发
 
 https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html  
	Tarballs of Tagged Releases  下载 ansible-2.8.1.tar.gz 包
	Latest Releases via Pip			使用 pip install --user ansible
	Ansible on GitHub
	https://github.com/ansible/ansible

ansible-2.7.10-lp151.1.1.noarch.rpm
openSUSE-leap-15.1 DVD自带的依赖
 rpm -ivh ./x86_64/python3-bcrypt-3.1.4-lp151.3.1.x86_64.rpm ./x86_64/python3-MarkupSafe-1.0-lp151.2.5.x86_64.rpm ./x86_64/libsodium23-1.0.16-lp151.4.3.x86_64.rpm ./x86_64/python3-PyYAML-3.13-lp151.1.1.x86_64.rpm ./noarch/python3-pytz-2018.5-lp151.1.1.noarch.rpm ./noarch/python3-Babel-2.5.1-lp151.2.2.noarch.rpm ./noarch/python3-Jinja2-2.10.1-lp151.1.1.noarch.rpm
 

Control Node不支持windows系统
Managed Node  使用ssh,sftp

 ansible --version 
 可显示配置文件路径   config file = /etc/ansible/ansible.cfg


vim /etc/ansible/hosts 添加管理主机的IP地址列表

控制主机中生成ssh密钥对
ssh-keygen -t rsa




--------- FIT2CLOUD devops
	运维打包部署工具，可一次部署多台服务器  国产，收费
 

========================== 性能监控
---------Zabbix 性能监控 最常用的
开源
官方最新是4.2版本，有SUSE Linux，CentOS版本，还有docker镜像版本,源代码版本4.2.3
有zabbix-agents


Zabbix proxy 可以代替 Zabbix server采集性能和可用性数据。
Zabbix proxy在Zabbix的部署是可选部分；但是proxy的部署可以很好的分担单个Zabbix server的负载。Zabbix proxy 需要使用独立的数据库

 
Zabbix agents 部署在被监控目标上，用于主动监控本地资源和应用程序，并将收集的数据发送给 Zabbix server。


要下载的
zabbix-server-mysql-3.0.27-lp151.1.1.x86_64.rpm   或  zabbix-server-postgresql-3.0.27-lp151.1.1.x86_64
zabbix-server-3.0.27-lp151.1.1.x86_64.rpm

openSUSE-leap-15.1 DVD带的依赖
rpm -ivh  psqlODBC-10.01.0000-lp151.2.3.x86_64.rpm unixODBC-2.3.6-lp151.2.3.x86_64.rpm libssh2-1-1.8.0-lp151.5.1.x86_64.rpm libmariadb3-3.0.7-lp151.2.1.x86_64.rpm libpq5-10.6-lp151.1.4.x86_64.rpm libmariadb3-3.0.7-lp151.2.1.x86_64.rpm 

zabbix-3.0版本不支持MySQL8.0,最高支持到5.7.x ，支持PostgreSQL 8.1 及以后版本
zabbix-4.0 和 4.2版本可以支持MySQL8.0

---MySQL

create database zabbix character set utf8 collate utf8_bin;
create user zabbix@localhost identified by 'zabbix';
grant all privileges on zabbix.* to zabbix@localhost ;
ALTER USER zabbix@localhost IDENTIFIED WITH mysql_native_password   BY 'zabbix';

create user zabbix@'%' identified by 'zabbix';
grant all privileges on zabbix.* to zabbix@'%' ;
ALTER USER zabbix@'%' IDENTIFIED WITH mysql_native_password   BY 'zabbix';


mysql -uzabbix -p zabbix  < /usr/share/doc/packages/zabbix-server/mysql/schema.sql
mysql -uzabbix -p zabbix  < /usr/share/doc/packages/zabbix-server/mysql/data.sql
mysql -uzabbix -p zabbix  < /usr/share/doc/packages/zabbix-server/mysql/images.sql

--- postgresql  
bin/createuser --pwprompt zabbix
bin/createdb -O zabbix -E Unicode -T template0 zabbix

-O, --owner
-E, --encoding
-T, --template=TEMPLATE      template database to copy

PostGreSQL开启远程登录
/opt/pgsql/./data/pg_hba.conf
#增加如下
host		 all			 all 					0.0.0.0/0				md5
/opt/pgsql/./data/postgresql.conf
#listen_addresses = 'localhost'    修改为
listen_addresses = '*' 

cat  /usr/share/doc/packages/zabbix-server/postgresql/schema.sql | bin/psql zabbix  (这样执行是超级用户的表)
cat  /usr/share/doc/packages/zabbix-server/postgresql/schema.sql | bin/psql -h 127.0.0.1 -p 5432 -d zabbix -U zabbix -W 
//如果要为zabbix-proxy的数据库，就不用下面两行了
cat images.sql | sudo -u zabbix psql zabbix
cat data.sql | sudo -u zabbix psql zabbix
---

/etc/zabbix/zabbix-server.conf 
	#DBSocket= 关闭MySQL选项 
	DBHost=localhost #localhost表示使用mysql，其它情况(注释这行)表示使用postGreSQL
	DBPort=5432
	DBName=zabbix
	DBSchema=public
	DBUser=zabbix
	DBPassword=zabbix
	
	ListenPort=10051
   LogFile=/var/log/zabbixs/zabbix-server.log

/usr/sbin/zabbix-server  启动报读配置权限 ，写日志权限问题


systemctl list-units  
systemctl list-unit-files | grep zabbix-server
systemctl start zabbix-server

 从源码编译安装 zabbix-4.2
 ./configure --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2
 configure: error: LIBXML2 library not found  							(yast 安装 libxml2-devel)
configure: error: Not found Net-SNMP library								(yast 安装 net-snmp-devel)
configure: error: Unable to use libevent (libevent check failed)	(yast 安装 libevent-devel)
configure: error: Curl library not found  								(yast 安装 libcurl-devel)
configure: error: Unable to use libpcre (libpcre check failed)		(yast 没有 libpcre-devel????)
 
	
----安装 zabbix-phpfrontend-3.0.27-lp151.1.1.x86_64.rpm 
	openSUSE-leap-15.1 DVD带的依赖
	rpm -ivh  php7-xmlreader-7.2.5-lp151.5.44.x86_64.rpm php7-7.2.5-lp151.5.44.x86_64.rpm php7-iconv-7.2.5-lp151.5.44.x86_64.rpm php7-dom-7.2.5-lp151.5.44.x86_64.rpm php7-tokenizer-7.2.5-lp151.5.44.x86_64.rpm php7-pdo-7.2.5-lp151.5.44.x86_64.rpm php7-json-7.2.5-lp151.5.44.x86_64.rpm php7-ctype-7.2.5-lp151.5.44.x86_64.rpm php7-xmlwriter-7.2.5-lp151.5.44.x86_64.rpm php7-sqlite-7.2.5-lp151.5.44.x86_64.rpm ../noarch/system-user-wwwrun-20170617-lp151.4.70.noarch.rpm

有 /etc/apache2/conf.d/zabbix.conf   还要DVD 安装apach2的包,systemctl start apache,journal -xe看日志 ，如日志右边看不全，使用右键头
 
#启用apache模块 php
a2enmod php7 因为安装的是apache2-mod_php7 (文档上说zabbix-3不支持php7,测试最后可以使用frontend)

#启用ZABBIX标志，为/etc/apache2/conf.d/zabbix.conf文件使用
a2enflag ZABBIX 


访问 http://127.0.0.1/zabbix  进入setup.php配置界面
提示失败项 
					 			Current value	Required	
PHP option "post_max_size"			8M			16M	Fail
PHP option "max_execution_time"	30			300	Fail
PHP option "max_input_time"		60			300	Fail
PHP databases support				off		 		Fail
PHP gettext								off				Warning  用于汉化包 (php7-gettext)
 
vi /etc/php7/apache2/php.ini进行修改 
DVD安装 php7-mysql 或 php7-pgsql
可配置数据库IP,端口,数据库名，schema(默认public),用户名，密码 (zabbix-3.0测试过PostGreSQL10可以配置上,zabbix-3.0测试过MySQL8可以配置上)
有配置Zabbix server IP和端口(10051)
提示下载配置文件 保存为  /usr/share/zabbix/conf/zabbix.conf.php 内容是界面中配置的东西

 http://127.0.0.1/zabbix 进行访问 默认的用户名／密码为 Admin/zabbix   
 	测试进入了,zabbix-3.0用MySQL8报语法错误
 				zabbix-3.0用PostGreSQL10正常
 
 Zabbix界面，Administrator->User ->点用户 ->language选择 zh_CN->update按钮 再 F5刷新
 
 
----安装 zabbix-proxy,zabbix-agent
	DVD   中自带的 noarch/system-user-wwwrun-20170617-lp151.4.70.noarch.rpm
 	https://repo.zabbix.com/zabbix/3.0/rhel/7/x86_64/
 	
安装 zabbix-agent-3.0.27-lp151.1.1 
/etc/zabbix/zabbix-agentd.conf
	Server=127.0.0.1  #指定zabbix-server或zabbix-proxy的IP 
	ServerActive=127.0.0.1  #指定zabbix-server或zabbix-proxy的活动检查IP
	Hostname=  #配置自己的主机名，被监视机器的
	ListenPort=10050
	LogFile=/var/log/zabbix/zabbix-agentd.log
	
	
systemctl restart zabbix-agentd
在所有的监控机器上运行
/usr/sbin/zabbix-agentd
 
agent-server运行 
zabbix-get -s192.168.6.132 -p 10050 -k mysql.ping  
报 Check access restrictions in Zabbix agent configuration


 
---docker版本

docker pull zabbix/zabbix-server-mysql
docker run --name some-zabbix-server-mysql -e DB_SERVER_HOST="some-mysql-server" -e MYSQL_USER="some-user" -e MYSQL_PASSWORD="some-password" -d zabbix/zabbix-server-mysql:tag


========================== SonarQube
支持插件安装

使用见Dev_software

有 docker版本  docker pull sonarqube
解压下载的 sonarqube-7.8.zip (Community版本)

--演示安装
# On Windows, execute:
C:\sonarqube\bin\windows-x86-xx\StartSonar.bat

# On other operating systems, as a non-root user execute:
/opt/sonarqube/bin/[OS]/sonar.sh console


http://localhost:9000   admin/admin

建立项目 javase

mvn sonar:sonar \
  -Dsonar.projectKey=javase \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.login=0c6504415bca44d63d0dc1074e8fb3462aef1d8e  是页面中提示生成的码
  
-- 生产环境安装
支持数据库有 SQL Server, Oracle,PostgreSQL

sonarqube-7.8 支持Java 12
解压目录logs/sonarqube.log看日志, 
	设置内核参数普通不会立即生效，可能要重启
	elastic search不能以root用户启动
	
--PostgreSQL
不使用默认的public

ALTER USER sonar SET search_path to mySonarSchema;

---
版本要求JDK-11 , PostgreSQL最好为10 

sysctl vm.max_map_count 最好>= 262144
sysctl fs.file-max 最好>=65536


sysctl -w vm.max_map_count=262144
sysctl -w fs.file-max=65536
#ulimit -u 4096

/etc/sysctl.conf
vm.max_map_count=262144
fs.file-max =65536


/sbin/sysctl -p

cat /proc/sys/fs/file-max

 
 
openSUSE-leap-15.1 下的 /etc/sysctl.conf文件有提示 sysctl 会读下面文件
#   /boot/sysctl.conf-<kernelversion>
#   /lib/sysctl.d/*.conf
#   /usr/lib/sysctl.d/*.conf
#   /usr/local/lib/sysctl.d/*.conf
#   /etc/sysctl.d/*.conf
#   /run/sysctl.d/*.conf
#   /etc/sysctl.conf



/etc/security/limits.conf
*  		 soft   nofile   65536
*  		 hard   nofile   65536
sonarqube   -    nproc    4096

#  nproc - max number of processes
#  nofile - max number of open file descriptors

添加session required pam_limits.so 到 /etc/pam.d/login中


如使用systemd服务，即systemctl
[Service]
...
LimitNOFILE=65536
LimitNPROC=4096

vi /etc/systemd/system.conf 
DefaultLimitNOFILE=65536
DefaultLimitNPROC=4096

man systemd-system.conf

ulimit -u  默认30792  the maximum number of user processes
ulimit -n  默认1024	the maximum number of open file descriptors

ulimit -Hn  H=Hard    发现只有root 用户生效，普通用户没用，放在/etc/profile 中普通用户又没权限执行,原因是要修改/etc/systemd/system.conf 才对普通用户生效
ulimit -Sn  S=Soft


参考文档 https://www.freedesktop.org/software/systemd/man/systemd.exec.html
 
使用 Elasticsearch 默认使用 seccomp (SECure COMPuting) filter

检查内核是否使用了 seccomp,
grep SECCOMP /boot/config-$(uname -r)
	CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
	CONFIG_SECCOMP_FILTER=y
	CONFIG_SECCOMP=y
如结果不是上面的说明没有激活SECCOMP, 要打开 /opt/sonarqube-7.8/conf/sonar.properties 文件配置 sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false

--PostgreSQL
bin/createdb sonarqube
bin/psql sonarqube
	CREATE USER sonarqube;
	ALTER USER sonarqube WITH password 'sonarqube';
	-- CREATE DATABASE kong OWNER kong;
	alter database sonarqube owner sonarqube；


sonar.jdbc.username=sonarqube
sonar.jdbc.password=sonarqube
sonar.jdbc.url=jdbc:postgresql://127.0.0.1:5432/sonarqube

除Oracle外的其它JDBC jar都是提供的 , 解压目录/extensions/jdbc-driver/oracle ,
解压目录/lib/有mysql的驱动,但配置文件中说不支持MySQL了

配置Elasticsearch storage位置,默认是解压目录的data目录
#sonar.path.data=data
#sonar.path.temp=temp

sonar.web.host=0.0.0.0
sonar.web.port=9000
sonar.web.context=/sonarqube


bin/[OS]/sonar.sh start
bin/linux-x86-64/sonar.sh  start  启动要花点时间 


http://127.0.0.1:9000/sonarqube    界面会显示正在启动 login-> admin/admin

---汉化
https://docs.sonarqube.org/latest/extend/i18n/
org/sonar/l10n/<plugin key>_<language>.properties

https://github.com/SonarQubeCommunity/sonar-l10n-zh  查兼容版本 下载 sonar-l10n-zh-plugin-1.28.jar
.jar包中有 org/sonar/l10n/core_zh.properties

将其放在./extensions/plugins/目录下,重启SonarQube 
Administration->Marketplace->输入chinese搜索发现已经安装了
浏览器也要设置语言为中文是第一个，测试成功


------------ JIRA Software 8.2.2 收费 try free
Java开发

su root (也可不用root,但要手工指定安装目录/opt/atlassian/jira )
./atlassian-jira-software-8.2.2-x64.bin  交互提示安装
OK [o, Enter], Cancel [c]
按回车

Express Install (use default settings) [1], Custom Install (recommended for advanced users) [2, Enter], Upgrade an existing JIRA installation [3]
输入1

Installation Directory: /opt/atlassian/jira 
Home Directory: /var/atlassian/application-data/jira 
HTTP Port: 8080 
RMI Port: 8005 
Install as service: Yes 
Install [i, Enter], Exit [e]
输入i

Start JIRA Software 8.2.2 now?
Yes [y, Enter], No [n]
输入y

就可打开 http://localhost:8080 一进页面就可选中文 -> 
	我将设置它自己 ->其它数据库 (推荐用于正式生产环境)-> 支持MySQL5.7+/PostgreSQL/Oracle

---MySQL
create database jira character set utf8 collate utf8_bin;
create user jira@localhost identified by 'jira';
grant all privileges on jira.* to jira@localhost ;
ALTER USER jira@localhost IDENTIFIED WITH mysql_native_password   BY 'jira';

create user jira@'%' identified by 'jira';
grant all privileges on jira.* to jira@'%' ;
ALTER USER jira@'%' IDENTIFIED WITH mysql_native_password   BY 'jira';

---
设置数据库主机，用户名，密码，数据库，报 找不到驱动：com.mysql.jdbc.Driver
要license key的


启动：
[jira_home]/bin/start-jira.sh
停止：
[jira_home]/bin/stop-jira.sh
提示 CATALINA_HOME:   /opt/atlassian/jira
 
 

--------- 禅道项目管理软件 -11.5.1
有中文版 有国际版，有源码版本，有linux二进制版本
开源  用PHP开发 用 Apache和MySQL

源码包安装(禅道英文名 ZenTao)
	将其解压缩，得到zentaopms目录。拷贝到webserver对应的目录，比如Apache2在openSUSE的默认目录 是/srv/www/htdocs 
	通过浏览器访问http://ip:端口/zentaopms/www/index.php，系统会自动转入安装程序。 


a2enmod php7
sudo chown -R dell /srv/www/htdocs/
cp -r ./zentaopms/* /srv/www/htdocs/
systemctl start apache2
http://127.0.0.1/www/install.php 有语言可以切换 

会做一些检查，如下失败项
PDO_MySQL 			Not Loaded							Failed(×) 	Edit php.ini to load PDO_MySQL extension.
Zlib Extension 	Not Loaded 							Failed(×) 	Edit php.ini to load zlib extension.
Curl Extension 	Not Loaded 							Failed(×) 	Edit php.ini to load curl extension.
Temp Directory 	Found Not Writable 				Failed(×) 	"/srv/www/htdocs/tmp/" permison has to be changed.
																				Run chmod o=rwx -R /srv/www/htdocs/tmp/ to change it.
Uploaded File Directory 	Found Not Writable 	Failed(×) 	"/srv/www/htdocs/www/data" permison has to be changed.
																				Run chmod o=rwx -R /srv/www/htdocs/www/data to change it. 
根据提示执行
chmod   o=rwx -R /srv/www/htdocs/tmp/
chmod   o=rwx -R /srv/www/htdocs/www/data

vi /etc/php7/apache2/php.ini  有如下，不必动
;extension=curl
;extension=pdo_mysql

yast在线安装 php7-curl,php7-zlib, DVD安装 php7-mysql,php7-pdo(已经安装)

页面提示配置数据库,表前缀默认配置为zt_，可以选择语言
create database zentao character set utf8 collate utf8_bin;
create user zentao@localhost identified by 'zentao';
grant all privileges on zentao.* to zentao@localhost ;
ALTER USER zentao@localhost IDENTIFIED WITH mysql_native_password   BY 'zentao';

create user zentao@'%' identified by 'zentao';
grant all privileges on zentao.* to zentao@'%' ;
ALTER USER zentao@'%' IDENTIFIED WITH mysql_native_password   BY 'zentao';

会花点时间初始化执行SQL
提示将屏幕内容保存到 /srv/www/htdocs/config/my.php 中 (要新建文件)
<?php
$config->installed       = true;
$config->debug           = false;
$config->requestType     = 'GET';
$config->timezone        = 'Asia/Shanghai';
$config->db->host        = '127.0.0.1';
$config->db->port        = '3306';
$config->db->name        = 'zentao';
$config->db->user        = 'zentao';
$config->db->password    = 'zentao';
$config->db->prefix      = 'zt_';
$config->webRoot         = getWebRoot();
$config->default->lang   = 'zh-cn';
?>

提示配置 管理员帐号，完成后提示 请/srv/www/htdocs/www 目录下的 install.php 和 upgrade.php 文件 
只有删除后才可进入登录页，初始登录会要求修改密码，要复杂的密码才行。



---------Nagios 监控  


---------Cacti  监控 可以图形监控Apache MySQL,邮件报警
是一个 php 源码的


---------mrtg   Multi Router Traffic Grapher  监控网络链路流量负载
SNMP

源码安装依赖于libgd

yum install mrtg 
/etc/mrtg/mrtg.cfg

========================== Jenkins 使用见Dev_software  

========================== BugTracker 使用见Dev_software
 
 