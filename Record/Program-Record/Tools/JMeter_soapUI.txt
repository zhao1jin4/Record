QC(QUALITY CONTROL)
QA(QUALITY ASSURANCE)
LoadRunner 在NotOffen中

-------Tcpcopy 是一个分布式在线压力测试工具

--- Selenium 浏览器自动化测试框架  可使用Python,Java开发

--- AirtestIDE 网易的 使用python 可以测试anroid/ios游戏,也可web 用 Airtest-Selenium

--- logbase 登录监控抓屏，mstsc只启动 PL/SQL Developer ,可自动登录

--- 还有一种是web页面登录，启动Xshell或者putty的,传文件用sz,rz

=========================JMeter
5 版本要求  JDK8 或JDK9  不支持JDK10, 11

option -> choose language-> Chinese(Simple)

第一步要建立一个线程组


Test Plan->ThreadGroup中的设置
		Number of thread : (windows 下jmeter启动默认有30+线程,启动后明显线程增加)
		Loop Count是每个线程执行多少次
		
		"Ramp-Up in period (in seconds)" 的意思是,所有的线程数在多长时间(秒)内平均启动完成,
		如线程数为10, ramp-up为100钞,即用100秒的时间启动10个线程,每隔10 (100/10)秒启动一次指定线程数(看官方文档)
		ramp(斜道)
Loop Count:5 表示重复做5次

Scheduler Configuration组中 start delay 表示该线程组延迟启动
Duration 运行多长时间 


增加 配置元件->CSV Data Set Config->在Variable Name(comma-delimited)  可以写多个如id,name(对应CSV文件的列数) 在FileName中输入一个完整csv路径,每一行只能有一条数据,最后不要有空行
	以后就可以使用${id} ${name} 来引用 
	
Run->clear 清除记录的日志
	
${__split(${interest_ids},inter,:)}  会显示读到的第一行值如aa:bb ,temp是变量名
${inter_1} 得到的是数组的第一个,即aa

仿装IP
HTTP Request 在Advanced标签 ->Source Address 组中默认下拉是IP/hostname，右侧文本框中输入 CSV配置变量${ipaddr} 

----函数
Tools->Function helper dialog "函数助手对话框"(或者使用快捷键Ctrl+shift+F1)  工具栏上也有按钮

_split 函数参数
	1.要分隔的字串
	2.变量存储
	3.分隔符,默认是","
_Random 函数参数
	1.最小值
	2.最大值
	3.变量存储
_StringFromFile 函数参数
	1.文件路径
	2.变量名存储
	3.文件的开始行数
	4.文件的结束行数
	
_javaScript  函数参数  , 可JavaScript所支持的所有函数 , 如当前的系统日期,时间等
	1. eval的字串
	2. 变量名存储
	
${__time(yyyy-MM-dd HH:mm:ss,now)}  //结果存入变量now
${__time(,)} 会返回当前时间的秒数,可放在表单参数值中
 
${__CSVRead(E:\NEW_\jmeter_user_reg.csv,1)}  读文件第2例,从0开始, 

debug sampler测试


启动用 jmeter -Jgroup1.threads=7 -Jhostname1=www.realhost.edu
${__P(group1.threads)} 函数表示取启动jmeter的-J参数 返回7
${__P(hostname,www.dummy.org)}  如找不到返回第二个默认值


__setProperty('name','value',true) 可选第三个参数true表示返回原来值




工具栏上有一个Toggle按钮，还有一个clear All按钮

右击线程组-》添加-》配置元件-》HTTP请求默认值 

右击线程组-》添加-》配置元件-》HTTP Header Manager,可以增加Content-Type: application/json;charset=UTF-8

右击线程组-》添加-》Sampler(取样器)->HTTP请求  ,(可以选中Redirect Automatically,如http跳转到https)

右击线程组-》添加-》 Assertion->JSON ssertion->json PATH可写 $.data ,可复选Additionally assert value 在expect value中写test data，可有空格，可无'或"

 
右击线程组-》添加-》监听器-》图形结果(第二个) Graph Results->可以看 断点式的图
右击线程组-》添加-》监听器-》聚合报告 Aggregate Report (可以看吞吐率，错误率)
右击线程组-》添加-》监听器-》用表格查看结果 View Results in Table(可以看到每次请求状态，时间)
右击线程组-》添加-》监听器-》查看结果树 View Results Tree (可以看到每次请求和响应的报文)

右击线程组-》添加-》监听器-》 Response Time Graph

右击图形结果->可保存为image


要选中线程组->运行->启动

JSR223 能够让你在java环境中执行JavaScript 
JSR223 PreProcessor
JSR223 PostProcessor

JSR223+Groovy 替代BeanShell(脚本语言运行在java中)

 
------JDBC
右击测试计划-》添加线程组
右击线程组-》添加-》配置元件-》JDBC Connection Configuration->输入 variable Name 如 mysql_pool,url,driver,username,password  (jar包放jmeter/lib下,或选中测试计划 下方classpath中 加jar包)
右击线程组-》添加-》Sampler(取样器)->JDBC Request->输入 variable Name 与上面配置的名字相同,如 mysql_pool ,选 select ，输入select .....
右击线程组-》添加-》断言-》响应断言-》   输入要测试的包含的字符
右击线程组-》添加-》监听器-》断言结果->
右击线程组-》添加-》监听器-》图形结果->
右击线程组-》添加-》监听器-》查看结果树  

set global general_log=ON;
set global log_output='TABLE';
select *  from mysql.general_log  where  argument like 'select count%';

set global general_log=OFF;
truncate table mysql.general_log ;

------上 JDBC

选中测试计划 下方classpath中 加jar包,可以设线程数,运行次数
 
右击线程组 -> 添加 -> 配置元件 ->  用户定义变量 加变量 city_1 ,city_2
右击线程组 -> 添加 -> 逻辑控制器 ->ForEach控制器 ->输入变量前缀: city(对应上面建立的变量),输入变量名称:foreach_city,复选"add _ before number"
	右击 ForEach控制器 -> 添加 -> 逻辑控制器 ->如果(if)控制器  条件中写 "${foreach_city}"=="beijin"
		右击 如果(if)控制器  -> 添加 -> Sampler ->BSF Sampler(DEPRECATE)->Language:选择JavaScript,Parameter:${foreach_city},Script:
			var java_city = '${foreach_city}'+' is our capital';
			java.lang.System.out.println(java_city);//可以在JMeter控制台显示

	 右击 ForEach控制器 -> 添加 -> 配置元件 ->  CSV Data Set Config->FileName:输入文件路径,Delimiter:"," ,Variable Names:输入对应于文件列的变量名
	 右击 ForEach控制器 ->添加 -> sampler->Http请求
		 右击 Http请求 -> 添加 -> 断言->响应断言
		
Add->Post Processor-> JSON Extrator在Json Path Expression写表达式(参考json-path项目)
		
-------JMS
	Add > Sampler > JMS Point-to-Point 
	
-------SMTP 发邮件
	Add > Sampler > SMTP
	
-------TCP 
	Add > Sampler > TCP
	
	
-------Java 自定义	
	Add > Sampler > Java Request
	自已类 implements org.apache.jmeter.protocol.java.sampler.JavaSamplerClient  ( apache-jmeter-4.0\lib\ext\ApacheJMeter_java.jar  ApacheJMeter_core.jar) 
	打成jar包，打依赖的包一起放在 apache-jmeter-4.0\lib\ext
	
public class JMeterRocketMQProducter  implements JavaSamplerClient
{  
	//apache-jmeter-4.0\lib\ext\ApacheJMeter_java.jar  ApacheJMeter_core.jar
	//rocketmq-client-4.2.0.jar   rocketmq-common-4.2.0.jar   rocketmq-remoting-4.2.0.jar
	//netty-all-4.1.8.Final.jar
	String mqGroup = "myGroup";
	String mqIP = "127.0.0.1:9876";
	String mqTopic = "myTopic";
	String mqTag = "myTag";
	String keyPrefix="mykey";
	String msgPrefix="hello 小李";
	int times=15;
	String appName="app-1";
	SampleResult sr = new SampleResult();  
	DefaultMQProducer producer=null;
	
	boolean isJMeter=true;
	
//	@Override
	public Arguments getDefaultParameters()
	{
		 //io.netty.util.concurrent.GenericFutureListener x;
		System.out.println("getDefaultParameters");
		Arguments args=new Arguments();
		args.addArgument("group", mqGroup);
		args.addArgument("ipPort", mqIP);
		args.addArgument("topic", mqTopic);
		args.addArgument("tag", mqTag);
		args.addArgument("keyPrefix",keyPrefix);
		args.addArgument("msgPrefix", msgPrefix);
		args.addArgument("times",Integer.toString(times));
		return args;
	}


//	@Override
	public void setupTest(JavaSamplerContext context) 
	{
		System.out.println("setupTest isJMeter="+isJMeter);
		if(isJMeter)
		{
			this.mqGroup=context.getParameter("group");
			this.mqIP=context.getParameter("ipPort");
			this.mqTopic=context.getParameter("topic");
			this.mqTag=context.getParameter("tag");
			this.keyPrefix=context.getParameter("keyPrefix");
			this.msgPrefix=context.getParameter("msgPrefix");
			System.out.println("setupTest parameter group="+ context.getParameter("group"));
			
			sr.setSampleLabel("RocketMQ测试");  
		    sr.sampleStart();  
		}
	    producer = new DefaultMQProducer(mqGroup);  
        producer.setNamesrvAddr(mqIP);  
        producer.setInstanceName(appName);  
        producer.setVipChannelEnabled(false);  
        try {
			producer.start();
		} catch (MQClientException e) {
			e.printStackTrace();
		} 
	}

//	@Override
	public void teardownTest(JavaSamplerContext context)
	{
		System.out.println("teardownTest");
		producer.shutdown();
		if(isJMeter)
		{
		   sr.sampleEnd();
		}
	}
	
    public SampleResult runTest(JavaSamplerContext javaSamplerContext) 
    {  
        try 
        {  
            for(int i=0;i<times;++i)
            {  
                Message msg = new Message(mqTopic, mqTag, keyPrefix+i, (msgPrefix+i).getBytes(Charset.forName("UTF-8")));  
                SendResult sendResult = producer.send(msg);  
                if(sendResult ==null || sendResult.getSendStatus() != SendStatus.SEND_OK){  
                    System.err.println(sendResult);  
                }
                System.out.println("send msg times="+i);
            }  
            if(isJMeter)
			{
	            sr.setResponseData("success","utf-8");  
	            sr.setDataType(SampleResult.TEXT);  
	            sr.setSuccessful(true);
			}
        }catch(Exception e)
        {  
            e.printStackTrace(); 
            StringWriter strWriter=  new StringWriter();
            e.printStackTrace(new PrintWriter(strWriter)); 
            System.err.println(strWriter.toString());
            if(isJMeter)
			{
	            sr.setSuccessful(false);
	            sr.setResponseData(strWriter.toString(),"utf-8");  
			}
        }  
        return sr;  
    }
}
===================================soapUI 
soapUI-5.5.0 开源版本 可以做 reset 测试 
soapUI pro 收费版本，改名叫 readyAPI-2.7.0  可做 OAS 3.0, Swagger, 
  包括soupUI，loadUI，secure (接口安全测试) ServiceV (专注mock) 
 
要用jdk8才行 vi soapui.sh最后面的java 使用绝对路径即可


alt +f 可以格式化 soupUI内部的XML格式  (也可右击->format XML),右击->insert file as Base64


Add to  TestCase后 , 在TestCase中 发送WebService 请求按钮的旁边有一个 Assert按钮,可以加Contains,表示结果中一定有什么字串
Add to  TestCase后 , TestCase 中 <pkgBin>cid:myPicFile</pkgBin> ,就可在Attachement 中part 部分就可下拉选择myPicFile

SOAP 头要有正确的名称空间,应该是literal生成的会好很多
soapui-<ver>\bin\ext 目录放 JDBC driver.jar


 <uploadTimestamp>2009-01-01T00:00:00+08:00</uploadTimestamp>
 <uploadTimestamp>2009-01-01T08:50:00</uploadTimestamp>
	

 加attachement  <bin>cid:xxx</bin>,下方的part中可选择 (literal可以)
 可加断言, 响应是否有指定结果,上方的add assertion to this item
 可以图形监控内存,最下的memeory log
 
project->testSuit->testCase->add Step,当有两个或以上时,可以把第一个结果的值取出做为变量传给下一个step中使用
专业版在响应视图中的Outline标签,右击响应行->transfer to..->property->targe Step:中选择下面已有的step,Target Property:中选择request,transfer Name:设置变量名
完成后,在中间建立了Property Transfer,可以再修改,targe区也要生成//node形式的xpath路径,点击右侧的按钮选择路径

也可在pro版本中的form中点击右侧的DB图标->Get Data...->选现有步聚中的DataSource,生成${DataSource#id},也可选择上面step中的reponse的值,
对于日期型的也可选择

可以建立多个Property Transfer,

中请求的XML中可加 ${DataSource#id} ${=(int)(Math.random()*1000)} ,在DataSourceLoop中测试OK




右击建立的TestStep-> 加DataSource->放在最顶层,可以读,excel数据,XML,JDBC数据库(file格式时每增加一个变量是分隔符","的下一列)
	可以建立Property Transfer,Source区选择建立的DataSource,Target区选择已建立WebService 的test step
右击建立的TestStep-> 加DataSourceLoop来循环读下一条(TargetStep为DataSource的后一个)

打开建立DataSource-> 选项 按钮->复选 shared ,可以在多线程下,不会读到相同的数据行(加锁)

右击建立的TestStep-> 增加Properties 可以做配置的静态变量

禁用多个TestStep中的某个,右击某个webservice的test step ->disable TestStep

可以右击建立的TestStep->add step->http test request可以请求get/post

增加 Condition Goto 类型的step,增加条件后(可多个),选择响应的Xpath后,可用exists()函数,也可//x/y=="OK",如结果为true,在target中选择跳到目录的step,
增加Groovy Script 类型的step,
if( Math.random() > 0.5 )
	testRunner.gotoStepByName( "checkin");
else
	testRunner.gotoStepByName( "refund");

增加DataGen 类型的step,增加变量名 orderNO,类型是Script(有List),中写 return (int)(Math.random()*1000),在请求的XML中可以使用${orderNO},
如但放在DataSourceLoop中是缓存起来的,每次都一样的值

增加Delay 类型的step,只要输入延迟时间以毫秒为单位

--------服务端
Add to   MockService 是做 WebService的服务端的,以XML形式写XML响应结果
--Groovy脚本,使用XML文件做为响应

响应 XML中使用${content} 变量

在script标签中写groovy脚本中动态生成变量的值

import com.eviware.soapui.support.GroovyUtils
import groovy.xml.XmlUtil

def groovyUtils=new GroovyUtils(context)
def xmlParser=new XmlParser()
//groovyUtils.projectPath 是soupUI的xml文件所在的文件夹
def responseContent=xmlParser.parse(groovyUtils.projectPath+"/response/100-response.xml")
context.content=XmlUtil.serialize(responseContent);

----
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ) 
def holder = groovyUtils.getXmlHolder( mockRequest.requestContent) 

def strRecordLocator = holder.getNodeValue("//ns1:RecordLocator").toString()//得到请求的RecordLocator标签的值

log.info(strRecordLocator)  //显示在script log标签中
return strRecordLocator;//值是对应的response的名字,soapUI建立自己的response,New MockResponse,可建立多个

----
def  now=new Date().time;
log.info(  now);

log.info( System.currentTimeMillis() );
log.info(  new Date().format('yyyy-MM-dd HH:mm:ss') );
--------压力测试
http://www.soapui.org/Load-Testing/simulating-different-types-of-load.html

建立LoadTest,Strategy中有几个可以选择的
1.Simple	发一个请求后要得到响应,可以延迟(Test Delay 配置 ),再发下一个
2.Burst		延迟一段时间,猛烈的发很多线程,持续一段时间
3.Fixed-Rate	Rate是每秒多少个WebSerivce请求,MaxThreads 如果来不及处理请求，队列中最多有多少线程(一个线程有可有多个WebService请求)
		复选Request level,
4.Variance	在多长时间内线程是变化的,
5.Thread	开始多少线程，结束多少线程
6.Grid 可以配置　先在多长时间内发多少线程，第二次其它时间内发其它的线程数...

表格中的min,max,avg指的是
--------REST 使用
右击项目->New REST Service from URI  输入地址
右击建立的Rest服务-> Generate TestSuite,展开可以在Load Tests中建立

=======






