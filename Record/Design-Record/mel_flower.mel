帮助->Commands->A...Z



system "ls -l " 系统命令

polyCube -width 10 -height 20;
polyCube -edit -width 20;  //修改 对选择的
polyCube -edit -width     //查询 对选择的


ls -sl ; 列出选择物的名称

ls -transforms;

getAttr pCube1.translate;
getAttr pCube1.rotateX;
setAttr pCube1.visibility 0;

int $num;
float $f;
string $name;
string $ourname[]; //手册中有arrays
string $array[3] = {"first\n", "second\n", "third\n"}; 
print($array[0]); // Prints "first\n"   ,也可没有()


float $rx=`getAttr pCube1.rotateX`;  //`  `   中的内容会执行结果给变量
print $rx;

string $selected[] =`ls -sl`; //可以直接给



if (`objExists "mySphere"`)
{
	move 5 5 5;
}else
{
	print "no mySphere";
}

if (attributeExists("visibility","mySphere")) { 
	setAttr mySphere.visibility on; 
} 


rand 0 50 //0 到 50的随机数

? xx : 

switch 
while
do while
for 
for -in
continue
break;


ＶＣ可以和maya一起debug C程序　，Maya API （MTypeId） 

-------------------------------------------
有向日葵


选择后->ctrl+enter 

加弹出菜单  windows->setting/preference->marking menu Editor->点Create Making Menu->拖shelf 上的MEL到->可以测试
右击图标->改名字->起名字-> Settings中选择[Hotkey Editor]
可以单选，复选，加小盒子（用弹出对话框的），怎么加多级菜单呢？？？？

windows->setting/preference->Hotkey Editor->User Marking Menus->对刚才的脚本加快捷键
file->project->set
C:\Documents and Settings\Administrator\My Documents\maya\2008\prefs\markingMenus   下存放刚才建立的mel

+ - 来增加,减少   手柄的大小

sphere -name ball;   //起名字
polyCube -n box;
setAttr ball.tz 20；

//注意mel颜色,不要用全角空格
addAttr -longName spinBox -defaultValue 0 -maxValue 360 -minValue -360 -keyable true; //对象选择的,默认是一个slider
//-keyable 可以出现在channel box 中,只有这里的可以关键贞,-attributeType double


在对对象的属性面板的extra attribute 栏中

connectAttr    ball.spinBox box.ry  //就可以连接,box.ry属性变黄,不可以改变值

//可右击通道的属性->attriubte->可加,删,deleteAttr [-attribute string]


aliasAttr flatten box.sy  //为box.sy 起一个别名
aliasAttr -rm box.flatten //,-rm box.flatten//删

setAttr -keyable false ball.tz;//从通道中消失,可不选择执行




string $myarray[]={"one","two"};



float $thickness=.5//可以以" . "开头 



global proc ballStack( int $myNum ,float $thickness)  //定一个函数,global名字保存文件名相同(C:\Documents and Settings\Administrator\My Documents\maya\2008\script\ballStack.mel )
{
	for($laps=0;$laps<=$myNum;$laps++)
	{
		sphere;
		scale 1 $thickness 1;
		move 0 $laps 0;
	}
}


在maya中使用 source ballStack //来加到内存中,如找不到,file->project->set选择project\default
执行 ballStack 10 .5 //传参数



window -rtf true -title "create " myWindow;
//-rtf resize to fit 
columnLayout ;
intSliderGrp -label "Number of Balls" -field true numBalls;
//-field  是否可以键盘输入
floatSliderGrp -label "Thickness" -field true -minValue 0 -maxValue 1 ballThickness;
button -c "findValues" -label "Make Shpere";
//-c command
showWindow myWindow;

proc findValues()
{
	int $myNumBalls =`intSliderGrp -q -value "numBalls"`;
	//print  $myNumBalls ;
	float $myThickness =`floatSliderGrp -q -value "ballThickness"`;
	ballStack($myNumBalls,$myThickness);
}




string $mySelection[] =`ls -sl`; //选择了什么

for  ( $myNode  in $mySelection )
{
setAttr -keybale false ($myNode + ".tx");
}

rowLayout -nc 3 ; //  -numberOfColumns(-nc)   (window中的)


每个物体的次级点,有VC坐标点,通道中可以改的
sphere -n ball;
select ball;

//---------------------做花-----------------------
//tartan 格子
//petal 花瓣
global proc flowerMaker()
{
	int $numPetal=`rand 10 20`;
	
//---- 建花瓣材质
	int $createShader=1;
	string $shads[]=`ls -mat`;  //选择所有的材质
	for($myNode in $shads)
	{
		if($myNode =="petalColor")
		{
			$createShader=0;	
		}
	}

	switch ($createShader)
	{
		case 0:
			print "no ";
			break;
		case 1:
			shadingNode -asShader lambert -n "petalColor"; //建一个 shader
			shadingNode -asTexture ramp -n "petalRamp"; //建一个 texture
			
			//手工建一个shader 时,会多出一个sahderGroup
			sets -renderable true -noSurfaceShader true -empty -n petalColorSG;////""可有,可无
			
			connectAttr -f  petalColor.outColor petalColorSG.surfaceShader;
			// -f forece
			connectAttr petalRamp.outColor petalColor.color;
			
			setAttr "petalRamp.colorEntryList[3].color" -type double3 1 0 0 ;//红色
			setAttr "petalRamp.colorEntryList[3].position" 1;

			setAttr "petalRamp.colorEntryList[2].color" -type double3 1 1 0 ;//黄色
			setAttr "petalRamp.colorEntryList[2].position" .5;

			setAttr "petalRamp.colorEntryList[1].color" -type double3 1 0 0 ;//红色 最下面的是1
			setAttr "petalRamp.colorEntryList[1].position" 0;
			setAttr petalRamp.type 8;  //手工做的时候,看窗口吧
//----------建芯材质
			shadingNode -asShader lambert -n "petalCore";
			setAttr "petalCore.color" -type double3 .4 .2 .14;
			sets -renderable true -noSurfaceShader true -empty -n petalCoreSG;
			connectAttr -f petalCore.outColor petalCoreSG.surfaceShader;


			break;

	}


//----------
	sphere -ax 0 1 0 -n "core";
	string $myCore[]=`ls -sl`;
	scale 1 .5  1 ;
	move 0 .2 0 ;
	//----给蕊材质
	 pickWalk -d down;
	string $myCoreShape[]=`ls -sl`;
	sets -edit -forceElement petalCoreSG -n $myCoreShape[0];

//------------------------------
	sphere -ax 0 1 0  ; //Y轴向上
	move 0 0 -1.6;
	scale .7 .3 1.7;
	FreezeTransformations;//通道的值变0 ,
	ResetTransformations;//中心到0,0,0
	string $myPetal[]=`ls -sl`;
	
	parent $myPetal $myCore;//建父子关系 parent $myPetal[0] $myCore; //后面复制的也是有继承
	
	//选择CV点
	select ($myPetal[0]+".cv[3][7]" );//3,7可以在面板中通道看到
	move -r  0 2 0 ;//-r 相对    上,下键 移动V点
	
	for ($uCV=5;$uCV<=6 ;$uCV++) //U
	{	
		for ($vCV=0;$vCV<=7 ;$vCV++) //V
		{
		
			select ($myPetal[0]+".cv["+$uCV+"]["+$vCV+"]");
			move -r 0 -.3 0;
		}
	
	}
//-----赋花瓣材质	
	select $myPetal[0];//放前,复制后也带材质, 
	pickWalk -d down; //direction
	string $myPetalShape[]=`ls -sl`;
	
	sets -edit -forceElement petalColorSG $myPetalShape[0];
//------

	select $myPetal[0];
	float $degreeApart=(360/$numPetal);
	for($i=1;$i<$numPetal;$i++)
	{	
		duplicate ;
		rotate -r  0 $degreeApart 0;
		//随机
		float $petalRX=`rand -10 10`;
		float $petalRY=`rand -10 10`;
		float $petalRZ=`rand -10 10`;
		
		FreezeTransformations;

		rotate $petalRX $petalRY $petalRX;


	}
	
	select $myCore;
	rename "Flower0";//后建立的就会加数字
}










